#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –Ω–∞ Beget

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞..."

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
check_internet() {
    echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ..."
    if ping -c 1 google.com &> /dev/null || ping -c 1 8.8.8.8 &> /dev/null; then
        echo "‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 0
    else
        echo "‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
check_internet

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ root –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if [ "$EUID" -ne 0 ] && ! command -v docker &> /dev/null; then
    echo "‚ö†Ô∏è –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo: sudo ./deploy.sh"
    echo "–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
install_docker() {
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    fi

    # –î–ª—è Kali Linux –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if [[ "$OS" == *"Kali"* ]]; then
        echo "üêâ –û–±–Ω–∞—Ä—É–∂–µ–Ω Kali Linux, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É..."

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Docker –µ—Å–ª–∏ –µ—Å—Ç—å
        echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Docker..."
        sudo apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–∫–µ—Ç–∞–º–∏
        echo "üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–∫–µ—Ç–∞–º–∏..."
        sudo apt update --fix-missing || true
        sudo apt install -f -y || true

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É..."
        for i in {1..3}; do
            if sudo apt update; then
                break
            else
                echo "‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ $i –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º..."
                sleep 2
            fi
        done

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release software-properties-common

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á Docker
        echo "üîë –î–æ–±–∞–≤–ª—è–µ–º GPG –∫–ª—é—á Docker..."
        curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker (–∏—Å–ø–æ–ª—å–∑—É–µ–º Debian bullseye –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        echo "üìã –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker..."
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian bullseye stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
        echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤..."
        sudo apt update

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        echo "üê≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
        if ! sudo apt install -y docker-ce docker-ce-cli containerd.io; then
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å..."
            sudo apt install -f -y
            sudo apt install -y docker-ce docker-ce-cli containerd.io --fix-missing || true
        fi

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã..."
        sudo apt install -y slirp4netns --fix-missing || echo "‚ö†Ô∏è slirp4netns –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ Docker –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–µ–≥–æ"

        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É docker –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        echo "üë• –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É docker..."
        sudo groupadd docker 2>/dev/null || true

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
        if [ -n "$SUDO_USER" ]; then
            sudo usermod -aG docker $SUDO_USER
            echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $SUDO_USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
        else
            sudo usermod -aG docker $USER
            echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
        fi

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –≤–∫–ª—é—á–∞–µ–º Docker —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º Docker..."
        if sudo systemctl start docker; then
            echo "‚úÖ Docker –∑–∞–ø—É—â–µ–Ω"
        else
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å..."
            sudo systemctl daemon-reload
            sudo systemctl start docker || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker"
        fi

        if sudo systemctl enable docker; then
            echo "‚úÖ Docker –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫"
        else
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å Docker –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫"
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker
        echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker..."
        sudo systemctl status docker --no-pager || true

    else
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
        echo "üêß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker $USER
        rm get-docker.sh
    fi

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker..."
    if command -v docker &> /dev/null; then
        echo "‚úÖ Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        sudo docker --version

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Docker
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Docker..."
        if sudo docker run --rm hello-world; then
            echo "‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else
            echo "‚ö†Ô∏è Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª"
        fi
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose
install_docker_compose() {
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose..."

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ apt (–ø—Ä–æ—â–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ –¥–ª—è Kali)
    echo "üì¶ –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ apt..."
    if sudo apt install -y docker-compose; then
        echo "‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ apt"
        docker-compose --version
        return 0
    fi

    echo "‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ apt –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –±–∏–Ω–∞—Ä–Ω–∏–∫..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    ARCH=$(uname -m)
    if [ "$ARCH" = "x86_64" ]; then
        ARCH="x86_64"
    elif [ "$ARCH" = "aarch64" ]; then
        ARCH="aarch64"
    else
        echo "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"
        return 1
    fi

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    echo "üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏..."
    COMPOSE_VERSION=""
    for i in {1..3}; do
        COMPOSE_VERSION=$(curl -s --connect-timeout 10 https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
        if [ -n "$COMPOSE_VERSION" ]; then
            break
        else
            echo "‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ $i –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º..."
            sleep 2
        fi
    done

    if [ -z "$COMPOSE_VERSION" ]; then
        echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é Docker Compose, –∏—Å–ø–æ–ª—å–∑—É–µ–º v2.20.2"
        COMPOSE_VERSION="v2.20.2"
    fi

    echo "üì• –°–∫–∞—á–∏–≤–∞–µ–º Docker Compose $COMPOSE_VERSION..."

    # –°–∫–∞—á–∏–≤–∞–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    DOWNLOAD_SUCCESS=false
    for i in {1..3}; do
        if sudo curl -L --connect-timeout 30 "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-${ARCH}" -o /usr/local/bin/docker-compose; then
            DOWNLOAD_SUCCESS=true
            break
        else
            echo "‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ $i —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º..."
            sleep 2
        fi
    done

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if [ "$DOWNLOAD_SUCCESS" = true ] && [ -f "/usr/local/bin/docker-compose" ]; then
        sudo chmod +x /usr/local/bin/docker-compose

        # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose 2>/dev/null || true

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É
        if /usr/local/bin/docker-compose --version; then
            echo "‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            echo "‚ùå Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            return 1
        fi
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Docker Compose"
        echo "üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ pip..."

        # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ pip –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        if command -v pip3 &> /dev/null; then
            sudo pip3 install docker-compose
        elif command -v pip &> /dev/null; then
            sudo pip install docker-compose
        else
            echo "‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose –Ω–µ —É–¥–∞–ª–∏—Å—å"
            return 1
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Git
install_git() {
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Git..."
    sudo apt update
    sudo apt install -y git
    echo "‚úÖ Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ acme.sh (–∑–∞–º–µ–Ω–∞ certbot)
install_acme() {
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º acme.sh..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    if [ -d "$HOME/.acme.sh" ]; then
        echo "‚úÖ acme.sh —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    fi

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º acme.sh
    curl https://get.acme.sh | sh -s email=admin@localhost

    if [ -d "$HOME/.acme.sh" ]; then
        echo "‚úÖ acme.sh —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        export PATH="$HOME/.acme.sh:$PATH"
        return 0
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ acme.sh"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
if ! command -v docker &> /dev/null; then
    echo "‚ö†Ô∏è Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if install_docker; then
            echo "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∑–∞–ø—É—Å–∫–∞—Ç—å docker –±–µ–∑ sudo
            if docker ps &> /dev/null; then
                echo "‚úÖ Docker –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            else
                echo "üîÑ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ Docker"
                echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
                echo "–ò–ª–∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"

                # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ —Å—Ä–∞–∑—É
                echo "üîß –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ —Å–µ–π—á–∞—Å..."
                if newgrp docker <<< "docker ps" &> /dev/null; then
                    echo "‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
                else
                    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å sudo? (y/n): " -n 1 -r
                    echo
                    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                        exit 0
                    fi
                fi
            fi
        else
            echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker"
            exit 1
        fi
    else
        echo "‚ùå Docker –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
        exit 1
    fi
else
    echo "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    docker --version

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ Docker
    if ! docker ps &> /dev/null; then
        echo "‚ö†Ô∏è Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤"

        # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker
        if sudo systemctl start docker; then
            echo "‚úÖ Docker –∑–∞–ø—É—â–µ–Ω"
        else
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker"
            exit 1
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ! groups $USER | grep -q docker; then
            echo "üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker..."
            sudo usermod -aG docker $USER
            echo "üîÑ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: newgrp docker"
        fi
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "‚ö†Ô∏è Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker Compose –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if install_docker_compose; then
            echo "‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            docker-compose --version
        else
            echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose"
            exit 1
        fi
    else
        echo "‚ùå Docker Compose –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
        exit 1
    fi
else
    echo "‚úÖ Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    docker-compose --version
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Git
if ! command -v git &> /dev/null; then
    echo "‚ö†Ô∏è Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Git –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        install_git
    fi
fi

# –î–µ–ª–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
echo "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º..."
chmod +x scripts/*.sh 2>/dev/null || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º acme.sh (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ certbot)
if [ ! -d "$HOME/.acme.sh" ]; then
    echo "‚ö†Ô∏è acme.sh –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω—É–∂–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤)"
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å acme.sh –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if install_acme; then
            echo "‚úÖ acme.sh —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            echo "üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/ssl_manager.sh"
        else
            echo "‚ö†Ô∏è acme.sh –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
            echo "üí° SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ–∑–∂–µ"
        fi
    else
        echo "‚ö†Ô∏è acme.sh –ø—Ä–æ–ø—É—â–µ–Ω. SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é"
    fi
else
    echo "‚úÖ acme.sh —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ Docker
fix_docker_permissions() {
    echo "üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ Docker..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å docker –±–µ–∑ sudo
    if docker ps &> /dev/null; then
        echo "‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ sudo"
        return 0
    fi

    echo "‚ö†Ô∏è Docker —Ç—Ä–µ–±—É–µ—Ç sudo, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞..."

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
    if ! groups $USER | grep -q docker; then
        sudo usermod -aG docker $USER
        echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
    fi

    # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ newgrp
    echo "üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∞ –≥—Ä—É–ø–ø—ã..."
    if newgrp docker <<< "docker ps" &> /dev/null; then
        echo "‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        return 0
    fi

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    echo "1) –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å sudo (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å)"
    echo "2) –ü–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    echo "3) –í—ã–ø–æ–ª–Ω–∏—Ç—å 'newgrp docker' –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"

    read -p "–í–∞—à –≤—ã–±–æ—Ä (1/2/3): " -n 1 -r
    echo

    case $REPLY in
        1)
            echo "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å sudo"
            # –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å –¥–ª—è docker —Å sudo
            alias docker='sudo docker'
            alias docker-compose='sudo docker-compose'
            return 0
            ;;
        2|3)
            echo "üîÑ –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
            echo "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./deploy.sh"
            exit 0
            ;;
        *)
            echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –≤—ã—Ö–æ–¥–∏–º"
            exit 1
            ;;
    esac
}

echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ Docker –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
fix_docker_permissions

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã docker –∏ docker-compose (—Å sudo –∏–ª–∏ –±–µ–∑)
if docker ps &> /dev/null; then
    DOCKER_CMD="docker"
    DOCKER_COMPOSE_CMD="docker-compose"
    echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º docker –±–µ–∑ sudo"
else
    DOCKER_CMD="sudo docker"
    DOCKER_COMPOSE_CMD="sudo docker-compose"
    echo "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º docker —Å sudo"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -f /etc/edu_telebot/env ]; then
    echo "‚ùå –§–∞–π–ª /etc/edu_telebot/env –Ω–µ –Ω–∞–π–¥–µ–Ω."
    read -p "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–µ–π—á–∞—Å? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo ./scripts/setup_env.sh
        echo "üìù –¢–µ–ø–µ—Ä—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª: sudo nano /etc/edu_telebot/env"
        echo "–ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
        exit 0
    else
        echo "üìù –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∑–∂–µ: sudo ./scripts/setup_env.sh"
        echo "üìù –ó–∞—Ç–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ: sudo nano /etc/edu_telebot/env"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
if [ ! -d "logs" ]; then
    echo "üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤..."
    mkdir -p logs
    mkdir -p logs/nginx
fi

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
echo "üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º..."
chmod -R 777 logs  # –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –≤—Å–µ—Ö (–Ω—É–∂–Ω–æ –¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)
chown -R $USER:$USER logs 2>/dev/null || true  # –ü—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
touch logs/bot_$(date +%Y-%m-%d).log 2>/dev/null || true
chmod 666 logs/bot_$(date +%Y-%m-%d).log 2>/dev/null || true

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL
if [ -f "/etc/edu_telebot/env" ]; then
    source /etc/edu_telebot/env
    echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
else
    echo "‚ö†Ô∏è –§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
if grep -q "WEBHOOK_MODE=true" /etc/edu_telebot/env; then
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è SSL, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -d "nginx/ssl" ]; then
        echo "üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
        mkdir -p nginx/ssl
    fi
    
    # –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    find_existing_ssl() {
        echo "üîç –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."

        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
        local cert_paths=(
            "/etc/letsencrypt/live/$DOMAIN"
            "/etc/letsencrypt/live"
            "$HOME/.acme.sh/$DOMAIN"
            "$HOME/.acme.sh"
            "/etc/ssl/certs"
            "/opt/ssl"
            "/var/ssl"
        )

        for path in "${cert_paths[@]}"; do
            if [ -d "$path" ]; then
                # –ò—â–µ–º fullchain.pem –∏ privkey.pem
                local fullchain=$(find "$path" -name "fullchain.pem" -type f 2>/dev/null | head -1)
                local privkey=$(find "$path" -name "privkey.pem" -type f 2>/dev/null | head -1)

                if [ -n "$fullchain" ] && [ -n "$privkey" ]; then
                    echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:"
                    echo "   Fullchain: $fullchain"
                    echo "   Private key: $privkey"

                    # –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
                    echo "üìã –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ nginx/ssl/..."
                    sudo cp "$fullchain" nginx/ssl/fullchain.pem
                    sudo cp "$privkey" nginx/ssl/privkey.pem

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
                    sudo chmod 644 nginx/ssl/fullchain.pem
                    sudo chmod 600 nginx/ssl/privkey.pem
                    sudo chown $USER:$USER nginx/ssl/*.pem 2>/dev/null || true

                    echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
                    return 0
                fi
            fi
        done

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏—â–µ–º –ª—é–±—ã–µ .pem —Ñ–∞–π–ª—ã —Å cert/key –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        echo "üîç –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ SSL —Ñ–∞–π–ª—ã..."
        local cert_file=$(sudo find /etc -name "*.pem" -type f 2>/dev/null | grep -E "(cert|certificate)" | grep -v "ca-certificates" | head -1)
        local key_file=$(sudo find /etc -name "*.pem" -type f 2>/dev/null | grep -E "(key|private)" | head -1)

        if [ -n "$cert_file" ] && [ -n "$key_file" ]; then
            echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ SSL —Ñ–∞–π–ª—ã:"
            echo "   –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: $cert_file"
            echo "   –ö–ª—é—á: $key_file"
            echo ""
            read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã? (y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                sudo cp "$cert_file" nginx/ssl/fullchain.pem
                sudo cp "$key_file" nginx/ssl/privkey.pem
                sudo chmod 644 nginx/ssl/fullchain.pem
                sudo chmod 600 nginx/ssl/privkey.pem
                sudo chown $USER:$USER nginx/ssl/*.pem 2>/dev/null || true
                echo "‚úÖ SSL —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
                return 0
            fi
        fi

        return 1
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    if [ ! -f "nginx/ssl/fullchain.pem" ] || [ ! -f "nginx/ssl/privkey.pem" ]; then
        echo "‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ nginx/ssl/"

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        if find_existing_ssl; then
            echo "üéâ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
        else
            echo "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
            echo "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π SSL –º–µ–Ω–µ–¥–∂–µ—Ä: ./scripts/ssl_manager.sh"
            read -p "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ–π—á–∞—Å? (y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                ./scripts/ssl_manager.sh
            fi
        fi
    else
        echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ nginx/ssl/"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
        if [ "$(stat -c %a nginx/ssl/fullchain.pem 2>/dev/null)" != "644" ] || [ "$(stat -c %a nginx/ssl/privkey.pem 2>/dev/null)" != "600" ]; then
            echo "üîê –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º..."
            chmod 644 nginx/ssl/fullchain.pem 2>/dev/null || true
            chmod 600 nginx/ssl/privkey.pem 2>/dev/null || true
        fi
    fi
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
$DOCKER_COMPOSE_CMD down

# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
echo ""
echo "üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞–º–∏:"
echo "1) –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–∑—ã)"
echo "2) –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ (—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã –∏ —Å–æ–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ)"
echo "3) –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ volumes)"
read -p "–í–∞—à –≤—ã–±–æ—Ä (1/2/3): " -n 1 -r
echo

case $REPLY in
    1)
        echo "‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–∑—ã"
        BUILD_OPTION=""
        ;;
    2)
        echo "üóëÔ∏è –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—ã..."
        $DOCKER_COMPOSE_CMD down --rmi all --volumes --remove-orphans
        echo "üßπ –û—á–∏—â–∞–µ–º Docker –∫–µ—à..."
        $DOCKER_CMD system prune -f
        BUILD_OPTION="--no-cache"
        ;;
    3)
        echo "üóëÔ∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ volumes..."
        $DOCKER_COMPOSE_CMD down --volumes --remove-orphans
        BUILD_OPTION=""
        ;;
    *)
        echo "‚ö° –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"
        BUILD_OPTION=""
        ;;
esac

# –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if [ "$BUILD_OPTION" = "--no-cache" ]; then
    echo "üî® –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã —Å –Ω—É–ª—è..."
    if ! $DOCKER_COMPOSE_CMD build --no-cache; then
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–æ–≤"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
elif [ -n "$BUILD_OPTION" ]; then
    echo "üî® –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã..."
    if ! $DOCKER_COMPOSE_CMD build; then
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–æ–≤"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
else
    echo "‚ö° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –æ–±—Ä–∞–∑–æ–≤"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
if ! $DOCKER_COMPOSE_CMD up -d; then
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    $DOCKER_COMPOSE_CMD logs
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
$DOCKER_COMPOSE_CMD ps

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
if $DOCKER_COMPOSE_CMD ps | grep -q "Up"; then
    echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx
    if $DOCKER_COMPOSE_CMD ps nginx | grep -q "Up"; then
        echo "‚úÖ Nginx –∑–∞–ø—É—â–µ–Ω"
    else
        echo "‚ö†Ô∏è Nginx –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
    if $DOCKER_COMPOSE_CMD ps bot | grep -q "Up"; then
        echo "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
    else
        echo "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if $DOCKER_COMPOSE_CMD ps postgres | grep -q "Up"; then
        echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞"
    else
        echo "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    fi
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    $DOCKER_COMPOSE_CMD logs
    exit 1
fi

echo ""
echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo "üìù –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: $DOCKER_COMPOSE_CMD logs -f bot"
echo "üåê –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ nginx: $DOCKER_COMPOSE_CMD logs -f nginx"
echo "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: $DOCKER_COMPOSE_CMD down"

# –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–±—ç–∫–∞–ø—ã
read -p "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if [ -f "scripts/backup_setup.sh" ]; then
        echo "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–±—ç–∫–∞–ø—ã..."
        ./scripts/backup_setup.sh
        echo "‚úÖ –ê–≤—Ç–æ–±—ç–∫–∞–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"
    else
        echo "‚ùå –°–∫—Ä–∏–ø—Ç scripts/backup_setup.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "üìù –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–æ–≤ –≤—Ä—É—á–Ω—É—é"
    fi
fi

# –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
read -p "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if [ -f "scripts/setup_autostart.sh" ]; then
        ./scripts/setup_autostart.sh
    else
        echo "‚ùå –°–∫—Ä–∏–ø—Ç scripts/setup_autostart.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "üìù –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é:"
        echo "   sudo nano /etc/systemd/system/telebot.service"
        echo "   sudo systemctl enable telebot.service"
        echo "   sudo systemctl start telebot.service"
    fi
fi
