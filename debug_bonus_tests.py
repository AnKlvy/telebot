"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import BonusTestRepository, BonusQuestionRepository, BonusAnswerOptionRepository


async def debug_bonus_tests():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = await BonusTestRepository.get_all()
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(tests)}")
        
        if not tests:
            print("‚ùå –ë–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        for i, test in enumerate(tests, 1):
            print(f"\n{i}. üß™ –¢–µ—Å—Ç: {test.name}")
            print(f"   üí∞ –¶–µ–Ω–∞: {test.price} –º–æ–Ω–µ—Ç")
            print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {test.created_at}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
            question_repo = BonusQuestionRepository()
            questions = await question_repo.get_by_bonus_test(test.id)
            print(f"   üìù –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
            
            if not questions:
                print("   ‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                continue
            
            for j, question in enumerate(questions, 1):
                print(f"\n   {j}. ‚ùì –í–æ–ø—Ä–æ—Å ID {question.id}: {question.text}")
                print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {question.time_limit} —Å–µ–∫—É–Ω–¥")
                print(f"      üì∑ –§–æ—Ç–æ: {question.photo_path or '–ù–µ—Ç'}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                options = await BonusAnswerOptionRepository.get_by_bonus_question(question.id)
                print(f"      üî§ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {len(options)}")
                
                if not options:
                    print("      ‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                    continue
                
                for k, option in enumerate(options, 1):
                    status = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô" if option.is_correct else "‚ùå –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"
                    print(f"         {k}. {option.text} ({status})")
        
        print(f"\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(tests)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(debug_bonus_tests())
