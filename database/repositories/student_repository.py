"""
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
"""
from typing import List, Optional
from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from ..models import Student, User, Group
from ..database import get_db_session


class StudentRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏"""
    
    @staticmethod
    async def get_all() -> List[Student]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        async with get_db_session() as session:
            result = await session.execute(
                select(Student)
                .options(
                    selectinload(Student.user),
                    selectinload(Student.group).selectinload(Group.subject)
                )

            )
            return list(result.scalars().all())

    @staticmethod
    async def get_by_id(student_id: int) -> Optional[Student]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID"""
        async with get_db_session() as session:
            result = await session.execute(
                select(Student)
                .options(
                    selectinload(Student.user),
                    selectinload(Student.group).selectinload(Group.subject)
                )
                .where(Student.id == student_id)
            )
            return result.scalar_one_or_none()

    @staticmethod
    async def get_by_user_id(user_id: int) -> Optional[Student]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with get_db_session() as session:
            result = await session.execute(
                select(Student)
                .options(
                    selectinload(Student.user),
                    selectinload(Student.group).selectinload(Group.subject)
                )
                .where(Student.user_id == user_id)
            )
            return result.scalar_one_or_none()

    @staticmethod
    async def get_by_group(group_id: int) -> List[Student]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–µ"""
        async with get_db_session() as session:
            result = await session.execute(
                select(Student)
                .options(
                    selectinload(Student.user),
                    selectinload(Student.group).selectinload(Group.subject)
                )
                .where(Student.group_id == group_id)

            )
            return list(result.scalars().all())

    @staticmethod
    async def get_by_course_and_group(course_id: int = None, group_id: int = None) -> List[Student]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É –∏/–∏–ª–∏ –≥—Ä—É–ø–ø–µ"""
        async with get_db_session() as session:
            query = select(Student).options(
                selectinload(Student.user),
                selectinload(Student.group).selectinload(Group.subject)
            )
            
            if group_id:
                query = query.where(Student.group_id == group_id)
            elif course_id:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫—É—Ä—Å, –Ω–æ –Ω–µ –≥—Ä—É–ø–ø–∞, –ø–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∫—É—Ä—Å–∞
                from ..models import Subject, course_subjects
                query = query.join(Student.group).join(Group.subject).join(
                    course_subjects, Subject.id == course_subjects.c.subject_id
                ).where(course_subjects.c.course_id == course_id)
                
            result = await session.execute(query)
            return list(result.scalars().all())

    @staticmethod
    async def create(user_id: int, group_id: int = None, tariff: str = None) -> Student:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        async with get_db_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await session.execute(
                select(Student).where(Student.user_id == user_id)
            )
            if existing.scalar_one_or_none():
                raise ValueError(f"–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_exists = await session.execute(
                select(User).where(User.id == user_id)
            )
            if not user_exists.scalar_one_or_none():
                raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            student = Student(
                user_id=user_id,
                group_id=group_id,
                tariff=tariff
            )
            session.add(student)
            await session.commit()
            await session.refresh(student)
            return student

    @staticmethod
    async def update(student_id: int, group_id: int = None, tariff: str = None, 
                    points: int = None, level: str = None) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
        async with get_db_session() as session:
            student = await session.get(Student, student_id)
            if not student:
                return False
            
            if group_id is not None:
                student.group_id = group_id
            if tariff is not None:
                student.tariff = tariff
            if points is not None:
                student.points = points
            if level is not None:
                student.level = level
                
            await session.commit()
            return True

    @staticmethod
    async def delete(student_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        async with get_db_session() as session:
            result = await session.execute(delete(Student).where(Student.id == student_id))
            await session.commit()
            return result.rowcount > 0

    @staticmethod
    async def delete_by_user_id(user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with get_db_session() as session:
            result = await session.execute(delete(Student).where(Student.user_id == user_id))
            await session.commit()
            return result.rowcount > 0

    @staticmethod
    async def get_general_stats(student_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        from .homework_result_repository import HomeworkResultRepository
        return await HomeworkResultRepository.get_student_stats(student_id)

    @staticmethod
    async def get_microtopic_understanding(student_id: int, subject_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        from .homework_result_repository import HomeworkResultRepository
        return await HomeworkResultRepository.get_microtopic_understanding(student_id, subject_id)

    @staticmethod
    async def update_points_and_level(student_id: int) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã –∏ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –î–ó"""
        async with get_db_session() as session:
            student = await session.get(Student, student_id)
            if not student:
                return False

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await StudentRepository.get_general_stats(student_id)
            total_points = stats.get('total_points', 0)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–ª–æ–≤
            if total_points >= 1000:
                level = "üèÜ –≠–∫—Å–ø–µ—Ä—Ç"
            elif total_points >= 500:
                level = "üß™ –ü—Ä–∞–∫—Ç–∏–∫"
            elif total_points >= 200:
                level = "üìö –£—á–µ–Ω–∏–∫"
            elif total_points >= 50:
                level = "üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π"
            else:
                level = "üÜï –ù–æ–≤–∏—á–æ–∫"

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            student.points = total_points
            student.level = level

            await session.commit()
            return True
