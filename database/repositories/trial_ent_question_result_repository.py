from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, Integer
from sqlalchemy.orm import selectinload
from typing import List, Optional, Dict, Any
import logging
from ..database import get_db_session
from ..models import TrialEntQuestionResult, TrialEntResult, Question, AnswerOption

logger = logging.getLogger(__name__)


class TrialEntQuestionResultRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""

    @staticmethod
    async def create(
        test_result_id: int,
        question_id: int,
        selected_answer_id: Optional[int],
        is_correct: bool,
        subject_code: str,
        time_spent: Optional[int] = None,
        microtopic_number: Optional[int] = None
    ) -> TrialEntQuestionResult:
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
        async with get_db_session() as session:
            question_result = TrialEntQuestionResult(
                test_result_id=test_result_id,
                question_id=question_id,
                selected_answer_id=selected_answer_id,
                is_correct=is_correct,
                subject_code=subject_code,
                time_spent=time_spent,
                microtopic_number=microtopic_number
            )
            session.add(question_result)
            await session.commit()
            await session.refresh(question_result)
            return question_result

    @staticmethod
    async def create_batch(question_results_data: List[Dict[str, Any]]) -> List[TrialEntQuestionResult]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑"""
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"üìä TRIAL_ENT_QUESTION_REPO: –°–æ–∑–¥–∞–µ–º {len(question_results_data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤")

        async with get_db_session() as session:
            try:
                question_results = []
                for i, data in enumerate(question_results_data):
                    question_result = TrialEntQuestionResult(**data)
                    session.add(question_result)
                    question_results.append(question_result)

                    if i % 50 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
                        logger.info(f"üìù TRIAL_ENT_QUESTION_REPO: –î–æ–±–∞–≤–ª–µ–Ω–æ {i+1}/{len(question_results_data)} –∑–∞–ø–∏—Å–µ–π")

                logger.info(f"üíæ TRIAL_ENT_QUESTION_REPO: –ö–æ–º–º–∏—Ç–∏–º {len(question_results)} –∑–∞–ø–∏—Å–µ–π...")
                await session.commit()

                logger.info(f"üîÑ TRIAL_ENT_QUESTION_REPO: –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã...")
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞
                for qr in question_results:
                    await session.refresh(qr)

                logger.info(f"‚úÖ TRIAL_ENT_QUESTION_REPO: –°–æ–∑–¥–∞–Ω–æ {len(question_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤")
                return question_results

            except Exception as e:
                logger.error(f"‚ùå TRIAL_ENT_QUESTION_REPO: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                await session.rollback()
                raise

    @staticmethod
    async def get_by_id(question_result_id: int) -> Optional[TrialEntQuestionResult]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢ –ø–æ ID"""
        async with get_db_session() as session:
            result = await session.execute(
                select(TrialEntQuestionResult)
                .options(
                    selectinload(TrialEntQuestionResult.test_result),
                    selectinload(TrialEntQuestionResult.question),
                    selectinload(TrialEntQuestionResult.selected_answer)
                )
                .where(TrialEntQuestionResult.id == question_result_id)
            )
            return result.scalar_one_or_none()

    @staticmethod
    async def get_by_test_result(test_result_id: int) -> List[TrialEntQuestionResult]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
        async with get_db_session() as session:
            result = await session.execute(
                select(TrialEntQuestionResult)
                .options(
                    selectinload(TrialEntQuestionResult.question),
                    selectinload(TrialEntQuestionResult.selected_answer)
                )
                .where(TrialEntQuestionResult.test_result_id == test_result_id)
                .order_by(TrialEntQuestionResult.id)
            )
            return result.scalars().all()

    @staticmethod
    async def get_by_test_result_and_subject(test_result_id: int, subject_code: str) -> List[TrialEntQuestionResult]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ"""
        async with get_db_session() as session:
            result = await session.execute(
                select(TrialEntQuestionResult)
                .options(
                    selectinload(TrialEntQuestionResult.question),
                    selectinload(TrialEntQuestionResult.selected_answer)
                )
                .where(
                    and_(
                        TrialEntQuestionResult.test_result_id == test_result_id,
                        TrialEntQuestionResult.subject_code == subject_code
                    )
                )
                .order_by(TrialEntQuestionResult.id)
            )
            return result.scalars().all()

    @staticmethod
    async def get_by_test_result_and_microtopic(
        test_result_id: int, 
        microtopic_number: int
    ) -> List[TrialEntQuestionResult]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∏–∫—Ä–æ—Ç–µ–º—ã –≤ —Ç–µ—Å—Ç–µ"""
        async with get_db_session() as session:
            result = await session.execute(
                select(TrialEntQuestionResult)
                .options(
                    selectinload(TrialEntQuestionResult.question),
                    selectinload(TrialEntQuestionResult.selected_answer)
                )
                .where(
                    and_(
                        TrialEntQuestionResult.test_result_id == test_result_id,
                        TrialEntQuestionResult.microtopic_number == microtopic_number
                    )
                )
                .order_by(TrialEntQuestionResult.id)
            )
            return result.scalars().all()

    @staticmethod
    async def get_statistics_by_subject(test_result_id: int) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
        async with get_db_session() as session:
            result = await session.execute(
                select(
                    TrialEntQuestionResult.subject_code,
                    func.count(TrialEntQuestionResult.id).label('total'),
                    func.sum(func.cast(TrialEntQuestionResult.is_correct, Integer)).label('correct')
                )
                .where(TrialEntQuestionResult.test_result_id == test_result_id)
                .group_by(TrialEntQuestionResult.subject_code)
            )
            
            statistics = {}
            for row in result:
                subject_code = row.subject_code
                total = row.total
                correct = row.correct or 0
                percentage = round((correct / total) * 100) if total > 0 else 0
                
                statistics[subject_code] = {
                    'total': total,
                    'correct': correct,
                    'percentage': percentage
                }
            
            return statistics

    @staticmethod
    async def get_statistics_by_microtopic(test_result_id: int) -> Dict[int, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
        async with get_db_session() as session:
            result = await session.execute(
                select(
                    TrialEntQuestionResult.microtopic_number,
                    func.count(TrialEntQuestionResult.id).label('total'),
                    func.sum(func.cast(TrialEntQuestionResult.is_correct, Integer)).label('correct')
                )
                .where(TrialEntQuestionResult.test_result_id == test_result_id)
                .group_by(TrialEntQuestionResult.microtopic_number)
            )
            
            statistics = {}
            for row in result:
                microtopic_number = row.microtopic_number
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NULL microtopic_number
                if microtopic_number is None:
                    continue

                total = row.total
                correct = row.correct or 0
                percentage = round((correct / total) * 100) if total > 0 else 0

                statistics[microtopic_number] = {
                    'total': total,
                    'correct': correct,
                    'percentage': percentage
                }

            return statistics

    @staticmethod
    async def delete_by_test_result(test_result_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
        async with get_db_session() as session:
            result = await session.execute(
                select(TrialEntQuestionResult)
                .where(TrialEntQuestionResult.test_result_id == test_result_id)
            )
            question_results = result.scalars().all()
            
            if question_results:
                for qr in question_results:
                    await session.delete(qr)
                await session.commit()
                return True
            return False

    @staticmethod
    async def delete_by_id(question_result_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢ –ø–æ ID"""
        async with get_db_session() as session:
            result = await session.execute(
                select(TrialEntQuestionResult)
                .where(TrialEntQuestionResult.id == question_result_id)
            )
            question_result = result.scalar_one_or_none()
            
            if question_result:
                await session.delete(question_result)
                await session.commit()
                return True
            return False

    @staticmethod
    async def get_all() -> List[TrialEntQuestionResult]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
        async with get_db_session() as session:
            result = await session.execute(
                select(TrialEntQuestionResult)
                .options(
                    selectinload(TrialEntQuestionResult.test_result),
                    selectinload(TrialEntQuestionResult.question),
                    selectinload(TrialEntQuestionResult.selected_answer)
                )
                .order_by(TrialEntQuestionResult.created_at)
            )
            return result.scalars().all()
