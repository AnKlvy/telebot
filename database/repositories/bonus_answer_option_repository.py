"""
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
"""
from typing import List, Optional
from sqlalchemy import select, delete, func
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from ..models import BonusQuestion, BonusAnswerOption
from ..database import get_db_session


class BonusAnswerOptionRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    @staticmethod
    async def get_all() -> List[BonusAnswerOption]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"""
        async with get_db_session() as session:
            result = await session.execute(
                select(BonusAnswerOption)
                .options(selectinload(BonusAnswerOption.bonus_question))
                .order_by(BonusAnswerOption.bonus_question_id, BonusAnswerOption.order_number)
            )
            return list(result.scalars().all())

    @staticmethod
    async def get_by_id(answer_option_id: int) -> Optional[BonusAnswerOption]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ ID"""
        async with get_db_session() as session:
            result = await session.execute(
                select(BonusAnswerOption)
                .options(selectinload(BonusAnswerOption.bonus_question))
                .where(BonusAnswerOption.id == answer_option_id)
            )
            return result.scalar_one_or_none()

    @staticmethod
    async def get_by_bonus_question(bonus_question_id: int) -> List[BonusAnswerOption]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –≤–æ–ø—Ä–æ—Å—É"""
        import logging
        async with get_db_session() as session:
            result = await session.execute(
                select(BonusAnswerOption)
                .where(BonusAnswerOption.bonus_question_id == bonus_question_id)
                .order_by(BonusAnswerOption.order_number)
            )
            options = list(result.scalars().all())
            logging.info(f"üìã BONUS_REPO: –ü–æ–ª—É—á–µ–Ω–æ {len(options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ {bonus_question_id}")
            if options:
                for i, opt in enumerate(options):
                    logging.info(f"   {i+1}. {opt.text} ({'‚úÖ' if opt.is_correct else '‚ùå'})")
            return options

    @staticmethod
    async def get_next_order_number(bonus_question_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
        async with get_db_session() as session:
            result = await session.execute(
                select(func.max(BonusAnswerOption.order_number))
                .where(BonusAnswerOption.bonus_question_id == bonus_question_id)
            )
            max_order = result.scalar()
            return (max_order or 0) + 1

    @staticmethod
    async def create(bonus_question_id: int, text: str, is_correct: bool = False) -> BonusAnswerOption:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"""
        async with get_db_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            question_exists = await session.execute(
                select(BonusQuestion).where(BonusQuestion.id == bonus_question_id)
            )
            if not question_exists.scalar_one_or_none():
                raise ValueError(f"–ë–æ–Ω—É—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å ID {bonus_question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
            order_number = await BonusAnswerOptionRepository.get_next_order_number(bonus_question_id)

            answer_option = BonusAnswerOption(
                bonus_question_id=bonus_question_id,
                text=text,
                is_correct=is_correct,
                order_number=order_number
            )
            session.add(answer_option)
            await session.commit()
            await session.refresh(answer_option)
            return answer_option

    @staticmethod
    async def create_multiple(bonus_question_id: int, options: List[dict]) -> List[BonusAnswerOption]:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        options: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ 'text' –∏ 'is_correct'
        """
        async with get_db_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            question_exists = await session.execute(
                select(BonusQuestion).where(BonusQuestion.id == bonus_question_id)
            )
            if not question_exists.scalar_one_or_none():
                raise ValueError(f"–ë–æ–Ω—É—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å ID {bonus_question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
            start_order = await BonusAnswerOptionRepository.get_next_order_number(bonus_question_id)

            answer_options = []
            for i, option in enumerate(options):
                answer_option = BonusAnswerOption(
                    bonus_question_id=bonus_question_id,
                    text=option['text'],
                    is_correct=option.get('is_correct', False),
                    order_number=start_order + i
                )
                session.add(answer_option)
                answer_options.append(answer_option)

            await session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
            for answer_option in answer_options:
                await session.refresh(answer_option)

            return answer_options

    @staticmethod
    async def update(answer_option_id: int, text: str = None, is_correct: bool = None) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"""
        async with get_db_session() as session:
            answer_option = await session.get(BonusAnswerOption, answer_option_id)
            if not answer_option:
                return False

            if text is not None:
                answer_option.text = text
            if is_correct is not None:
                answer_option.is_correct = is_correct

            await session.commit()
            return True

    @staticmethod
    async def delete(answer_option_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"""
        async with get_db_session() as session:
            result = await session.execute(delete(BonusAnswerOption).where(BonusAnswerOption.id == answer_option_id))
            await session.commit()
            return result.rowcount > 0

    @staticmethod
    async def delete_by_bonus_question(bonus_question_id: int) -> int:
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–∞"""
        async with get_db_session() as session:
            result = await session.execute(delete(BonusAnswerOption).where(BonusAnswerOption.bonus_question_id == bonus_question_id))
            await session.commit()
            return result.rowcount

    @staticmethod
    async def get_correct_answer(bonus_question_id: int) -> Optional[BonusAnswerOption]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
        async with get_db_session() as session:
            result = await session.execute(
                select(BonusAnswerOption)
                .where(
                    BonusAnswerOption.bonus_question_id == bonus_question_id,
                    BonusAnswerOption.is_correct == True
                )
            )
            return result.scalar_one_or_none()

    @staticmethod
    async def get_count_by_bonus_question(bonus_question_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
        async with get_db_session() as session:
            result = await session.execute(
                select(func.count(BonusAnswerOption.id))
                .where(BonusAnswerOption.bonus_question_id == bonus_question_id)
            )
            return result.scalar() or 0
