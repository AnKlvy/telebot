#!/usr/bin/env python3
"""
–ù–∞—Å—Ç–æ—è—â–∏–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –±–µ–∑ –ø–∞—É–∑
"""
import asyncio
import aiohttp
import time
import argparse
import statistics
from typing import List, Dict, Any
from dataclasses import dataclass

@dataclass
class RequestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    success: bool
    response_time: float
    status_code: int
    error: str = None

async def send_single_request(session: aiohttp.ClientSession, url: str, user_id: int) -> RequestResult:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    fake_update = {
        "update_id": int(time.time() * 1000) + user_id,
        "message": {
            "message_id": int(time.time()),
            "from": {"id": user_id, "first_name": f"TestUser{user_id}"},
            "chat": {"id": user_id, "type": "private"},
            "date": int(time.time()),
            "text": "/start"
        }
    }

    start_time = time.time()
    try:
        async with session.post(url, json=fake_update, timeout=aiohttp.ClientTimeout(total=10)) as resp:
            response_time = time.time() - start_time
            return RequestResult(
                success=resp.status == 200,
                response_time=response_time,
                status_code=resp.status
            )
    except Exception as e:
        response_time = time.time() - start_time
        return RequestResult(
            success=False,
            response_time=response_time,
            status_code=0,
            error=str(e)
        )

async def test_webhook_parallel(url: str, concurrent_requests: int = 10):
    """–ù–∞—Å—Ç–æ—è—â–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç"""
    print(f"üöÄ –ù–ê–ì–†–£–ó–û–ß–ù–´–ô –¢–ï–°–¢: {url}")
    print(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {concurrent_requests}")
    print(f"üéØ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û")

    connector = aiohttp.TCPConnector(limit=concurrent_requests + 10)
    timeout = aiohttp.ClientTimeout(total=30)

    async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å—Ä–∞–∑—É
        tasks = []
        for i in range(concurrent_requests):
            task = asyncio.create_task(send_single_request(session, url, 1000000 + i))
            tasks.append(task)

        print(f"‚è±Ô∏è  –ó–∞–ø—É—Å–∫ {concurrent_requests} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        start_time = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)

        total_time = time.time() - start_time

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        valid_results = [r for r in results if isinstance(r, RequestResult)]
        successful = [r for r in valid_results if r.success]
        failed = [r for r in valid_results if not r.success]

        print_results(valid_results, successful, failed, total_time, concurrent_requests)

def print_results(all_results: List[RequestResult], successful: List[RequestResult],
                 failed: List[RequestResult], total_time: float, concurrent_requests: int):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ê")
    print("="*60)

    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(all_results)}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)} ({len(successful)/len(all_results)*100:.1f}%)")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed)} ({len(failed)/len(all_results)*100:.1f}%)")
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f} —Å–µ–∫")
    print(f"   RPS (–∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫): {len(all_results)/total_time:.2f}")

    if successful:
        response_times = [r.response_time for r in successful]
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (—É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã):")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ: {statistics.mean(response_times):.3f} —Å–µ–∫")
        print(f"   –ú–µ–¥–∏–∞–Ω–∞: {statistics.median(response_times):.3f} —Å–µ–∫")
        print(f"   –ú–∏–Ω–∏–º—É–º: {min(response_times):.3f} —Å–µ–∫")
        print(f"   –ú–∞–∫—Å–∏–º—É–º: {max(response_times):.3f} —Å–µ–∫")
        if len(response_times) > 1:
            p95 = sorted(response_times)[int(len(response_times) * 0.95)]
            print(f"   95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {p95:.3f} —Å–µ–∫")

    if failed:
        print(f"\n‚ùå –û—à–∏–±–∫–∏:")
        error_counts = {}
        for r in failed:
            error_key = f"HTTP {r.status_code}" if r.status_code > 0 else r.error
            error_counts[error_key] = error_counts.get(error_key, 0) + 1

        for error, count in error_counts.items():
            print(f"   {error}: {count}")

    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    rps = len(all_results) / total_time
    success_rate = len(successful) / len(all_results) * 100

    print(f"\nüéØ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    if success_rate >= 95 and rps >= 50:
        print("   ‚úÖ –û–¢–õ–ò–ß–ù–û - –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    elif success_rate >= 90 and rps >= 20:
        print("   ‚ö†Ô∏è  –•–û–†–û–®–û - –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    elif success_rate >= 80:
        print("   ‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û - –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("   ‚ùå –ü–õ–û–•–û - –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

async def main():
    parser = argparse.ArgumentParser(description='–ë—ã—Å—Ç—Ä—ã–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç webhook')
    parser.add_argument('--url', required=True, help='URL webhook endpoint')
    parser.add_argument('--requests', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤')

    args = parser.parse_args()
    await test_webhook_parallel(args.url, args.requests)

if __name__ == "__main__":
    asyncio.run(main())
