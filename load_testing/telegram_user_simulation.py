#!/usr/bin/env python3
"""
–ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram Bot API
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É

–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –±–æ—Ç–æ–º –∏ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö.
"""
import asyncio
import aiohttp
import time
import json
import argparse
import random
from datetime import datetime
from typing import List, Dict, Any
from dataclasses import dataclass
import os

@dataclass
class UserAction:
    """–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    action_type: str
    message: str
    response_time: float
    success: bool
    error: str = None

class TelegramUserSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.api_url = f"https://api.telegram.org/bot{bot_token}"
        self.actions: List[UserAction] = []
        
        # –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_scenarios = {
            "student": [
                "/start",
                "üìö –ú–æ–∏ –∫—É—Ä—Å—ã", 
                "üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
                "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "üîç –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
            ],
            "teacher": [
                "/start",
                "üë• –ú–æ–∏ –≥—Ä—É–ø–ø—ã",
                "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", 
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã",
                "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—ã"
            ],
            "admin": [
                "/start",
                "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏",
                "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
            ]
        }
    
    async def send_message(self, session: aiohttp.ClientSession, chat_id: int, text: str) -> UserAction:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        start_time = time.time()
        
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text
            }
            
            async with session.post(url, json=data) as response:
                response_time = time.time() - start_time
                result = await response.json()
                
                return UserAction(
                    user_id=chat_id,
                    action_type="send_message",
                    message=text,
                    response_time=response_time,
                    success=result.get("ok", False),
                    error=result.get("description") if not result.get("ok") else None
                )
                
        except Exception as e:
            response_time = time.time() - start_time
            return UserAction(
                user_id=chat_id,
                action_type="send_message", 
                message=text,
                response_time=response_time,
                success=False,
                error=str(e)
            )
    
    async def get_updates(self, session: aiohttp.ClientSession, offset: int = 0) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞"""
        try:
            url = f"{self.api_url}/getUpdates"
            params = {"offset": offset, "timeout": 1}
            
            async with session.get(url, params=params) as response:
                return await response.json()
                
        except Exception as e:
            return {"ok": False, "description": str(e)}
    
    async def simulate_user(self, session: aiohttp.ClientSession, user_id: int,
                          user_type: str, actions_count: int, test_mode: str = "realistic"):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        scenario = self.user_scenarios.get(user_type, self.user_scenarios["student"])

        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_type}) –Ω–∞—á–∞–ª —Å–∏–º—É–ª—è—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ {test_mode}")

        if test_mode == "burst":
            # BURST MODE: –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ –ø–∞—É–∑
            tasks = []
            for i in range(actions_count):
                message = random.choice(scenario)
                task = asyncio.create_task(self.send_message(session, user_id, message))
                tasks.append(task)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)

            for i, result in enumerate(results):
                if isinstance(result, UserAction):
                    self.actions.append(result)
                    if result.success:
                        print(f"‚ö° User {user_id}: {result.message} ({result.response_time:.3f}s)")
                    else:
                        print(f"‚ùå User {user_id}: {result.message} - {result.error}")

        else:
            # SEQUENTIAL MODE: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –ø–∞—É–∑–∞–º–∏
            for i in range(actions_count):
                message = random.choice(scenario)
                action = await self.send_message(session, user_id, message)
                self.actions.append(action)

                if action.success:
                    print(f"‚úÖ User {user_id}: {message} ({action.response_time:.3f}s)")
                else:
                    print(f"‚ùå User {user_id}: {message} - {action.error}")

                # –ü–∞—É–∑–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞
                if test_mode == "realistic" and i < actions_count - 1:
                    await asyncio.sleep(random.uniform(1, 5))
                elif test_mode == "sustained" and i < actions_count - 1:
                    await asyncio.sleep(0.5)  # –ë—ã—Å—Ç—Ä–µ–µ —á–µ–º realistic
    
    async def run_simulation(self, users_count: int, actions_per_user: int,
                           user_distribution: Dict[str, float] = None, test_mode: str = "realistic"):
        """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if user_distribution is None:
            user_distribution = {"student": 0.7, "teacher": 0.2, "admin": 0.1}

        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"üéØ –î–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {actions_per_user}")
        print(f"üéØ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_mode}")
        print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π: {user_distribution}")

        if test_mode == "burst":
            print("‚ö° BURST MODE: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
        elif test_mode == "sustained":
            print("üîÑ SUSTAINED MODE: –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–∞—É–∑–∞–º–∏")
        else:
            print("üë§ REALISTIC MODE: –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—É–∑–∞–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏
        users = []
        base_user_id = 2000000  # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–æ–ª—å—à–æ–≥–æ ID —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏
        
        for i in range(users_count):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            rand = random.random()
            cumulative = 0
            user_type = "student"
            
            for role, probability in user_distribution.items():
                cumulative += probability
                if rand <= cumulative:
                    user_type = role
                    break
            
            users.append((base_user_id + i, user_type))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        connector = aiohttp.TCPConnector(limit=users_count * 2)
        timeout = aiohttp.ClientTimeout(total=60)
        
        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
            bot_info = await self.get_bot_info(session)
            if not bot_info.get("ok"):
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {bot_info.get('description')}")
                return
            
            print(f"ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É: {bot_info['result']['first_name']}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks = []
            for user_id, user_type in users:
                task = asyncio.create_task(
                    self.simulate_user(session, user_id, user_type, actions_per_user, test_mode)
                )
                tasks.append(task)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            start_time = time.time()
            await asyncio.gather(*tasks, return_exceptions=True)
            total_time = time.time() - start_time
            
        self.generate_report(total_time)
    
    async def get_bot_info(self, session: aiohttp.ClientSession) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        try:
            url = f"{self.api_url}/getMe"
            async with session.get(url) as response:
                return await response.json()
        except Exception as e:
            return {"ok": False, "description": str(e)}
    
    def generate_report(self, total_time: float):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        if not self.actions:
            print("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        successful_actions = [a for a in self.actions if a.success]
        failed_actions = [a for a in self.actions if not a.success]
        
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –°–ò–ú–£–õ–Ø–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("="*60)
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(self.actions)}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful_actions)} ({len(successful_actions)/len(self.actions)*100:.1f}%)")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_actions)} ({len(failed_actions)/len(self.actions)*100:.1f}%)")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        print(f"   –î–µ–π—Å—Ç–≤–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {len(self.actions)/total_time:.2f}")
        
        if successful_actions:
            response_times = [a.response_time for a in successful_actions]
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {sum(response_times)/len(response_times):.3f} —Å–µ–∫")
            print(f"   –ú–∏–Ω–∏–º—É–º: {min(response_times):.3f} —Å–µ–∫")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max(response_times):.3f} —Å–µ–∫")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
        message_stats = {}
        for action in successful_actions:
            msg = action.message
            if msg not in message_stats:
                message_stats[msg] = {"count": 0, "avg_time": 0}
            message_stats[msg]["count"] += 1
            message_stats[msg]["avg_time"] += action.response_time
        
        print(f"\nüìù –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        for msg, stats in sorted(message_stats.items(), key=lambda x: x[1]["count"], reverse=True)[:5]:
            avg_time = stats["avg_time"] / stats["count"]
            print(f"   {msg}: {stats['count']} —Ä–∞–∑ (—Å—Ä. –≤—Ä–µ–º—è: {avg_time:.3f}—Å)")
        
        if failed_actions:
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            error_counts = {}
            for action in failed_actions:
                error = action.error or "Unknown error"
                error_counts[error] = error_counts.get(error, 0) + 1
            
            for error, count in error_counts.items():
                print(f"   {error}: {count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.save_detailed_report()
    
    def save_detailed_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        os.makedirs("load_testing/reports", exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"load_testing/reports/telegram_simulation_{timestamp}.json"
        
        report_data = {
            "test_config": {
                "bot_token": self.bot_token[:10] + "...",  # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
                "timestamp": timestamp
            },
            "actions": [
                {
                    "user_id": a.user_id,
                    "action_type": a.action_type,
                    "message": a.message,
                    "response_time": a.response_time,
                    "success": a.success,
                    "error": a.error
                }
                for a in self.actions
            ]
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

async def main():
    parser = argparse.ArgumentParser(description='–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram')
    parser.add_argument('--bot-token', required=True, help='–¢–æ–∫–µ–Ω –±–æ—Ç–∞')
    parser.add_argument('--users', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    parser.add_argument('--actions', type=int, default=5, help='–î–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('--mode', choices=['burst', 'sustained', 'realistic'], default='realistic',
                       help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: burst (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞), sustained (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è), realistic (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è)')
    parser.add_argument('--students', type=float, default=0.7, help='–î–æ–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (0.0-1.0)')
    parser.add_argument('--teachers', type=float, default=0.2, help='–î–æ–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (0.0-1.0)')
    parser.add_argument('--admins', type=float, default=0.1, help='–î–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (0.0-1.0)')

    args = parser.parse_args()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    total = args.students + args.teachers + args.admins
    distribution = {
        "student": args.students / total,
        "teacher": args.teachers / total,
        "admin": args.admins / total
    }

    simulator = TelegramUserSimulator(args.bot_token)
    await simulator.run_simulation(args.users, args.actions, distribution, args.mode)

if __name__ == "__main__":
    asyncio.run(main())
