#!/usr/bin/env python3
"""
–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint –±–æ—Ç–∞
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HTTP –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram API
"""
import asyncio
import aiohttp
import time
import json
import argparse
import statistics
from datetime import datetime
from typing import List, Dict, Any
from dataclasses import dataclass
import os

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    success: bool
    response_time: float
    status_code: int
    error: str = None

class WebhookLoadTester:
    """–¢–µ—Å—Ç–µ—Ä –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è webhook endpoint"""
    
    def __init__(self, webhook_url: str, concurrent_users: int = 10):
        self.webhook_url = webhook_url
        self.concurrent_users = concurrent_users
        self.results: List[TestResult] = []
        
    def create_fake_telegram_update(self, user_id: int, message_text: str = "/start") -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
        return {
            "update_id": int(time.time() * 1000) + user_id,
            "message": {
                "message_id": int(time.time()),
                "from": {
                    "id": user_id,
                    "is_bot": False,
                    "first_name": f"TestUser{user_id}",
                    "username": f"testuser{user_id}",
                    "language_code": "ru"
                },
                "chat": {
                    "id": user_id,
                    "first_name": f"TestUser{user_id}",
                    "username": f"testuser{user_id}",
                    "type": "private"
                },
                "date": int(time.time()),
                "text": message_text
            }
        }
    
    async def send_request(self, session: aiohttp.ClientSession, user_id: int, message: str = "/start") -> TestResult:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ webhook"""
        start_time = time.time()
        
        try:
            fake_update = self.create_fake_telegram_update(user_id, message)
            
            async with session.post(
                self.webhook_url,
                json=fake_update,
                headers={'Content-Type': 'application/json'},
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                response_time = time.time() - start_time
                
                return TestResult(
                    success=response.status == 200,
                    response_time=response_time,
                    status_code=response.status
                )
                
        except Exception as e:
            response_time = time.time() - start_time
            return TestResult(
                success=False,
                response_time=response_time,
                status_code=0,
                error=str(e)
            )
    
    async def user_simulation(self, session: aiohttp.ClientSession, user_id: int, requests_per_user: int, delay_between_requests: float = 0.0):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        messages = ["/start", "üìö –ú–æ–∏ –∫—É—Ä—Å—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/help"]

        for i in range(requests_per_user):
            message = messages[i % len(messages)]
            result = await self.send_request(session, user_id, message)
            self.results.append(result)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if delay_between_requests > 0 and i < requests_per_user - 1:
                await asyncio.sleep(delay_between_requests)
    
    async def run_load_test(self, duration_seconds: int = 60, requests_per_user: int = 10,
                           test_mode: str = "burst", delay_between_requests: float = 0.0):
        """–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞

        Args:
            duration_seconds: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
            requests_per_user: –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_mode: –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ('burst', 'sustained', 'realistic')
            delay_between_requests: –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ webhook: {self.webhook_url}")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.concurrent_users}")
        print(f"‚è±Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_seconds} —Å–µ–∫—É–Ω–¥")
        print(f"üì® –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requests_per_user}")
        print(f"üéØ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_mode}")

        if test_mode == "burst":
            delay_between_requests = 0.0
            print("‚ö° BURST MODE: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –ø–∞—É–∑")
        elif test_mode == "sustained":
            delay_between_requests = 0.1
            print("üîÑ SUSTAINED MODE: –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–∞—É–∑–∞–º–∏")
        elif test_mode == "realistic":
            delay_between_requests = 1.0
            print("üë§ REALISTIC MODE: –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        connector = aiohttp.TCPConnector(limit=self.concurrent_users * 2)
        timeout = aiohttp.ClientTimeout(total=30)

        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks = []
            for user_id in range(1, self.concurrent_users + 1):
                task = asyncio.create_task(
                    self.user_simulation(session, user_id + 1000000, requests_per_user, delay_between_requests)
                )
                tasks.append(task)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            start_time = time.time()
            try:
                await asyncio.wait_for(asyncio.gather(*tasks), timeout=duration_seconds)
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É ({duration_seconds} —Å–µ–∫)")

            total_time = time.time() - start_time

        self.generate_report(total_time)
    
    def generate_report(self, total_time: float):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        if not self.results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        successful_requests = [r for r in self.results if r.success]
        failed_requests = [r for r in self.results if not r.success]
        
        response_times = [r.response_time for r in successful_requests]
        
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –ù–ê–ì–†–£–ó–û–ß–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("="*60)
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(self.results)}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful_requests)} ({len(successful_requests)/len(self.results)*100:.1f}%)")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_requests)} ({len(failed_requests)/len(self.results)*100:.1f}%)")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        print(f"   RPS: {len(self.results)/total_time:.2f}")
        
        if response_times:
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (—É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã):")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {statistics.mean(response_times):.3f} —Å–µ–∫")
            print(f"   –ú–µ–¥–∏–∞–Ω–∞: {statistics.median(response_times):.3f} —Å–µ–∫")
            print(f"   –ú–∏–Ω–∏–º—É–º: {min(response_times):.3f} —Å–µ–∫")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max(response_times):.3f} —Å–µ–∫")
            if len(response_times) > 1:
                print(f"   95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {sorted(response_times)[int(len(response_times)*0.95)]:.3f} —Å–µ–∫")
        
        if failed_requests:
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            error_counts = {}
            for req in failed_requests:
                error_key = f"HTTP {req.status_code}" if req.status_code > 0 else req.error
                error_counts[error_key] = error_counts.get(error_key, 0) + 1
            
            for error, count in error_counts.items():
                print(f"   {error}: {count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.save_detailed_report()
    
    def save_detailed_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        os.makedirs("load_testing/reports", exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"load_testing/reports/webhook_test_{timestamp}.json"
        
        report_data = {
            "test_config": {
                "webhook_url": self.webhook_url,
                "concurrent_users": self.concurrent_users,
                "timestamp": timestamp
            },
            "results": [
                {
                    "success": r.success,
                    "response_time": r.response_time,
                    "status_code": r.status_code,
                    "error": r.error
                }
                for r in self.results
            ]
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

async def main():
    parser = argparse.ArgumentParser(description='–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook')
    parser.add_argument('--url', required=True, help='URL webhook endpoint')
    parser.add_argument('--users', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    parser.add_argument('--duration', type=int, default=60, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--requests', type=int, default=10, help='–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('--mode', choices=['burst', 'sustained', 'realistic'], default='burst',
                       help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: burst (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞), sustained (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è), realistic (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è)')
    parser.add_argument('--delay', type=float, default=0.0, help='–ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–µ–∫)')

    args = parser.parse_args()

    tester = WebhookLoadTester(args.url, args.users)
    await tester.run_load_test(args.duration, args.requests, args.mode, args.delay)

if __name__ == "__main__":
    asyncio.run(main())
