#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Redis –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""
import asyncio
import aiohttp
import time
import json
import argparse
import statistics
from datetime import datetime
from typing import List, Dict, Any
from dataclasses import dataclass
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ç–µ—Å—Ç–µ—Ä—ã
from webhook_load_test import WebhookLoadTester
from database_stress_test import DatabaseStressTester
from redis_performance_test import RedisPerformanceTester

@dataclass
class ComponentResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    component: str
    success_rate: float
    avg_response_time: float
    total_operations: int
    errors: int
    duration: float

class FullSystemLoadTester:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, webhook_url: str):
        self.webhook_url = webhook_url
        self.component_results: List[ComponentResult] = []
        
    async def test_webhook_component(self, users: int, requests_per_user: int) -> ComponentResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Webhook –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...")
        
        tester = WebhookLoadTester(self.webhook_url, users)
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ burst —Ä–µ–∂–∏–º–µ (–±–µ–∑ –ø–∞—É–∑)
        await tester.run_load_test(duration_seconds=300, requests_per_user=requests_per_user, 
                                 test_mode="burst", delay_between_requests=0.0)
        
        duration = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = [r for r in tester.results if r.success]
        failed = [r for r in tester.results if not r.success]
        
        success_rate = len(successful) / len(tester.results) * 100 if tester.results else 0
        avg_response_time = statistics.mean([r.response_time for r in successful]) if successful else 0
        
        return ComponentResult(
            component="Webhook",
            success_rate=success_rate,
            avg_response_time=avg_response_time,
            total_operations=len(tester.results),
            errors=len(failed),
            duration=duration
        )
    
    async def test_database_component(self, workers: int, operations_per_worker: int) -> ComponentResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Database –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...")
        
        tester = DatabaseStressTester()
        start_time = time.time()
        
        try:
            await tester.run_stress_test(workers, operations_per_worker)
            duration = time.time() - start_time
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = [op for op in tester.operations if op.success]
            failed = [op for op in tester.operations if not op.success]
            
            success_rate = len(successful) / len(tester.operations) * 100 if tester.operations else 0
            avg_response_time = statistics.mean([op.execution_time for op in successful]) if successful else 0
            
            return ComponentResult(
                component="Database",
                success_rate=success_rate,
                avg_response_time=avg_response_time,
                total_operations=len(tester.operations),
                errors=len(failed),
                duration=duration
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
            return ComponentResult(
                component="Database",
                success_rate=0,
                avg_response_time=0,
                total_operations=0,
                errors=1,
                duration=time.time() - start_time
            )
    
    async def test_redis_component(self, workers: int, operations_per_worker: int) -> ComponentResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis"""
        print("üî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...")
        
        tester = RedisPerformanceTester()
        start_time = time.time()
        
        try:
            await tester.run_performance_test(workers, operations_per_worker)
            duration = time.time() - start_time
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = [op for op in tester.operations if op.success]
            failed = [op for op in tester.operations if not op.success]
            
            success_rate = len(successful) / len(tester.operations) * 100 if tester.operations else 0
            avg_response_time = statistics.mean([op.execution_time for op in successful]) if successful else 0
            
            return ComponentResult(
                component="Redis",
                success_rate=success_rate,
                avg_response_time=avg_response_time,
                total_operations=len(tester.operations),
                errors=len(failed),
                duration=duration
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis: {e}")
            return ComponentResult(
                component="Redis",
                success_rate=0,
                avg_response_time=0,
                total_operations=0,
                errors=1,
                duration=time.time() - start_time
            )
    
    async def run_full_test(self, scenario: str = "basic"):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print(f"üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        print(f"üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.upper()}")
        print("="*60)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenarios = {
            "basic": {
                "webhook_users": 10,
                "webhook_requests": 5,
                "db_workers": 5,
                "db_operations": 50,
                "redis_workers": 5,
                "redis_operations": 50
            },
            "medium": {
                "webhook_users": 25,
                "webhook_requests": 10,
                "db_workers": 10,
                "db_operations": 100,
                "redis_workers": 10,
                "redis_operations": 100
            },
            "heavy": {
                "webhook_users": 50,
                "webhook_requests": 20,
                "db_workers": 20,
                "db_operations": 200,
                "redis_workers": 20,
                "redis_operations": 200
            }
        }
        
        params = scenarios.get(scenario, scenarios["basic"])
        
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            self.test_webhook_component(params["webhook_users"], params["webhook_requests"]),
            self.test_database_component(params["db_workers"], params["db_operations"]),
            self.test_redis_component(params["redis_workers"], params["redis_operations"])
        ]
        
        print("‚ö° –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        total_time = time.time() - start_time
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, ComponentResult):
                self.component_results.append(result)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {result}")
        
        self.generate_full_report(total_time, scenario)
    
    def generate_full_report(self, total_time: float, scenario: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –û –ù–ê–ì–†–£–ó–û–ß–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("="*80)
        
        print(f"üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.upper()}")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f} —Å–µ–∫")
        print(f"üìà –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(self.component_results)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:")
        print("-" * 80)
        print(f"{'–ö–æ–º–ø–æ–Ω–µ–Ω—Ç':<12} {'–£—Å–ø–µ—Ö %':<10} {'–°—Ä.–≤—Ä–µ–º—è':<12} {'–û–ø–µ—Ä–∞—Ü–∏–π':<12} {'–û—à–∏–±–æ–∫':<10}")
        print("-" * 80)
        
        total_operations = 0
        total_errors = 0
        overall_success_rates = []
        
        for result in self.component_results:
            print(f"{result.component:<12} {result.success_rate:<10.1f} "
                  f"{result.avg_response_time:<12.4f} {result.total_operations:<12} {result.errors:<10}")
            
            total_operations += result.total_operations
            total_errors += result.errors
            overall_success_rates.append(result.success_rate)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        overall_success_rate = statistics.mean(overall_success_rates) if overall_success_rates else 0
        
        print(f"\nüéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {overall_success_rate:.1f}%")
        print(f"   –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations}")
        print(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if overall_success_rate >= 95:
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        elif overall_success_rate >= 90:
            print("   ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
        elif overall_success_rate >= 80:
            print("   ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        else:
            print("   ‚ùå –°–∏—Å—Ç–µ–º–∞ –∏–º–µ–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        self.save_full_report(scenario)
    
    def save_full_report(self, scenario: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        os.makedirs("load_testing/reports", exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"load_testing/reports/full_test_{scenario}_{timestamp}.json"
        
        report_data = {
            "test_config": {
                "webhook_url": self.webhook_url,
                "scenario": scenario,
                "timestamp": timestamp
            },
            "component_results": [
                {
                    "component": r.component,
                    "success_rate": r.success_rate,
                    "avg_response_time": r.avg_response_time,
                    "total_operations": r.total_operations,
                    "errors": r.errors,
                    "duration": r.duration
                }
                for r in self.component_results
            ]
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

async def main():
    parser = argparse.ArgumentParser(description='–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--url', required=True, help='URL webhook endpoint')
    parser.add_argument('--scenario', choices=['basic', 'medium', 'heavy'], default='basic',
                       help='–°—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    args = parser.parse_args()
    
    tester = FullSystemLoadTester(args.url)
    await tester.run_full_test(args.scenario)

if __name__ == "__main__":
    asyncio.run(main())
