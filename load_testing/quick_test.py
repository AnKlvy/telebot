#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import asyncio
import aiohttp
import time
import json
import argparse
from datetime import datetime

async def test_webhook(url: str, users: int = 10, requests: int = 5):
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç webhook"""
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook: {url}")
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}, –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requests}")
    
    results = []
    
    async def send_request(session, user_id):
        fake_update = {
            "update_id": int(time.time() * 1000) + user_id,
            "message": {
                "message_id": int(time.time()),
                "from": {"id": user_id, "first_name": f"TestUser{user_id}"},
                "chat": {"id": user_id, "type": "private"},
                "date": int(time.time()),
                "text": "/start"
            }
        }
        
        for i in range(requests):
            start = time.time()
            try:
                async with session.post(url, json=fake_update) as resp:
                    duration = time.time() - start
                    results.append({
                        "success": resp.status == 200,
                        "time": duration,
                        "status": resp.status
                    })
                    print(f"‚úÖ User {user_id}: {resp.status} ({duration:.3f}s)")
            except Exception as e:
                duration = time.time() - start
                results.append({
                    "success": False,
                    "time": duration,
                    "error": str(e)
                })
                print(f"‚ùå User {user_id}: {e}")
            
            await asyncio.sleep(0.5)
    
    async with aiohttp.ClientSession() as session:
        tasks = [send_request(session, i+1000000) for i in range(users)]
        start_time = time.time()
        await asyncio.gather(*tasks)
        total_time = time.time() - start_time
    
    # –û—Ç—á–µ—Ç
    successful = len([r for r in results if r.success])
    total = len(results)
    avg_time = sum(r["time"] for r in results) / total if total > 0 else 0
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful} ({successful/total*100:.1f}%)")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f} —Å–µ–∫")
    print(f"   RPS: {total/total_time:.2f}")
    
    return results

async def main():
    parser = argparse.ArgumentParser(description='–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–æ—Ç–∞')
    parser.add_argument('--url', required=True, help='URL webhook')
    parser.add_argument('--users', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    parser.add_argument('--requests', type=int, default=5, help='–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    args = parser.parse_args()
    await test_webhook(args.url, args.users, args.requests)

if __name__ == "__main__":
    asyncio.run(main())
