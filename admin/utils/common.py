from typing import Dict, List, Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from common.keyboards import back_to_main_button
from database import CourseRepository, SubjectRepository, GroupRepository, UserRepository, StudentRepository, CuratorRepository, TeacherRepository



# groups_db —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ GroupRepository

students_db = {}
curators_db = {}
teachers_db = {}
managers_db = {}

def get_entity_list_kb(items: List[Any], callback_prefix: str, id_field: str = "id", name_field: str = "name") -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π
    
    Args:
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
        id_field: –ü–æ–ª–µ –¥–ª—è ID (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã - —Å–ª–æ–≤–∞—Ä–∏)
        name_field: –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã - —Å–ª–æ–≤–∞—Ä–∏)
    """
    buttons = []
    
    if not items:
        buttons.append([
            InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", callback_data="empty_list")
        ])
    else:
        for item in items:
            if isinstance(item, dict):
                item_id = item.get(id_field)
                item_name = item.get(name_field)
                callback_data = f"{callback_prefix}_{item_id}"
            else:
                # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç - —Å—Ç—Ä–æ–∫–∞
                item_name = str(item)
                callback_data = f"{callback_prefix}_{item}"
            
            buttons.append([
                InlineKeyboardButton(
                    text=item_name,
                    callback_data=callback_data
                )
            ])
    
    buttons.append(back_to_main_button())
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_courses_list_kb(callback_prefix: str = "select_course") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—É—Ä—Å–æ–≤"""
    courses = await get_courses_list()
    courses_list = [{"id": course.id, "name": course.name} for course in courses]
    return get_entity_list_kb(courses_list, callback_prefix)

async def get_subjects_list_kb(callback_prefix: str = "select_subject", course_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫—É—Ä—Å—É)"""
    if course_id:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        subjects = await SubjectRepository.get_by_course(course_id)
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        subjects = await SubjectRepository.get_all()

    subjects_list = [{"id": subject.id, "name": subject.name} for subject in subjects]
    return get_entity_list_kb(subjects_list, callback_prefix)

async def get_groups_list_kb(callback_prefix: str = "select_group", subject_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É)"""
    if subject_id:
        groups = await GroupRepository.get_by_subject(subject_id)
    else:
        groups = await GroupRepository.get_all()

    groups_list = [{"id": group.id, "name": group.name} for group in groups]
    return get_entity_list_kb(groups_list, callback_prefix)

def get_people_list_kb(people_db: Dict, callback_prefix: str, subject: str = None, group: str = None) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ª—é–¥–µ–π (—Å—Ç—É–¥–µ–Ω—Ç—ã, –∫—É—Ä–∞—Ç–æ—Ä—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏)
    —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ –≥—Ä—É–ø–ø–µ
    """
    filtered_people = []
    
    for person_id, person_data in people_db.items():
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        if subject and person_data.get("subject") != subject:
            continue
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ
        if group and person_data.get("group") != group:
            continue
        
        filtered_people.append({
            "id": person_id,
            "name": person_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        })
    
    return get_entity_list_kb(filtered_people, callback_prefix)

def get_managers_list_kb(callback_prefix: str = "select_manager") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    managers_list = [{"id": k, "name": v.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")} for k, v in managers_db.items()]
    return get_entity_list_kb(managers_list, callback_prefix)

def get_confirmation_kb(action: str, entity_type: str, entity_id: str = "") -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{action}_{entity_type}_{entity_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{action}_{entity_type}")],
        back_to_main_button()
        ])

def get_tariff_selection_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="tariff_standard")],
        [InlineKeyboardButton(text="‚≠ê –ü—Ä–µ–º–∏—É–º", callback_data="tariff_premium")],
        back_to_main_button()
    ])



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ SQLAlchemy
async def add_course(name: str, subject_ids: List[int]) -> int:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –ø–æ ID"""
    course = await CourseRepository.create(name)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∫ –∫—É—Ä—Å—É –ø–æ ID
    for subject_id in subject_ids:
        await SubjectRepository.add_to_course(subject_id, course.id)

    return course.id

async def remove_course(course_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å (—Å–≤—è–∑–∏ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"""
    try:
        # –ü—Ä–∏ Many-to-Many —Å–≤—è–∑–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∏
        return await CourseRepository.delete(course_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return False

async def add_subject(name: str) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç"""
    try:
        await SubjectRepository.create(name)
        return True
    except Exception:
        return False

async def remove_subject(subject_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"""
    return await SubjectRepository.delete(subject_id)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def get_courses_list():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"""
    return await CourseRepository.get_all()

async def get_subjects_list():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    return await SubjectRepository.get_all()

async def get_subject_by_id(subject_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID"""
    return await SubjectRepository.get_by_id(subject_id)

async def add_group(name: str, subject_id: int) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
    try:
        await GroupRepository.create(name, subject_id)
        return True
    except ValueError:
        # –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        return False

async def remove_group(group_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"""
    return await GroupRepository.delete(group_id)

def add_person(person_db: Dict, name: str, telegram_id: int, **kwargs) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞"""
    person_id = str(telegram_id)
    person_db[person_id] = {
        "name": name,
        "telegram_id": telegram_id,
        **kwargs
    }
    return person_id

def remove_person(person_db: Dict, person_id: str) -> bool:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞"""
    if person_id in person_db:
        del person_db[person_id]
        return True
    return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
async def add_student(name: str, telegram_id: int, group_id: int, tariff: str) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserRepository.create(
            telegram_id=telegram_id,
            name=name,
            role='student'
        )

        # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        await StudentRepository.create(
            user_id=user.id,
            group_id=group_id,
            tariff=tariff
        )
        return True
    except Exception:
        # –°—Ç—É–¥–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        return False

async def remove_student(student_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_id(student_id)
    if not student:
        return False

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—É–¥–µ–Ω—Ç —É–¥–∞–ª–∏—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
    from sqlalchemy import delete
    from database.models import User
    from database import get_db_session

    async with get_db_session() as session:
        result = await session.execute(delete(User).where(User.id == student.user_id))
        await session.commit()
        return result.rowcount > 0

async def get_students_list_kb(callback_prefix: str = "select_student", course_id: int = None, group_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫—É—Ä—Å—É –∏ –≥—Ä—É–ø–ø–µ)"""
    students = await StudentRepository.get_by_course_and_group(course_id, group_id)
    students_list = [{"id": student.id, "name": student.user.name} for student in students]
    return get_entity_list_kb(students_list, callback_prefix)

async def get_groups_by_course_kb(callback_prefix: str = "select_group", course_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø –¥–ª—è –∫—É—Ä—Å–∞"""
    if course_id:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        subjects = await SubjectRepository.get_by_course(course_id)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
        all_groups = []
        for subject in subjects:
            subject_groups = await GroupRepository.get_by_subject(subject.id)
            all_groups.extend(subject_groups)

        groups_list = [{"id": group.id, "name": f"{group.name} ({group.subject.name})"} for group in all_groups]
    else:
        groups = await GroupRepository.get_all()
        groups_list = [{"id": group.id, "name": f"{group.name} ({group.subject.name})"} for group in groups]

    return get_entity_list_kb(groups_list, callback_prefix)

async def get_course_by_id(course_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –ø–æ ID"""
    return await CourseRepository.get_by_id(course_id)

async def get_group_by_id(group_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ ID"""
    return await GroupRepository.get_by_id(group_id)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏
async def add_curator(name: str, telegram_id: int, course_id: int, subject_id: int, group_id: int) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserRepository.create(
            telegram_id=telegram_id,
            name=name,
            role='curator'
        )

        # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞
        await CuratorRepository.create(
            user_id=user.id,
            course_id=course_id,
            subject_id=subject_id,
            group_id=group_id
        )
        return True
    except Exception:
        # –ö—É—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        return False

async def remove_curator(curator_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞
    curator = await CuratorRepository.get_by_id(curator_id)
    if not curator:
        return False

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—É—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
    from sqlalchemy import delete
    from database.models import User
    from database import get_db_session

    async with get_db_session() as session:
        result = await session.execute(delete(User).where(User.id == curator.user_id))
        await session.commit()
        return result.rowcount > 0

async def get_curators_list_kb(callback_prefix: str = "select_curator", subject_id: int = None, group_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ –≥—Ä—É–ø–ø–µ)"""
    curators = await CuratorRepository.get_by_subject_and_group(subject_id, group_id)
    curators_list = [{"id": curator.id, "name": curator.user.name} for curator in curators]
    return get_entity_list_kb(curators_list, callback_prefix)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
async def add_teacher(name: str, telegram_id: int, course_id: int, subject_id: int, group_id: int) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserRepository.create(
            telegram_id=telegram_id,
            name=name,
            role='teacher'
        )

        # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        await TeacherRepository.create(
            user_id=user.id,
            course_id=course_id,
            subject_id=subject_id,
            group_id=group_id
        )
        return True
    except Exception:
        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        return False

async def remove_teacher(teacher_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teacher = await TeacherRepository.get_by_id(teacher_id)
    if not teacher:
        return False

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
    from sqlalchemy import delete
    from database.models import User
    from database import get_db_session

    async with get_db_session() as session:
        result = await session.execute(delete(User).where(User.id == teacher.user_id))
        await session.commit()
        return result.rowcount > 0

async def get_teachers_list_kb(callback_prefix: str = "select_teacher", subject_id: int = None, group_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ –≥—Ä—É–ø–ø–µ)"""
    teachers = await TeacherRepository.get_by_subject_and_group(subject_id, group_id)
    teachers_list = [{"id": teacher.id, "name": teacher.user.name} for teacher in teachers]
    return get_entity_list_kb(teachers_list, callback_prefix)
