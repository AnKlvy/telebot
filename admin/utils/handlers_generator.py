from typing import Dict, Callable, Any, Optional
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from admin.utils.common import (
    get_entity_list_kb, get_confirmation_kb,
    managers_db, add_subject, remove_subject, add_person, remove_person
)
from common.keyboards import get_home_kb


def generate_simple_entity_handlers(
    router: Router,
    entity_name: str,
    entity_name_accusative: str,
    callback_prefix: str,
    data_storage: Any,
    add_function: Callable,
    remove_function: Callable,
    states_class: Any,
    list_function: Optional[Callable] = None
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π (–ø—Ä–µ–¥–º–µ—Ç—ã, –º–µ–Ω–µ–¥–∂–µ—Ä—ã)
    
    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        entity_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–ø—Ä–µ–¥–º–µ—Ç, –º–µ–Ω–µ–¥–∂–µ—Ä)
        entity_name_accusative: –ù–∞–∑–≤–∞–Ω–∏–µ –≤ –≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
        data_storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
        add_function: –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        remove_function: –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        states_class: –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
        list_function: –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    @router.callback_query(F.data == f"add_{callback_prefix}")
    async def start_add_entity(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {entity_name_accusative}:",
            reply_markup=get_home_kb()
        )
        await state.set_state(getattr(states_class, f"enter_{callback_prefix}_name"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    @router.message(StateFilter(getattr(states_class, f"enter_{callback_prefix}_name")))
    async def process_entity_name(message: Message, state: FSMContext):
        entity_name_input = message.text.strip()
        
        await state.update_data(**{f"{callback_prefix}_name": entity_name_input})
        await state.set_state(getattr(states_class, f"confirm_add_{callback_prefix}"))
        
        await message.answer(
            text=f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
                 f"{entity_name.capitalize()}: {entity_name_input}",
            reply_markup=get_confirmation_kb("add", callback_prefix)
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    @router.callback_query(StateFilter(getattr(states_class, f"confirm_add_{callback_prefix}")), F.data.startswith(f"confirm_add_{callback_prefix}_"))
    async def confirm_add_entity(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        entity_name_input = data.get(f"{callback_prefix}_name")

        success = add_function(entity_name_input)

        if success:
            await callback.message.edit_text(
                text=f"‚úÖ {entity_name.capitalize()} '{entity_name_input}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=get_home_kb()
            )
        else:
            await callback.message.edit_text(
                text=f"‚ùå {entity_name.capitalize()} '{entity_name_input}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=get_home_kb()
            )

        await state.clear()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è
    @router.callback_query(F.data == f"remove_{callback_prefix}")
    async def start_remove_entity(callback: CallbackQuery, state: FSMContext):
        if list_function:
            items_list = list_function()
        else:
            items_list = list(data_storage) if isinstance(data_storage, (list, dict)) else data_storage
        
        await callback.message.edit_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ {entity_name_accusative} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=get_entity_list_kb(items_list, f"delete_{callback_prefix}")
        )
        await state.set_state(getattr(states_class, f"select_{callback_prefix}_to_delete"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    @router.callback_query(F.data.startswith(f"delete_{callback_prefix}_"))
    async def select_entity_to_delete(callback: CallbackQuery, state: FSMContext):
        entity_id = callback.data.replace(f"delete_{callback_prefix}_", "")
        
        await state.update_data(**{f"{callback_prefix}_to_delete": entity_id})
        await state.set_state(getattr(states_class, f"confirm_delete_{callback_prefix}"))
        
        await callback.message.edit_text(
            text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
                 f"{entity_name.capitalize()}: {entity_id}\n\n"
                 f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=get_confirmation_kb("delete", callback_prefix, entity_id)
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    @router.callback_query(StateFilter(getattr(states_class, f"confirm_delete_{callback_prefix}")), F.data.startswith(f"confirm_delete_{callback_prefix}_"))
    async def confirm_delete_entity(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        entity_id = data.get(f"{callback_prefix}_to_delete")

        success = remove_function(entity_id)

        if success:
            await callback.message.edit_text(
                text=f"‚úÖ {entity_name.capitalize()} '{entity_id}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=get_home_kb()
            )
        else:
            await callback.message.edit_text(
                text=f"‚ùå {entity_name.capitalize()} '{entity_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_home_kb()
            )

        await state.clear()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã
    @router.callback_query(StateFilter(getattr(states_class, f"confirm_add_{callback_prefix}")), F.data.startswith(f"cancel_add_{callback_prefix}"))
    async def cancel_add_entity(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            text=f"‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {entity_name_accusative} –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_home_kb()
        )
        await state.clear()

    @router.callback_query(StateFilter(getattr(states_class, f"confirm_delete_{callback_prefix}")), F.data.startswith(f"cancel_delete_{callback_prefix}"))
    async def cancel_delete_entity(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            text=f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ {entity_name_accusative} –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_home_kb()
        )
        await state.clear()

def generate_person_entity_handlers(
    router: Router,
    entity_name: str,
    entity_name_accusative: str,
    callback_prefix: str,
    data_storage: Dict,
    states_class: Any,
    add_function: Callable = None,
    additional_fields: Dict[str, str] = None
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ª—é–¥–µ–π (–º–µ–Ω–µ–¥–∂–µ—Ä—ã, –∫—É—Ä–∞—Ç–æ—Ä—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, —É—á–µ–Ω–∏–∫–∏)
    
    Args:
        additional_fields: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ {"field_name": "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è"}
    """
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    @router.callback_query(F.data == f"add_{callback_prefix}")
    async def start_add_person(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            text=f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é {entity_name_accusative}:",
            reply_markup=get_home_kb()
        )
        await state.set_state(getattr(states_class, f"enter_{callback_prefix}_name"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    @router.message(StateFilter(getattr(states_class, f"enter_{callback_prefix}_name")))
    async def process_person_name(message: Message, state: FSMContext):
        person_name = message.text.strip()
        
        await state.update_data(**{f"{callback_prefix}_name": person_name})
        await state.set_state(getattr(states_class, f"enter_{callback_prefix}_telegram_id"))
        
        await message.answer(
            text=f"–í–≤–µ–¥–∏—Ç–µ Telegram ID {entity_name_accusative}:",
            reply_markup=get_home_kb()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ Telegram ID
    @router.message(StateFilter(getattr(states_class, f"enter_{callback_prefix}_telegram_id")))
    async def process_person_telegram_id(message: Message, state: FSMContext):
        try:
            telegram_id = int(message.text.strip())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
            from database import UserRepository
            existing_user = await UserRepository.get_by_telegram_id(telegram_id)

            if existing_user:
                await message.answer(
                    text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
                         f"–ò–º—è: {existing_user.name}\n"
                         f"–†–æ–ª—å: {existing_user.role}\n\n"
                         f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π Telegram ID:",
                    reply_markup=get_home_kb()
                )
                return

            await state.update_data(**{f"{callback_prefix}_telegram_id": telegram_id})

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∏–º
            if additional_fields:
                first_field = list(additional_fields.keys())[0]
                await state.set_state(getattr(states_class, f"enter_{callback_prefix}_{first_field}"))
                await message.answer(
                    text=additional_fields[first_field],
                    reply_markup=get_home_kb()
                )
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
                await show_person_confirmation(message, state, entity_name, callback_prefix, states_class)

        except ValueError:
            await message.answer(
                text="‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_home_kb()
            )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    @router.callback_query(StateFilter(getattr(states_class, f"confirm_add_{callback_prefix}")), F.data.startswith(f"confirm_add_{callback_prefix}_"))
    async def confirm_add_person(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        person_name = data.get(f"{callback_prefix}_name")
        telegram_id = data.get(f"{callback_prefix}_telegram_id")

        # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        additional_data = {}
        for key, value in data.items():
            if key.startswith(f"{callback_prefix}_") and key not in [f"{callback_prefix}_name", f"{callback_prefix}_telegram_id"]:
                field_name = key.replace(f"{callback_prefix}_", "")
                additional_data[field_name] = value

        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–∞
        if add_function:
            success = add_function(person_name, telegram_id, **additional_data)
        else:
            person_id = add_person(data_storage, person_name, telegram_id, **additional_data)
            success = True

        if success:
            await callback.message.edit_text(
                text=f"‚úÖ {entity_name.capitalize()} '{person_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=get_home_kb()
            )
        else:
            await callback.message.edit_text(
                text=f"‚ùå {entity_name.capitalize()} '{person_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=get_home_kb()
            )
        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    @router.callback_query(StateFilter(getattr(states_class, f"confirm_add_{callback_prefix}")), F.data.startswith(f"cancel_add_{callback_prefix}"))
    async def cancel_add_person(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            text=f"‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {entity_name_accusative} –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_home_kb()
        )
        await state.clear()

async def show_person_confirmation(message: Message, state: FSMContext, entity_name: str, callback_prefix: str, states_class: Any):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞"""
    data = await state.get_data()
    person_name = data.get(f"{callback_prefix}_name")
    telegram_id = data.get(f"{callback_prefix}_telegram_id")

    confirmation_text = f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
    confirmation_text += f"–ò–º—è: {person_name}\n"
    confirmation_text += f"Telegram ID: {telegram_id}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
    for key, value in data.items():
        if key.startswith(f"{callback_prefix}_") and key not in [f"{callback_prefix}_name", f"{callback_prefix}_telegram_id"]:
            field_name = key.replace(f"{callback_prefix}_", "").replace("_", " ").title()
            confirmation_text += f"{field_name}: {value}\n"

    await state.set_state(getattr(states_class, f"confirm_add_{callback_prefix}"))
    await message.answer(
        text=confirmation_text,
        reply_markup=get_confirmation_kb("add", callback_prefix)
    )
