from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from admin.utils.common import (
    get_managers_list_kb, get_confirmation_kb, add_manager, remove_manager
)
from common.keyboards import get_home_kb

router = Router()

class AdminManagersStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    enter_manager_name = State()
    enter_manager_telegram_id = State()
    confirm_add_manager = State()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    select_manager_to_delete = State()
    confirm_delete_manager = State()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê ===

@router.callback_query(F.data == "add_manager")
async def start_add_manager(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞:",
        reply_markup=get_home_kb()
    )
    await state.set_state(AdminManagersStates.enter_manager_name)

@router.message(StateFilter(AdminManagersStates.enter_manager_name))
async def process_manager_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    manager_name = message.text.strip()
    await state.update_data(manager_name=manager_name)
    await state.set_state(AdminManagersStates.enter_manager_telegram_id)

    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(AdminManagersStates.enter_manager_telegram_id))
async def process_manager_telegram_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        telegram_id = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        from database import UserRepository
        existing_user = await UserRepository.get_by_telegram_id(telegram_id)

        if existing_user:
            await message.answer(
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
                     f"–ò–º—è: {existing_user.name}\n"
                     f"–†–æ–ª—å: {existing_user.role}\n\n"
                     f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π Telegram ID:",
                reply_markup=get_home_kb()
            )
            return

        data = await state.get_data()
        manager_name = data.get("manager_name", "")

        await state.update_data(manager_telegram_id=telegram_id)
        await state.set_state(AdminManagersStates.confirm_add_manager)

        await message.answer(
            text=f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n"
                 f"–ò–º—è: {manager_name}\n"
                 f"Telegram ID: {telegram_id}",
            reply_markup=get_confirmation_kb("add", "manager")
        )
    except ValueError:
        await message.answer(
            text="‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_home_kb()
        )

@router.callback_query(StateFilter(AdminManagersStates.confirm_add_manager), F.data.startswith("confirm_add_manager_"))
async def confirm_add_manager(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    data = await state.get_data()

    manager_name = data.get("manager_name", "")
    telegram_id = data.get("manager_telegram_id", "")

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    success = await add_manager(manager_name, telegram_id)

    if success:
        await callback.message.edit_text(
            text=f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä '{manager_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '{manager_name}'!\n–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_home_kb()
        )

    await state.clear()

# === –£–î–ê–õ–ï–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê ===

@router.callback_query(F.data == "remove_manager")
async def start_remove_manager(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await get_managers_list_kb("delete_manager")
    )
    await state.set_state(AdminManagersStates.select_manager_to_delete)

@router.callback_query(AdminManagersStates.select_manager_to_delete, F.data.startswith("delete_manager_"))
async def select_manager_to_delete(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    manager_id = int(callback.data.replace("delete_manager_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    from database import ManagerRepository
    manager = await ManagerRepository.get_by_id(manager_id)

    if not manager:
        await callback.message.edit_text(
            text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return

    await state.update_data(manager_to_delete_id=manager_id)
    await state.set_state(AdminManagersStates.confirm_delete_manager)

    await callback.message.edit_text(
        text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n"
             f"–ò–º—è: {manager.user.name}\n"
             f"Telegram ID: {manager.user.telegram_id}\n\n"
             f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirmation_kb("delete", "manager", str(manager_id))
    )

@router.callback_query(StateFilter(AdminManagersStates.confirm_delete_manager), F.data.startswith("confirm_delete_manager_"))
async def confirm_delete_manager(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    data = await state.get_data()
    manager_id = data.get("manager_to_delete_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    from database import ManagerRepository
    manager = await ManagerRepository.get_by_id(manager_id)
    manager_name = manager.user.name if manager else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    success = await remove_manager(manager_id)

    if success:
        await callback.message.edit_text(
            text=f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä '{manager_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )

    await state.clear()

# === –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô ===

@router.callback_query(StateFilter(AdminManagersStates.confirm_add_manager), F.data.startswith("cancel_add_manager"))
async def cancel_add_manager(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    await callback.message.edit_text(
        text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()

@router.callback_query(StateFilter(AdminManagersStates.confirm_delete_manager), F.data.startswith("cancel_delete_manager"))
async def cancel_delete_manager(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    await callback.message.edit_text(
        text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()
