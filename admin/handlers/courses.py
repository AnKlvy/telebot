from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from admin.utils.common import (
    courses_db, subjects_db, add_course, remove_course,
    get_subjects_list_kb, get_courses_list_kb, get_confirmation_kb
)
from common.keyboards import back_to_main_button, get_home_kb

router = Router()

class AdminCoursesStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
    enter_course_name = State()
    select_course_subjects = State()
    confirm_add_course = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
    select_course_to_delete = State()
    confirm_delete_course = State()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–£–†–°–ê ===

@router.callback_query(F.data == "add_course")
async def start_add_course(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:",
        reply_markup=get_home_kb()
    )
    await state.set_state(AdminCoursesStates.enter_course_name)

@router.message(StateFilter(AdminCoursesStates.enter_course_name))
async def process_course_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞"""
    course_name = message.text.strip()
    
    await state.update_data(course_name=course_name, selected_subjects=[])
    await state.set_state(AdminCoursesStates.select_course_subjects)
    
    await message.answer(
        text=f"–ö—É—Ä—Å: {course_name}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫—É—Ä—Å–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
             f"–í—ã–±—Ä–∞–Ω–æ: 0",
        reply_markup=get_subjects_selection_kb([])
    )

def get_subjects_selection_kb(selected_subjects: list):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    buttons = []
    
    for subject in subjects_db:
        if subject in selected_subjects:
            # –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚úÖ {subject}",
                    callback_data=f"unselect_subject_{subject}"
                )
            ])
        else:
            # –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚¨ú {subject}",
                    callback_data=f"select_subject_{subject}"
                )
            ])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if selected_subjects:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_subject_selection")
        ])
    
    buttons.extend([
        back_to_main_button()
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(AdminCoursesStates.select_course_subjects, F.data.startswith("select_subject_"))
async def select_subject_for_course(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫—É—Ä—Å–∞"""
    subject = callback.data.replace("select_subject_", "")
    data = await state.get_data()
    
    selected_subjects = data.get("selected_subjects", [])
    if subject not in selected_subjects:
        selected_subjects.append(subject)
    
    await state.update_data(selected_subjects=selected_subjects)
    
    course_name = data.get("course_name", "")
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫—É—Ä—Å–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
             f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_subjects)}",
        reply_markup=get_subjects_selection_kb(selected_subjects)
    )

@router.callback_query(AdminCoursesStates.select_course_subjects, F.data.startswith("unselect_subject_"))
async def unselect_subject_for_course(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∫—É—Ä—Å–∞"""
    subject = callback.data.replace("unselect_subject_", "")
    data = await state.get_data()
    
    selected_subjects = data.get("selected_subjects", [])
    if subject in selected_subjects:
        selected_subjects.remove(subject)
    
    await state.update_data(selected_subjects=selected_subjects)
    
    course_name = data.get("course_name", "")
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫—É—Ä—Å–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
             f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_subjects)}",
        reply_markup=get_subjects_selection_kb(selected_subjects)
    )

@router.callback_query(AdminCoursesStates.select_course_subjects, F.data == "finish_subject_selection")
async def finish_subject_selection(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    data = await state.get_data()
    course_name = data.get("course_name", "")
    selected_subjects = data.get("selected_subjects", [])
    
    subjects_text = "\n".join([f"‚Ä¢ {subject}" for subject in selected_subjects])
    
    await state.set_state(AdminCoursesStates.confirm_add_course)
    await callback.message.edit_text(
        text=f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞:\n\n"
             f"–ù–∞–∑–≤–∞–Ω–∏–µ: {course_name}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç—ã ({len(selected_subjects)}):\n{subjects_text}",
        reply_markup=get_confirmation_kb("add", "course")
    )

@router.callback_query(AdminCoursesStates.confirm_add_course, F.data.startswith("confirm_add_course"))
async def confirm_add_course(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    data = await state.get_data()
    course_name = data.get("course_name", "")
    selected_subjects = data.get("selected_subjects", [])
    
    course_id = add_course(course_name, selected_subjects)
    
    await callback.message.edit_text(
        text=f"‚úÖ –ö—É—Ä—Å '{course_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
             f"ID –∫—É—Ä—Å–∞: {course_id}",
        reply_markup=get_home_kb()
    )
    await state.clear()

# === –£–î–ê–õ–ï–ù–ò–ï –ö–£–†–°–ê ===

@router.callback_query(F.data == "remove_course")
async def start_remove_course(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_courses_list_kb("delete_course")
    )
    await state.set_state(AdminCoursesStates.select_course_to_delete)

@router.callback_query(AdminCoursesStates.select_course_to_delete, F.data.startswith("delete_course_"))
async def select_course_to_delete(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    course_id = int(callback.data.replace("delete_course_", ""))
    course = courses_db.get(course_id)
    
    if not course:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return
    
    await state.update_data(course_to_delete=course_id)
    await state.set_state(AdminCoursesStates.confirm_delete_course)
    
    subjects_text = "\n".join([f"‚Ä¢ {subject}" for subject in course["subjects"]])
    
    await callback.message.edit_text(
        text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞:\n\n"
             f"–ù–∞–∑–≤–∞–Ω–∏–µ: {course['name']}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç—ã:\n{subjects_text}\n\n"
             f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirmation_kb("delete", "course", str(course_id))
    )

@router.callback_query(AdminCoursesStates.confirm_delete_course, F.data.startswith("confirm_delete_course"))
async def confirm_delete_course(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    data = await state.get_data()
    course_id = data.get("course_to_delete")
    
    course = courses_db.get(course_id)
    course_name = course["name"] if course else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å"
    
    success = remove_course(course_id)
    
    if success:
        await callback.message.edit_text(
            text=f"‚úÖ –ö—É—Ä—Å '{course_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text=f"‚ùå –ö—É—Ä—Å '{course_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
    
    await state.clear()

# === –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô ===

@router.callback_query(F.data.startswith("cancel_add_course") | F.data.startswith("cancel_delete_course"))
async def cancel_course_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫—É—Ä—Å–æ–º"""
    await callback.message.edit_text(
        text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()
