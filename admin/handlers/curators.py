from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from admin.utils.common import (
    get_courses_list_kb, get_subjects_list_kb, get_groups_list_kb, get_curators_list_kb,
    get_confirmation_kb, add_curator, remove_curator,
    get_course_by_id, get_subject_by_id, get_group_by_id
)
from common.keyboards import get_home_kb

router = Router()

class AdminCuratorsStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞
    enter_curator_name = State()
    enter_curator_telegram_id = State()
    select_curator_course = State()
    select_curator_subject = State()
    select_curator_group = State()
    confirm_add_curator = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞
    select_subject_for_curator_deletion = State()
    select_group_for_curator_deletion = State()
    select_curator_to_delete = State()
    confirm_delete_curator = State()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–£–†–ê–¢–û–†–ê ===

@router.callback_query(F.data == "add_curator")
async def start_add_curator(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫—É—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_home_kb()
    )
    await state.set_state(AdminCuratorsStates.enter_curator_name)

@router.message(StateFilter(AdminCuratorsStates.enter_curator_name))
async def process_curator_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    curator_name = message.text.strip()
    await state.update_data(curator_name=curator_name)
    await state.set_state(AdminCuratorsStates.enter_curator_telegram_id)
    
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ Telegram ID –∫—É—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(AdminCuratorsStates.enter_curator_telegram_id))
async def process_curator_telegram_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ Telegram ID –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    try:
        telegram_id = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        from database import UserRepository
        existing_user = await UserRepository.get_by_telegram_id(telegram_id)

        if existing_user:
            await message.answer(
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
                     f"–ò–º—è: {existing_user.name}\n"
                     f"–†–æ–ª—å: {existing_user.role}\n\n"
                     f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π Telegram ID:",
                reply_markup=get_home_kb()
            )
            return

        await state.update_data(curator_telegram_id=telegram_id)
        await state.set_state(AdminCuratorsStates.select_curator_course)

        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=await get_courses_list_kb("curator_course")
        )
    except ValueError:
        await message.answer(
            text="‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_home_kb()
        )

@router.callback_query(AdminCuratorsStates.select_curator_course, F.data.startswith("curator_course_"))
async def select_curator_course(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    course_id = int(callback.data.replace("curator_course_", ""))
    course = await get_course_by_id(course_id)
    
    if not course:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return
    
    await state.update_data(curator_course_id=course_id, curator_course_name=course.name)
    await state.set_state(AdminCuratorsStates.select_curator_subject)
    
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=await get_subjects_list_kb("curator_subject", course_id)
    )

@router.callback_query(AdminCuratorsStates.select_curator_subject, F.data.startswith("curator_subject_"))
async def select_curator_subject(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    subject_id = int(callback.data.replace("curator_subject_", ""))
    data = await state.get_data()
    course_name = data.get("curator_course_name", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    subject = await get_subject_by_id(subject_id)
    subject_name = subject.name if subject else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
    
    await state.update_data(curator_subject_id=subject_id, curator_subject_name=subject_name)
    await state.set_state(AdminCuratorsStates.select_curator_group)
    
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=await get_groups_list_kb("curator_group", subject_id)
    )

@router.callback_query(AdminCuratorsStates.select_curator_group, F.data.startswith("curator_group_"))
async def select_curator_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    group_id = int(callback.data.replace("curator_group_", ""))
    data = await state.get_data()
    course_name = data.get("curator_course_name", "")
    subject_name = data.get("curator_subject_name", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group = await get_group_by_id(group_id)
    group_name = group.name if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
    
    await state.update_data(curator_group_id=group_id, curator_group_name=group_name)
    await state.set_state(AdminCuratorsStates.confirm_add_curator)
    
    curator_name = data.get("curator_name", "")
    telegram_id = data.get("curator_telegram_id", "")
    
    await callback.message.edit_text(
        text=f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞:\n\n"
             f"–ò–º—è: {curator_name}\n"
             f"Telegram ID: {telegram_id}\n"
             f"–ö—É—Ä—Å: {course_name}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
             f"–ì—Ä—É–ø–ø–∞: {group_name}",
        reply_markup=get_confirmation_kb("add", "curator")
    )

@router.callback_query(StateFilter(AdminCuratorsStates.confirm_add_curator), F.data.startswith("confirm_add_curator_"))
async def confirm_add_curator(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    data = await state.get_data()

    curator_name = data.get("curator_name", "")
    telegram_id = data.get("curator_telegram_id", "")
    course_id = data.get("curator_course_id")
    subject_id = data.get("curator_subject_id")
    group_id = data.get("curator_group_id")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞
    success = await add_curator(curator_name, telegram_id, course_id, subject_id, group_id)

    if success:
        await callback.message.edit_text(
            text=f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä '{curator_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞ '{curator_name}'!\n–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_home_kb()
        )
    
    await state.clear()

# === –£–î–ê–õ–ï–ù–ò–ï –ö–£–†–ê–¢–û–†–ê ===

@router.callback_query(F.data == "remove_curator")
async def start_remove_curator(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=await get_subjects_list_kb("curator_delete_subject")
    )
    await state.set_state(AdminCuratorsStates.select_subject_for_curator_deletion)

@router.callback_query(AdminCuratorsStates.select_subject_for_curator_deletion, F.data.startswith("curator_delete_subject_"))
async def select_subject_for_curator_deletion(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    subject_id = int(callback.data.replace("curator_delete_subject_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    subject = await get_subject_by_id(subject_id)
    subject_name = subject.name if subject else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
    
    await state.update_data(deletion_subject_id=subject_id, deletion_subject_name=subject_name)
    await state.set_state(AdminCuratorsStates.select_group_for_curator_deletion)
    
    await callback.message.edit_text(
        text=f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=await get_groups_list_kb("curator_delete_group", subject_id)
    )

@router.callback_query(AdminCuratorsStates.select_group_for_curator_deletion, F.data.startswith("curator_delete_group_"))
async def select_group_for_curator_deletion(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    group_id = int(callback.data.replace("curator_delete_group_", ""))
    data = await state.get_data()
    subject_name = data.get("deletion_subject_name", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group = await get_group_by_id(group_id)
    group_name = group.name if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
    
    await state.update_data(deletion_group_id=group_id, deletion_group_name=group_name)
    await state.set_state(AdminCuratorsStates.select_curator_to_delete)
    
    await callback.message.edit_text(
        text=f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n–ì—Ä—É–ø–ø–∞: {group_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await get_curators_list_kb("delete_curator", group_id=group_id)
    )

@router.callback_query(AdminCuratorsStates.select_curator_to_delete, F.data.startswith("delete_curator_"))
async def select_curator_to_delete(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    curator_id = int(callback.data.replace("delete_curator_", ""))
    data = await state.get_data()
    subject_name = data.get("deletion_subject_name", "")
    group_name = data.get("deletion_group_name", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä–∞—Ç–æ—Ä–µ
    from database import CuratorRepository
    curator = await CuratorRepository.get_by_id(curator_id)
    
    if not curator:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return
    
    await state.update_data(curator_to_delete_id=curator_id)
    await state.set_state(AdminCuratorsStates.confirm_delete_curator)
    
    await callback.message.edit_text(
        text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞:\n\n"
             f"–ò–º—è: {curator.user.name}\n"
             f"Telegram ID: {curator.user.telegram_id}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
             f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
             f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirmation_kb("delete", "curator", str(curator_id))
    )

@router.callback_query(StateFilter(AdminCuratorsStates.confirm_delete_curator), F.data.startswith("confirm_delete_curator_"))
async def confirm_delete_curator(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    data = await state.get_data()
    curator_id = data.get("curator_to_delete_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    from database import CuratorRepository
    curator = await CuratorRepository.get_by_id(curator_id)
    curator_name = curator.user.name if curator else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    success = await remove_curator(curator_id)

    if success:
        await callback.message.edit_text(
            text=f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä '{curator_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )

    await state.clear()

# === –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô ===

@router.callback_query(StateFilter(AdminCuratorsStates.confirm_add_curator), F.data.startswith("cancel_add_curator"))
async def cancel_add_curator(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()

@router.callback_query(StateFilter(AdminCuratorsStates.confirm_delete_curator), F.data.startswith("cancel_delete_curator"))
async def cancel_delete_curator(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()
