from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from admin.utils.common import (
    get_courses_list_kb, get_subjects_list_kb, get_groups_list_kb, get_teachers_list_kb,
    get_confirmation_kb, add_teacher, remove_teacher,
    get_course_by_id, get_subject_by_id, get_group_by_id, get_groups_selection_kb
)
from common.keyboards import get_home_kb

router = Router()

class AdminTeachersStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    enter_teacher_name = State()
    enter_teacher_telegram_id = State()
    select_teacher_course = State()
    select_teacher_subject = State()
    select_teacher_groups = State()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø
    confirm_add_teacher = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    select_subject_for_teacher_deletion = State()
    select_group_for_teacher_deletion = State()
    select_teacher_to_delete = State()
    confirm_delete_teacher = State()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø ===

@router.callback_query(F.data == "add_teacher")
async def start_add_teacher(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_home_kb()
    )
    await state.set_state(AdminTeachersStates.enter_teacher_name)

@router.message(StateFilter(AdminTeachersStates.enter_teacher_name))
async def process_teacher_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_name = message.text.strip()
    await state.update_data(teacher_name=teacher_name)
    await state.set_state(AdminTeachersStates.enter_teacher_telegram_id)
    
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(AdminTeachersStates.enter_teacher_telegram_id))
async def process_teacher_telegram_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ Telegram ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        telegram_id = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∞–º–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        from admin.utils.common import check_existing_user_for_role_assignment
        check_result = await check_existing_user_for_role_assignment(
            telegram_id, 'teacher', message.from_user.id
        )

        if check_result['exists'] and not check_result['can_assign']:
            await message.answer(
                text=check_result['message'],
                reply_markup=get_home_kb()
            )
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω (–∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–±—è)
        if check_result['exists'] and check_result['can_assign']:
            await message.answer(
                text=check_result['message'] + "\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...",
                reply_markup=get_home_kb()
            )

        await state.update_data(teacher_telegram_id=telegram_id)
        await state.set_state(AdminTeachersStates.select_teacher_course)

        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=await get_courses_list_kb("teacher_course")
        )
    except ValueError:
        await message.answer(
            text="‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_home_kb()
        )

@router.callback_query(AdminTeachersStates.select_teacher_course, F.data.startswith("teacher_course_"))
async def select_teacher_course(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    course_id = int(callback.data.replace("teacher_course_", ""))
    course = await get_course_by_id(course_id)
    
    if not course:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return
    
    await state.update_data(teacher_course_id=course_id, teacher_course_name=course.name)
    await state.set_state(AdminTeachersStates.select_teacher_subject)
    
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=await get_subjects_list_kb("teacher_subject", course_id)
    )

@router.callback_query(AdminTeachersStates.select_teacher_subject, F.data.startswith("teacher_subject_"))
async def select_teacher_subject(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    subject_id = int(callback.data.replace("teacher_subject_", ""))
    data = await state.get_data()
    course_name = data.get("teacher_course_name", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    subject = await get_subject_by_id(subject_id)
    subject_name = subject.name if subject else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
    
    await state.update_data(teacher_subject_id=subject_id, teacher_subject_name=subject_name, selected_group_ids=[])
    await state.set_state(AdminTeachersStates.select_teacher_groups)

    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
             f"–í—ã–±—Ä–∞–Ω–æ: 0",
        reply_markup=await get_groups_selection_kb([], subject_id)
    )

@router.callback_query(AdminTeachersStates.select_teacher_groups, F.data.startswith("select_group_"))
async def select_group_for_teacher(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    group_id = int(callback.data.replace("select_group_", ""))
    data = await state.get_data()

    selected_group_ids = data.get("selected_group_ids", [])
    if group_id not in selected_group_ids:
        selected_group_ids.append(group_id)

    await state.update_data(selected_group_ids=selected_group_ids)

    course_name = data.get("teacher_course_name", "")
    subject_name = data.get("teacher_subject_name", "")
    subject_id = data.get("teacher_subject_id")

    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
             f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_group_ids)}",
        reply_markup=await get_groups_selection_kb(selected_group_ids, subject_id)
    )

@router.callback_query(AdminTeachersStates.select_teacher_groups, F.data.startswith("unselect_group_"))
async def unselect_group_for_teacher(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    group_id = int(callback.data.replace("unselect_group_", ""))
    data = await state.get_data()

    selected_group_ids = data.get("selected_group_ids", [])
    if group_id in selected_group_ids:
        selected_group_ids.remove(group_id)

    await state.update_data(selected_group_ids=selected_group_ids)

    course_name = data.get("teacher_course_name", "")
    subject_name = data.get("teacher_subject_name", "")
    subject_id = data.get("teacher_subject_id")

    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
             f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_group_ids)}",
        reply_markup=await get_groups_selection_kb(selected_group_ids, subject_id)
    )

@router.callback_query(AdminTeachersStates.select_teacher_groups, F.data == "finish_group_selection")
async def finish_group_selection_for_teacher(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    course_name = data.get("teacher_course_name", "")
    subject_name = data.get("teacher_subject_name", "")
    selected_group_ids = data.get("selected_group_ids", [])

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ ID
    group_names = []
    for group_id in selected_group_ids:
        group = await get_group_by_id(group_id)
        if group:
            group_names.append(group.name)

    groups_text = "\n".join([f"‚Ä¢ {name}" for name in group_names])

    await state.update_data(teacher_group_ids=selected_group_ids, teacher_group_names=group_names)
    await state.set_state(AdminTeachersStates.confirm_add_teacher)

    teacher_name = data.get("teacher_name", "")
    telegram_id = data.get("teacher_telegram_id", "")

    await callback.message.edit_text(
        text=f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n"
             f"–ò–º—è: {teacher_name}\n"
             f"Telegram ID: {telegram_id}\n"
             f"–ö—É—Ä—Å: {course_name}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
             f"–ì—Ä—É–ø–ø—ã ({len(selected_group_ids)}):\n{groups_text}",
        reply_markup=get_confirmation_kb("add", "teacher")
    )

@router.callback_query(StateFilter(AdminTeachersStates.confirm_add_teacher), F.data.startswith("confirm_add_teacher_"))
async def confirm_add_teacher(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()

    teacher_name = data.get("teacher_name", "")
    telegram_id = data.get("teacher_telegram_id", "")
    course_id = data.get("teacher_course_id")
    subject_id = data.get("teacher_subject_id")
    group_ids = data.get("teacher_group_ids", [])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    success = await add_teacher(teacher_name, telegram_id, course_id, subject_id, group_ids)

    if success:
        group_names = data.get("teacher_group_names", [])
        await callback.message.edit_text(
            text=f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{teacher_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã: {', '.join(group_names)}!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è '{teacher_name}'!\n–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_home_kb()
        )

    await state.clear()

# === –£–î–ê–õ–ï–ù–ò–ï –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø ===

@router.callback_query(F.data == "remove_teacher")
async def start_remove_teacher(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=await get_subjects_list_kb("teacher_delete_subject")
    )
    await state.set_state(AdminTeachersStates.select_subject_for_teacher_deletion)

@router.callback_query(AdminTeachersStates.select_subject_for_teacher_deletion, F.data.startswith("teacher_delete_subject_"))
async def select_subject_for_teacher_deletion(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    subject_id = int(callback.data.replace("teacher_delete_subject_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    subject = await get_subject_by_id(subject_id)
    subject_name = subject.name if subject else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
    
    await state.update_data(deletion_subject_id=subject_id, deletion_subject_name=subject_name)
    await state.set_state(AdminTeachersStates.select_group_for_teacher_deletion)
    
    await callback.message.edit_text(
        text=f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=await get_groups_list_kb("teacher_delete_group", subject_id)
    )

@router.callback_query(AdminTeachersStates.select_group_for_teacher_deletion, F.data.startswith("teacher_delete_group_"))
async def select_group_for_teacher_deletion(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    group_id = int(callback.data.replace("teacher_delete_group_", ""))
    data = await state.get_data()
    subject_name = data.get("deletion_subject_name", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group = await get_group_by_id(group_id)
    group_name = group.name if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
    
    await state.update_data(deletion_group_id=group_id, deletion_group_name=group_name)
    await state.set_state(AdminTeachersStates.select_teacher_to_delete)
    
    await callback.message.edit_text(
        text=f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n–ì—Ä—É–ø–ø–∞: {group_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await get_teachers_list_kb("delete_teacher", group_id=group_id)
    )

@router.callback_query(AdminTeachersStates.select_teacher_to_delete, F.data.startswith("delete_teacher_"))
async def select_teacher_to_delete(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    teacher_id = int(callback.data.replace("delete_teacher_", ""))
    data = await state.get_data()
    subject_name = data.get("deletion_subject_name", "")
    group_name = data.get("deletion_group_name", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    from database import TeacherRepository
    teacher = await TeacherRepository.get_by_id(teacher_id)
    
    if not teacher:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return
    
    await state.update_data(teacher_to_delete_id=teacher_id)
    await state.set_state(AdminTeachersStates.confirm_delete_teacher)
    
    await callback.message.edit_text(
        text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n"
             f"–ò–º—è: {teacher.user.name}\n"
             f"Telegram ID: {teacher.user.telegram_id}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
             f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
             f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirmation_kb("delete", "teacher", str(teacher_id))
    )

@router.callback_query(StateFilter(AdminTeachersStates.confirm_delete_teacher), F.data.startswith("confirm_delete_teacher_"))
async def confirm_delete_teacher(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    teacher_id = data.get("teacher_to_delete_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    from database import TeacherRepository
    teacher = await TeacherRepository.get_by_id(teacher_id)
    teacher_name = teacher.user.name if teacher else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    success = await remove_teacher(teacher_id)

    if success:
        await callback.message.edit_text(
            text=f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{teacher_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )

    await state.clear()

# === –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô ===

@router.callback_query(StateFilter(AdminTeachersStates.confirm_add_teacher), F.data.startswith("cancel_add_teacher"))
async def cancel_add_teacher(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()

@router.callback_query(StateFilter(AdminTeachersStates.confirm_delete_teacher), F.data.startswith("cancel_delete_teacher"))
async def cancel_delete_teacher(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()
