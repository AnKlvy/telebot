from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from admin.utils.common import (
    get_courses_list_kb, get_groups_by_course_kb, get_students_list_kb,
    get_confirmation_kb, get_tariff_selection_kb, add_student, remove_student,
    get_course_by_id, get_group_by_id
)
from common.keyboards import get_home_kb

router = Router()

class AdminStudentsStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    enter_student_name = State()
    enter_student_telegram_id = State()
    select_student_course = State()
    select_student_group = State()
    select_student_tariff = State()
    confirm_add_student = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    select_course_for_student_deletion = State()
    select_group_for_student_deletion = State()
    select_student_to_delete = State()
    confirm_delete_student = State()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ß–ï–ù–ò–ö–ê ===

@router.callback_query(F.data == "add_student")
async def start_add_student(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=get_home_kb()
    )
    await state.set_state(AdminStudentsStates.enter_student_name)

@router.message(StateFilter(AdminStudentsStates.enter_student_name))
async def process_student_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞"""
    student_name = message.text.strip()
    await state.update_data(student_name=student_name)
    await state.set_state(AdminStudentsStates.enter_student_telegram_id)
    
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ Telegram ID —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(AdminStudentsStates.enter_student_telegram_id))
async def process_student_telegram_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ Telegram ID —É—á–µ–Ω–∏–∫–∞"""
    try:
        telegram_id = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∞–º–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        from admin.utils.common import check_existing_user_for_role_assignment
        check_result = await check_existing_user_for_role_assignment(
            telegram_id, 'student', message.from_user.id
        )

        if check_result['exists'] and not check_result['can_assign']:
            await message.answer(
                text=check_result['message'],
                reply_markup=get_home_kb()
            )
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω (–∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–±—è)
        if check_result['exists'] and check_result['can_assign']:
            await message.answer(
                text=check_result['message'] + "\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞...",
                reply_markup=get_home_kb()
            )

        await state.update_data(student_telegram_id=telegram_id)
        await state.set_state(AdminStudentsStates.select_student_course)

        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É—á–µ–Ω–∏–∫–∞:",
            reply_markup=await get_courses_list_kb("student_course")
        )
    except ValueError:
        await message.answer(
            text="‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_home_kb()
        )

@router.callback_query(AdminStudentsStates.select_student_course, F.data.startswith("student_course_"))
async def select_student_course(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    course_id = int(callback.data.replace("student_course_", ""))
    course = await get_course_by_id(course_id)

    if not course:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return

    await state.update_data(student_course_name=course.name, student_course_id=course_id)
    await state.set_state(AdminStudentsStates.select_student_group)

    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=await get_groups_by_course_kb("student_group", course_id)
    )

@router.callback_query(AdminStudentsStates.select_student_group, F.data.startswith("student_group_"))
async def select_student_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    group_id = int(callback.data.replace("student_group_", ""))
    data = await state.get_data()
    course_name = data.get("student_course_name", "")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group = await get_group_by_id(group_id)
    group_name = f"{group.name} ({group.subject.name})" if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"

    await state.update_data(student_group_id=group_id, student_group_name=group_name)
    await state.set_state(AdminStudentsStates.select_student_tariff)

    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n–ì—Ä—É–ø–ø–∞: {group_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=get_tariff_selection_kb()
    )

@router.callback_query(AdminStudentsStates.select_student_tariff, F.data.startswith("tariff_"))
async def select_student_tariff(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    tariff = callback.data.replace("tariff_", "")
    tariff_name = "–°—Ç–∞–Ω–¥–∞—Ä—Ç" if tariff == "standard" else "–ü—Ä–µ–º–∏—É–º"

    data = await state.get_data()
    student_name = data.get("student_name", "")
    telegram_id = data.get("student_telegram_id", "")
    course_name = data.get("student_course_name", "")
    group_name = data.get("student_group_name", "")

    await state.update_data(student_tariff=tariff, student_tariff_name=tariff_name)
    await state.set_state(AdminStudentsStates.confirm_add_student)

    await callback.message.edit_text(
        text=f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
             f"–ò–º—è: {student_name}\n"
             f"Telegram ID: {telegram_id}\n"
             f"–ö—É—Ä—Å: {course_name}\n"
             f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
             f"–¢–∞—Ä–∏—Ñ: {tariff_name}",
        reply_markup=get_confirmation_kb("add", "student")
    )

@router.callback_query(StateFilter(AdminStudentsStates.confirm_add_student), F.data.startswith("confirm_add_student_"))
async def confirm_add_student(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    data = await state.get_data()

    student_name = data.get("student_name", "")
    telegram_id = data.get("student_telegram_id", "")
    group_id = data.get("student_group_id")
    tariff = data.get("student_tariff", "")

    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
    success = await add_student(student_name, telegram_id, group_id, tariff)

    if success:
        await callback.message.edit_text(
            text=f"‚úÖ –£—á–µ–Ω–∏–∫ '{student_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ '{student_name}'!\n–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_home_kb()
        )

    await state.clear()

# === –£–î–ê–õ–ï–ù–ò–ï –£–ß–ï–ù–ò–ö–ê ===

@router.callback_query(F.data == "remove_student")
async def start_remove_student(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        reply_markup=await get_courses_list_kb("student_delete_course")
    )
    await state.set_state(AdminStudentsStates.select_course_for_student_deletion)

@router.callback_query(AdminStudentsStates.select_course_for_student_deletion, F.data.startswith("student_delete_course_"))
async def select_course_for_student_deletion(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    course_id = int(callback.data.replace("student_delete_course_", ""))
    course = await get_course_by_id(course_id)

    if not course:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return

    await state.update_data(deletion_course_id=course_id, deletion_course_name=course.name)
    await state.set_state(AdminStudentsStates.select_group_for_student_deletion)

    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=await get_groups_by_course_kb("student_delete_group", course_id)
    )

@router.callback_query(AdminStudentsStates.select_group_for_student_deletion, F.data.startswith("student_delete_group_"))
async def select_group_for_student_deletion(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    group_id = int(callback.data.replace("student_delete_group_", ""))
    data = await state.get_data()
    course_name = data.get("deletion_course_name", "")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group = await get_group_by_id(group_id)
    group_name = f"{group.name} ({group.subject.name})" if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"

    await state.update_data(deletion_group_id=group_id, deletion_group_name=group_name)
    await state.set_state(AdminStudentsStates.select_student_to_delete)

    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n–ì—Ä—É–ø–ø–∞: {group_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await get_students_list_kb("delete_student", group_id=group_id)
    )

@router.callback_query(AdminStudentsStates.select_student_to_delete, F.data.startswith("delete_student_"))
async def select_student_to_delete(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    student_id = int(callback.data.replace("delete_student_", ""))
    data = await state.get_data()
    course_name = data.get("deletion_course_name", "")
    group_name = data.get("deletion_group_name", "")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
    from database import StudentRepository
    student = await StudentRepository.get_by_id(student_id)

    if not student:
        await callback.message.edit_text(
            text="‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return

    await state.update_data(student_to_delete_id=student_id)
    await state.set_state(AdminStudentsStates.confirm_delete_student)

    await callback.message.edit_text(
        text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
             f"–ò–º—è: {student.user.name}\n"
             f"Telegram ID: {student.user.telegram_id}\n"
             f"–ö—É—Ä—Å: {course_name}\n"
             f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
             f"–¢–∞—Ä–∏—Ñ: {student.tariff or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
             f"–ë–∞–ª–ª—ã: {student.points}\n"
             f"–£—Ä–æ–≤–µ–Ω—å: {student.level}\n\n"
             f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirmation_kb("delete", "student", str(student_id))
    )

@router.callback_query(StateFilter(AdminStudentsStates.confirm_delete_student), F.data.startswith("confirm_delete_student_"))
async def confirm_delete_student(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    data = await state.get_data()
    student_id = data.get("student_to_delete_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    from database import StudentRepository
    student = await StudentRepository.get_by_id(student_id)
    student_name = student.user.name if student else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    success = await remove_student(student_id)

    if success:
        await callback.message.edit_text(
            text=f"‚úÖ –£—á–µ–Ω–∏–∫ '{student_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text="‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )

    await state.clear()

# === –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô ===

@router.callback_query(StateFilter(AdminStudentsStates.confirm_add_student), F.data.startswith("cancel_add_student"))
async def cancel_add_student(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    await callback.message.edit_text(
        text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()

@router.callback_query(StateFilter(AdminStudentsStates.confirm_delete_student), F.data.startswith("cancel_delete_student"))
async def cancel_delete_student(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    await callback.message.edit_text(
        text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()
