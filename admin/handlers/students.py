from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from admin.utils.common import (
    students_db, groups_db,
    get_courses_list_kb, get_groups_list_kb, get_people_list_kb, 
    get_confirmation_kb, get_tariff_selection_kb, add_person, remove_person
)
from common.keyboards import get_home_kb
from manager.handlers.lessons import courses_db

router = Router()

class AdminStudentsStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    enter_student_name = State()
    enter_student_telegram_id = State()
    select_student_course = State()
    select_student_group = State()
    select_student_tariff = State()
    confirm_add_student = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    select_course_for_student_deletion = State()
    select_group_for_student_deletion = State()
    select_student_to_delete = State()
    confirm_delete_student = State()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ß–ï–ù–ò–ö–ê ===

@router.callback_query(F.data == "add_student")
async def start_add_student(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=get_home_kb()
    )
    await state.set_state(AdminStudentsStates.enter_student_name)

@router.message(StateFilter(AdminStudentsStates.enter_student_name))
async def process_student_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞"""
    student_name = message.text.strip()
    await state.update_data(student_name=student_name)
    await state.set_state(AdminStudentsStates.enter_student_telegram_id)
    
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ Telegram ID —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(AdminStudentsStates.enter_student_telegram_id))
async def process_student_telegram_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ Telegram ID —É—á–µ–Ω–∏–∫–∞"""
    try:
        telegram_id = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        from database import UserRepository
        existing_user = await UserRepository.get_by_telegram_id(telegram_id)

        if existing_user:
            await message.answer(
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
                     f"–ò–º—è: {existing_user.name}\n"
                     f"–†–æ–ª—å: {existing_user.role}\n\n"
                     f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π Telegram ID:",
                reply_markup=get_home_kb()
            )
            return

        await state.update_data(student_telegram_id=telegram_id)
        await state.set_state(AdminStudentsStates.select_student_course)

        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É—á–µ–Ω–∏–∫–∞:",
            reply_markup=await get_courses_list_kb("student_course")
        )
    except ValueError:
        await message.answer(
            text="‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_home_kb()
        )

@router.callback_query(AdminStudentsStates.select_student_course, F.data.startswith("student_course_"))
async def select_student_course(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    course_id = int(callback.data.replace("student_course_", ""))
    course = courses_db.get(course_id)
    
    if not course:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return
    
    await state.update_data(student_course=course["name"], student_course_id=course_id)
    await state.set_state(AdminStudentsStates.select_student_group)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
    course_groups = []
    for subject in course["subjects"]:
        if subject in groups_db:
            course_groups.extend(groups_db[subject])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –∫—É—Ä—Å–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    buttons = []
    
    if not course_groups:
        buttons.append([
            InlineKeyboardButton(text="üìù –ì—Ä—É–ø–ø –ø–æ–∫–∞ –Ω–µ—Ç", callback_data="no_groups")
        ])
    else:
        for group in course_groups:
            buttons.append([
                InlineKeyboardButton(
                    text=group,
                    callback_data=f"student_group_{group}"
                )
            ])
    
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    course_groups_kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course['name']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=course_groups_kb
    )

@router.callback_query(AdminStudentsStates.select_student_group, F.data.startswith("student_group_"))
async def select_student_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    group = callback.data.replace("student_group_", "")
    data = await state.get_data()
    course_name = data.get("student_course", "")
    
    await state.update_data(student_group=group)
    await state.set_state(AdminStudentsStates.select_student_tariff)
    
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n–ì—Ä—É–ø–ø–∞: {group}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=get_tariff_selection_kb()
    )

@router.callback_query(AdminStudentsStates.select_student_tariff, F.data.startswith("tariff_"))
async def select_student_tariff(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    tariff = callback.data.replace("tariff_", "")
    tariff_name = "–°—Ç–∞–Ω–¥–∞—Ä—Ç" if tariff == "standard" else "–ü—Ä–µ–º–∏—É–º"
    
    data = await state.get_data()
    student_name = data.get("student_name", "")
    telegram_id = data.get("student_telegram_id", "")
    course_name = data.get("student_course", "")
    group = data.get("student_group", "")
    
    await state.update_data(student_tariff=tariff_name)
    await state.set_state(AdminStudentsStates.confirm_add_student)
    
    await callback.message.edit_text(
        text=f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
             f"–ò–º—è: {student_name}\n"
             f"Telegram ID: {telegram_id}\n"
             f"–ö—É—Ä—Å: {course_name}\n"
             f"–ì—Ä—É–ø–ø–∞: {group}\n"
             f"–¢–∞—Ä–∏—Ñ: {tariff_name}",
        reply_markup=get_confirmation_kb("add", "student")
    )

@router.callback_query(AdminStudentsStates.confirm_add_student, F.data.startswith("confirm_add_student"))
async def confirm_add_student(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    data = await state.get_data()
    
    student_name = data.get("student_name", "")
    telegram_id = data.get("student_telegram_id", "")
    course = data.get("student_course", "")
    group = data.get("student_group", "")
    tariff = data.get("student_tariff", "")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
    student_id = add_person(students_db, student_name, telegram_id, 
                           course=course, group=group, tariff=tariff)
    
    await callback.message.edit_text(
        text=f"‚úÖ –£—á–µ–Ω–∏–∫ '{student_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=get_home_kb()
    )
    await state.clear()

# === –£–î–ê–õ–ï–ù–ò–ï –£–ß–ï–ù–ò–ö–ê ===

@router.callback_query(F.data == "remove_student")
async def start_remove_student(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        reply_markup=get_courses_list_kb("student_delete_course")
    )
    await state.set_state(AdminStudentsStates.select_course_for_student_deletion)

@router.callback_query(AdminStudentsStates.select_course_for_student_deletion, F.data.startswith("student_delete_course_"))
async def select_course_for_student_deletion(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    course_id = int(callback.data.replace("student_delete_course_", ""))
    course = courses_db.get(course_id)
    
    if not course:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return
    
    await state.update_data(deletion_course=course["name"])
    await state.set_state(AdminStudentsStates.select_group_for_student_deletion)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
    course_groups = []
    for subject in course["subjects"]:
        if subject in groups_db:
            course_groups.extend(groups_db[subject])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –∫—É—Ä—Å–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    buttons = []
    
    if not course_groups:
        buttons.append([
            InlineKeyboardButton(text="üìù –ì—Ä—É–ø–ø –ø–æ–∫–∞ –Ω–µ—Ç", callback_data="no_groups")
        ])
    else:
        for group in course_groups:
            buttons.append([
                InlineKeyboardButton(
                    text=group,
                    callback_data=f"student_delete_group_{group}"
                )
            ])
    
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    course_groups_kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course['name']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=course_groups_kb
    )

@router.callback_query(AdminStudentsStates.select_group_for_student_deletion, F.data.startswith("student_delete_group_"))
async def select_group_for_student_deletion(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    group = callback.data.replace("student_delete_group_", "")
    data = await state.get_data()
    course = data.get("deletion_course", "")
    
    await state.update_data(deletion_group=group)
    await state.set_state(AdminStudentsStates.select_student_to_delete)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –∫—É—Ä—Å—É –∏ –≥—Ä—É–ø–ø–µ
    filtered_students = []
    for student_id, student_data in students_db.items():
        if (student_data.get("course") == course and 
            student_data.get("group") == group):
            filtered_students.append({
                "id": student_id,
                "name": student_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            })
    
    from admin.utils.common import get_entity_list_kb
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course}\n–ì—Ä—É–ø–ø–∞: {group}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_entity_list_kb(filtered_students, "delete_student")
    )

@router.callback_query(AdminStudentsStates.select_student_to_delete, F.data.startswith("delete_student_"))
async def select_student_to_delete(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    student_id = callback.data.replace("delete_student_", "")
    student = students_db.get(student_id)
    
    if not student:
        await callback.message.edit_text(
            text="‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return
    
    await state.update_data(student_to_delete=student_id)
    await state.set_state(AdminStudentsStates.confirm_delete_student)
    
    await callback.message.edit_text(
        text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
             f"–ò–º—è: {student.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
             f"–ö—É—Ä—Å: {student.get('course', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
             f"–ì—Ä—É–ø–ø–∞: {student.get('group', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
             f"–¢–∞—Ä–∏—Ñ: {student.get('tariff', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
             f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirmation_kb("delete", "student", student_id)
    )

@router.callback_query(AdminStudentsStates.confirm_delete_student, F.data.startswith("confirm_delete_student"))
async def confirm_delete_student(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    data = await state.get_data()
    student_id = data.get("student_to_delete", "")
    
    student = students_db.get(student_id)
    student_name = student.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") if student else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    success = remove_person(students_db, student_id)
    
    if success:
        await callback.message.edit_text(
            text=f"‚úÖ –£—á–µ–Ω–∏–∫ '{student_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_home_kb()
        )
    else:
        await callback.message.edit_text(
            text="‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
    
    await state.clear()

# === –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô ===

@router.callback_query(F.data.startswith("cancel_add_student") | F.data.startswith("cancel_delete_student"))
async def cancel_student_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–µ–Ω–∏–∫–æ–º"""
    await callback.message.edit_text(
        text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_home_kb()
    )
    await state.clear()
