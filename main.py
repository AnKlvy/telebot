"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
"""
import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from utils.config import TOKEN, WEBHOOK_MODE, WEBHOOK_PATH, WEB_SERVER_HOST, WEB_SERVER_PORT, REDIS_ENABLED
from utils.logging_config import setup_logging
from utils.lifecycle import on_startup, on_shutdown, health_check
from utils.redis_manager import RedisManager
from utils.redis_storage import RedisStorage
from common.handlers import router as common_router
from common.register_handlers_and_transitions import register_handlers
from manager.handlers.main import show_manager_main_menu
from manager.handlers import router as manager_router
from student.handlers import router as student_router
from student.handlers.main import show_student_main_menu
from curator.handlers import router as curator_router
from curator.handlers.main import show_curator_main_menu
from teacher.handlers import router as teacher_router
from teacher.handlers.main import show_teacher_main_menu
from admin.handlers import router as admin_router
from admin.handlers.main import show_admin_main_menu
from middlewares.role_middleware import RoleMiddleware
from middlewares.performance_middleware import PerformanceMiddleware

async def start_command(message, user_role: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    if user_role == "admin":
        await show_admin_main_menu(message, user_role=user_role)
    elif user_role == "manager":
        await show_manager_main_menu(message, user_role=user_role)
    elif user_role == "curator":
        await show_curator_main_menu(message, user_role=user_role)
    elif user_role == "teacher":
        await show_teacher_main_menu(message, user_role=user_role)
    else:  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º
        await show_student_main_menu(message, user_role=user_role)

async def setup_commands(dp: Dispatcher):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        from database import get_db_session, User
        from sqlalchemy import select, func

        # –ö–æ–º–∞–Ω–¥–∞ /start –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
        dp.message.register(start_command, CommandStart())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ
        async with get_db_session() as session:
            result = await session.execute(
                select(func.count(User.id)).where(User.role == 'admin')
            )
            admin_count = result.scalar()

            if admin_count > 0:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–¥–º–∏–Ω—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–ª–µ–π
                # –î–æ—Å—Ç—É–ø –∫ –Ω–∏–º –±—É–¥–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π
                dp.message.register(show_admin_main_menu, Command("admin"))
                dp.message.register(show_manager_main_menu, Command("manager"))
                dp.message.register(show_curator_main_menu, Command("curator"))
                dp.message.register(show_teacher_main_menu, Command("teacher"))
                dp.message.register(show_student_main_menu, Command("student"))
                logging.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–ª–µ–π (–∞–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {admin_count})")
            else:
                logging.warning("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤ - –∫–æ–º–∞–Ω–¥—ã —Ä–æ–ª–µ–π –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        dp.message.register(start_command, CommandStart())

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    storage = None
    if REDIS_ENABLED:
        redis_manager = RedisManager()
        await redis_manager.connect()
        if redis_manager.connected:
            storage = RedisStorage(redis_manager)
            logging.info("‚úÖ Redis Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logging.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MemoryStorage")

    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup –∏ shutdown —Ö—É–∫–∏
    async def startup_wrapper():
        await on_startup(bot)

    async def shutdown_wrapper():
        await on_shutdown(bot)

    dp.startup.register(startup_wrapper)
    dp.shutdown.register(shutdown_wrapper)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.message.middleware(RoleMiddleware())
    dp.callback_query.middleware(RoleMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_middleware = PerformanceMiddleware()
    dp.message.middleware(performance_middleware)
    dp.callback_query.middleware(performance_middleware)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await setup_commands(dp)

    # –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    dp.include_router(common_router)
    dp.include_router(admin_router)
    dp.include_router(student_router)
    dp.include_router(teacher_router)
    dp.include_router(curator_router)
    dp.include_router(manager_router)
    register_handlers()

    if WEBHOOK_MODE:
        # Webhook —Ä–µ–∂–∏–º —Å aiohttp —Å–µ—Ä–≤–µ—Ä–æ–º
        app = web.Application()
        app.router.add_get("/health", health_check)

        # –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        async def performance_stats(request):
            """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
            try:
                stats = performance_middleware.get_current_stats()
                return web.json_response(stats)
            except Exception as e:
                return web.json_response({"error": str(e)}, status=500)

        app.router.add_get("/stats", performance_stats)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)
        setup_application(app, dp, bot=bot)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, WEB_SERVER_HOST, WEB_SERVER_PORT)
        await site.start()

        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logging.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            await runner.cleanup()
    else:
        # Polling —Ä–µ–∂–∏–º
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
        await dp.start_polling(bot)

if __name__ == "__main__":
    setup_logging()
    asyncio.run(main())
