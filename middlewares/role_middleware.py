from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery

class RoleMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self):
        # –ö—ç—à –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        self._role_cache = {}
        self._cache_updated = False

    async def _update_role_cache(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from database import get_db_session, User
            from sqlalchemy import select

            async with get_db_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                result = await session.execute(select(User))
                all_users = result.scalars().all()

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
                self._role_cache = {
                    'admin': [],
                    'manager': [],
                    'curator': [],
                    'teacher': [],
                    'student': []
                }

                for user in all_users:
                    if user.role in self._role_cache:
                        self._role_cache[user.role].append(user.telegram_id)

                self._cache_updated = True
                print(f"üîÑ –ö—ç—à —Ä–æ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω:")
                for role, ids in self._role_cache.items():
                    if ids:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Ä–æ–ª–∏
                        print(f"  {role}: {ids}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ä–æ–ª–µ–π: {e}")

    async def __call__(
        self,
        handler: Callable[[Message | CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if not self._cache_updated:
            await self._update_role_cache()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ ID –∏–∑ –∫—ç—à–∞
        role = "student"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        for role_name, user_ids in self._role_cache.items():
            if user_id in user_ids:
                role = role_name
                break

        print(f"User ID: {user_id} -> Role: {role}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        data["user_role"] = role
        data["user_id"] = user_id

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
        return await handler(event, data)