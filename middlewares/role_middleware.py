from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from sqlalchemy.sql.expression import text
import asyncio
import time
import logging
from utils.redis_manager import RedisManager
from utils.config import REDIS_ENABLED

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à —Ä–æ–ª–µ–π (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ middleware)
_global_role_cache = {}
_global_cache_updated = False
_database_available = None  # None = –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, True = –¥–æ—Å—Ç—É–ø–Ω–∞, False = –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
_cache_lock = asyncio.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
_last_cache_update = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
CACHE_TTL = 300  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
REDIS_CACHE_KEY = "user_roles_cache"

class RoleMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
        self.redis_manager = RedisManager() if REDIS_ENABLED else None

    async def _check_database_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        global _database_available

        try:
            from database import get_db_session
            async with get_db_session() as session:
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                await session.execute(text("SELECT 1"))
                _database_available = True
                return True
        except Exception as e:
            print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            _database_available = False
            return False

    async def _load_from_redis(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à —Ä–æ–ª–µ–π –∏–∑ Redis"""
        global _global_role_cache, _global_cache_updated, _last_cache_update

        if not self.redis_manager or not self.redis_manager.connected:
            return False

        try:
            import json
            cached_data = await self.redis_manager.get(REDIS_CACHE_KEY)
            if cached_data:
                cache_info = json.loads(cached_data)
                _global_role_cache = cache_info['roles']
                _global_cache_updated = True
                _last_cache_update = cache_info['timestamp']
                logging.info(f"‚úÖ –†–æ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Redis –∫—ç—à–∞ ({len(sum(_global_role_cache.values(), []))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
                return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Redis: {e}")

        return False

    async def _save_to_redis(self, roles_cache: dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à —Ä–æ–ª–µ–π –≤ Redis"""
        if not self.redis_manager or not self.redis_manager.connected:
            return False

        try:
            import json
            cache_data = {
                'roles': roles_cache,
                'timestamp': time.time()
            }
            await self.redis_manager.set(REDIS_CACHE_KEY, json.dumps(cache_data), CACHE_TTL)
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis: {e}")
            return False

    async def _update_role_cache(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        global _global_role_cache, _global_cache_updated, _database_available, _last_cache_update

        current_time = time.time()

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Redis
        if await self._load_from_redis():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à
            if (current_time - _last_cache_update) < CACHE_TTL:
                return  # –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        async with _cache_lock:
            # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if _global_cache_updated and (current_time - _last_cache_update) < CACHE_TTL:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
            if _database_available is None:
                if not await self._check_database_availability():
                    return

            if _database_available is False:
                return

            try:
                from database import get_db_session, User
                from sqlalchemy import select

                async with get_db_session() as session:
                    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                    result = await session.execute(
                        select(User.telegram_id, User.role).where(User.role.in_([
                            'admin', 'manager', 'curator', 'teacher', 'student'
                        ]))
                    )
                    users_data = result.all()

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
                    new_cache = {
                        'admin': [],
                        'manager': [],
                        'curator': [],
                        'teacher': [],
                        'student': []
                    }

                    for telegram_id, role in users_data:
                        if role in new_cache:
                            new_cache[role].append(telegram_id)

                    # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
                    _global_role_cache = new_cache
                    _global_cache_updated = True
                    _last_cache_update = current_time

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
                    await self._save_to_redis(new_cache)

                    logging.info(f"üîÑ –ö—ç—à —Ä–æ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –ë–î ({len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ä–æ–ª–µ–π: {e}")
                _database_available = False
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if not _global_role_cache:
                    _global_role_cache = {
                        'admin': [],
                        'manager': [],
                        'curator': [],
                        'teacher': [],
                        'student': []
                    }

    async def __call__(
        self,
        handler: Callable[[Message | CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        global _global_role_cache, _global_cache_updated, _database_available

        user_id = event.from_user.id

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
        current_time = time.time()
        cache_expired = (current_time - _last_cache_update) >= CACHE_TTL

        if (not _global_cache_updated or cache_expired) and _database_available is not False:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            asyncio.create_task(self._update_role_cache())

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ ID –∏–∑ –∫—ç—à–∞
        role = "student"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π –∏–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–¥–∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if (_database_available is False or
            not _global_role_cache or
            all(not users for users in _global_role_cache.values())):
            # –•–∞—Ä–¥–∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞
            if user_id in [955518340, 5205775566]:  # –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤
                role = "admin"
            else:
                role = "student"
        else:
            # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ä–æ–ª–∏ –≤ –∫—ç—à–µ
            for role_name, user_ids in _global_role_cache.items():
                if user_id in user_ids:
                    role = role_name
                    break

        # –£–±–∏—Ä–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π print, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ async logging —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # logging.debug(f"MIDDLEWARE: User {user_id} -> Role: {role}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        data["user_role"] = role
        data["user_id"] = user_id

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
        return await handler(event, data)


async def force_update_role_cache():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ä–æ–ª–µ–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    global _global_role_cache, _global_cache_updated, _last_cache_update

    try:
        from database import get_db_session, User
        from sqlalchemy import select

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Redis –º–µ—Ç–æ–¥–∞–º
        temp_middleware = RoleMiddleware()

        async with get_db_session() as session:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            result = await session.execute(
                select(User.telegram_id, User.role).where(User.role.in_([
                    'admin', 'manager', 'curator', 'teacher', 'student'
                ]))
            )
            users_data = result.all()

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
            new_cache = {
                'admin': [],
                'manager': [],
                'curator': [],
                'teacher': [],
                'student': []
            }

            for telegram_id, role in users_data:
                if role in new_cache:
                    new_cache[role].append(telegram_id)

            # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
            _global_role_cache = new_cache
            _global_cache_updated = True
            _last_cache_update = time.time()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            await temp_middleware._save_to_redis(new_cache)

            logging.info(f"üîÑ –ö—ç—à —Ä–æ–ª–µ–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω ({len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ä–æ–ª–µ–π: {e}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
        _global_role_cache = {
            'admin': [],
            'manager': [],
            'curator': [],
            'teacher': [],
            'student': []
        }

async def clear_role_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ä–æ–ª–µ–π (–∏ –≤ Redis —Ç–æ–∂–µ)"""
    global _global_role_cache, _global_cache_updated

    _global_role_cache = {}
    _global_cache_updated = False

    # –û—á–∏—â–∞–µ–º Redis
    if REDIS_ENABLED:
        try:
            redis_manager = RedisManager()
            if redis_manager.connected:
                await redis_manager.delete(REDIS_CACHE_KEY)
                logging.info("üóëÔ∏è –ö—ç—à —Ä–æ–ª–µ–π –æ—á–∏—â–µ–Ω –∏–∑ Redis")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis –∫—ç—à–∞: {e}")