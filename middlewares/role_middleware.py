from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from sqlalchemy.sql.expression import text

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à —Ä–æ–ª–µ–π (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ middleware)
_global_role_cache = {}
_global_cache_updated = False
_database_available = None  # None = –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, True = –¥–æ—Å—Ç—É–ø–Ω–∞, False = –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

class RoleMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
        pass

    async def _check_database_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        global _database_available

        try:
            from database import get_db_session
            async with get_db_session() as session:
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                await session.execute(text("SELECT 1"))
                _database_available = True
                return True
        except Exception as e:
            print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            _database_available = False
            return False

    async def _update_role_cache(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        global _global_role_cache, _global_cache_updated, _database_available

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏
        if _database_available is None:
            if not await self._check_database_availability():
                return

        # –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
        if _database_available is False:
            return

        try:
            from database import get_db_session, User
            from sqlalchemy import select

            async with get_db_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                result = await session.execute(select(User))
                all_users = result.scalars().all()

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
                _global_role_cache = {
                    'admin': [],
                    'manager': [],
                    'curator': [],
                    'teacher': [],
                    'student': []
                }

                for user in all_users:
                    if user.role in _global_role_cache:
                        _global_role_cache[user.role].append(user.telegram_id)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                _global_cache_updated = True

                print(f"üîÑ –ö—ç—à —Ä–æ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω:")
                for role, ids in _global_role_cache.items():
                    if ids:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Ä–æ–ª–∏
                        print(f"  {role}: {ids}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ä–æ–ª–µ–π: {e}")
            # –ü–æ–º–µ—á–∞–µ–º –ë–î –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é
            _database_available = False
            # –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
            _global_role_cache = {
                'admin': [],
                'manager': [],
                'curator': [],
                'teacher': [],
                'student': []
            }

    async def __call__(
        self,
        handler: Callable[[Message | CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        global _global_role_cache, _global_cache_updated, _database_available

        user_id = event.from_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)
        if not _global_cache_updated and _database_available is not False:
            await self._update_role_cache()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ ID –∏–∑ –∫—ç—à–∞
        role = "student"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π –∏–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–¥–∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if (_database_available is False or
            not _global_role_cache or
            all(not users for users in _global_role_cache.values())):
            # –•–∞—Ä–¥–∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
            if user_id in [955518340, 5205775566]:  # –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤
                role = "admin"
            else:
                role = "student"
        else:
            # –ò—â–µ–º —Ä–æ–ª—å –≤ –∫—ç—à–µ
            for role_name, user_ids in _global_role_cache.items():
                if user_id in user_ids:
                    role = role_name
                    break

        print(f"üîç MIDDLEWARE: User ID: {user_id} -> Role: {role} (DB: {_database_available})")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        data["user_role"] = role
        data["user_id"] = user_id

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
        return await handler(event, data)


async def force_update_role_cache():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ä–æ–ª–µ–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    global _global_role_cache, _global_cache_updated

    try:
        from database import get_db_session, User
        from sqlalchemy import select

        async with get_db_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(select(User))
            all_users = result.scalars().all()

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
            _global_role_cache = {
                'admin': [],
                'manager': [],
                'curator': [],
                'teacher': [],
                'student': []
            }

            for user in all_users:
                if user.role in _global_role_cache:
                    _global_role_cache[user.role].append(user.telegram_id)

            print(f"üîÑ –ö—ç—à —Ä–æ–ª–µ–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:")
            for role, ids in _global_role_cache.items():
                if ids:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Ä–æ–ª–∏
                    print(f"  {role}: {ids}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ä–æ–ª–µ–π: {e}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
        _global_role_cache = {
            'admin': [],
            'manager': [],
            'curator': [],
            'teacher': [],
            'student': []
        }