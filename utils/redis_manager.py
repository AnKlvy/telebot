"""
Redis –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
import json
import pickle
import logging
from typing import Any, Optional, Dict, List
from datetime import timedelta
import redis.asyncio as redis
from os import getenv
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
REDIS_HOST = getenv("REDIS_HOST", "redis")
REDIS_PORT = int(getenv("REDIS_PORT", "6379"))
REDIS_DB = int(getenv("REDIS_DB", "0"))
REDIS_PASSWORD = getenv("REDIS_PASSWORD", None)

# TTL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
DEFAULT_TTL = 3600  # 1 —á–∞—Å
ROLE_CACHE_TTL = 1800  # 30 –º–∏–Ω—É—Ç –¥–ª—è —Ä–æ–ª–µ–π
KEYBOARD_CACHE_TTL = 600  # 10 –º–∏–Ω—É—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
FSM_STATE_TTL = 86400  # 24 —á–∞—Å–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM

class RedisManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis"""
    
    def __init__(self):
        self.redis: Optional[redis.Redis] = None
        self.connected = False
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            self.redis = redis.from_url(
                f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}",
                password=REDIS_PASSWORD,
                encoding="utf-8",
                decode_responses=False,  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å pickle
                socket_connect_timeout=5,
                socket_timeout=5,
                retry_on_timeout=True,
                health_check_interval=30
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await self.redis.ping()
            self.connected = True
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            self.connected = False
            self.redis = None
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        if self.redis:
            await self.redis.close()
            self.connected = False
            logger.info("üîå Redis –æ—Ç–∫–ª—é—á–µ–Ω")
    
    async def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis"""
        if not self.redis or not self.connected:
            return False
        
        try:
            await self.redis.ping()
            return True
        except Exception:
            self.connected = False
            return False
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø FSM –°–û–°–¢–û–Ø–ù–ò–ô ===
    
    async def set_fsm_state(self, user_id: int, chat_id: int, state: str, data: Dict = None, ttl: int = FSM_STATE_TTL):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM"""
        if not await self.is_connected():
            return False
        
        try:
            state_key = f"fsm_state:{user_id}:{chat_id}"
            data_key = f"fsm_data:{user_id}:{chat_id}"
            
            await self.redis.setex(state_key, ttl, state)
            if data:
                await self.redis.setex(data_key, ttl, json.dumps(data))
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è {user_id}:{chat_id}: {e}")
            return False
    
    async def get_fsm_state(self, user_id: int, chat_id: int) -> tuple[Optional[str], Optional[Dict]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM"""
        if not await self.is_connected():
            return None, None
        
        try:
            state_key = f"fsm_state:{user_id}:{chat_id}"
            data_key = f"fsm_data:{user_id}:{chat_id}"
            
            state = await self.redis.get(state_key)
            data = await self.redis.get(data_key)
            
            state_str = state.decode('utf-8') if state else None
            data_dict = json.loads(data.decode('utf-8')) if data else None
            
            return state_str, data_dict
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è {user_id}:{chat_id}: {e}")
            return None, None
    
    async def clear_fsm_state(self, user_id: int, chat_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM"""
        if not await self.is_connected():
            return False
        
        try:
            state_key = f"fsm_state:{user_id}:{chat_id}"
            data_key = f"fsm_data:{user_id}:{chat_id}"
            
            await self.redis.delete(state_key, data_key)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è {user_id}:{chat_id}: {e}")
            return False
    
    # === –û–ë–©–ò–ï –ú–ï–¢–û–î–´ ===
    
    async def set(self, key: str, value: str, ttl: int = DEFAULT_TTL):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"""
        if not await self.is_connected():
            return False
        
        try:
            await self.redis.setex(key, ttl, value)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è {key}: {e}")
            return False
    
    async def get(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"""
        if not await self.is_connected():
            return None
        
        try:
            value = await self.redis.get(key)
            return value.decode('utf-8') if value else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è {key}: {e}")
            return None
    
    async def delete(self, *keys: str):
        """–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–∏"""
        if not await self.is_connected():
            return False
        
        try:
            await self.redis.delete(*keys)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π {keys}: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis –º–µ–Ω–µ–¥–∂–µ—Ä–∞
redis_manager = RedisManager()
