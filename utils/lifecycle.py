"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞ (startup/shutdown)
"""
import logging
import time
from datetime import datetime, timedelta
from aiogram import Bot
from aiogram.types import BotCommand
from database import init_database, close_database
from utils.config import WEBHOOK_MODE, WEBHOOK_URL, REDIS_ENABLED
from utils.redis_manager import RedisManager


async def on_startup(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        logging.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if REDIS_ENABLED:
        try:
            redis_manager = RedisManager()
            await redis_manager.connect()
            if redis_manager.connected:
                logging.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logging.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="admin", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="curator", description="–ú–µ–Ω—é –∫—É—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="teacher", description="–ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="manager", description="–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞"),
        BotCommand(command="student", description="–ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞")
    ]
    
    try:
        await bot.set_my_commands(commands)
        logging.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    if WEBHOOK_MODE:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        logging.info(f"üîó –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook...")
        logging.info(f"üåê WEBHOOK_URL: {WEBHOOK_URL}")
        logging.info(f"üîß WEBHOOK_MODE: {WEBHOOK_MODE}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π webhook
        import socket
        try:
            domain = WEBHOOK_URL.replace('https://', '').replace('http://', '').split('/')[0]
            logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS –¥–ª—è –¥–æ–º–µ–Ω–∞: {domain}")
            ip = socket.gethostbyname(domain)
            logging.info(f"‚úÖ DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {domain} -> {ip}")
        except Exception as dns_error:
            logging.error(f"‚ùå DNS –æ—à–∏–±–∫–∞ –¥–ª—è {domain}: {dns_error}")
            logging.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS –≤ docker-compose.yml")

        try:
            logging.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook: {WEBHOOK_URL}")
            await bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: {WEBHOOK_URL}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            logging.error(f"üîß URL: {WEBHOOK_URL}")
            logging.error(f"üîß –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            raise
    else:
        # –£–¥–∞–ª—è–µ–º webhook –¥–ª—è polling —Ä–µ–∂–∏–º–∞
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logging.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")


async def on_shutdown(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    try:
        await close_database()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ë–î: {e}")
    
    if WEBHOOK_MODE:
        try:
            await bot.delete_webhook()
            logging.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è health check –ª–æ–≥–æ–≤
_last_health_log_time = 0
_health_log_interval = 30 * 60  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def health_check(request):
    """Healthcheck —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å —É–º–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    from aiohttp import web
    global _last_health_log_time

    current_time = time.time()
    should_log = False
    status_code = 200
    response_text = "OK"

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from database import get_db_session
        async with get_db_session() as session:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            from sqlalchemy import text
            await session.execute(text("SELECT 1"))

        # –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ - –ª–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
        if current_time - _last_health_log_time >= _health_log_interval:
            should_log = True
            _last_health_log_time = current_time

    except Exception as e:
        # –ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î - –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º
        should_log = True
        status_code = 503
        response_text = f"Database Error: {str(e)}"
        logging.error(f"‚ùå Health check failed: {e}")

    if should_log and status_code == 200:
        logging.info(f"‚úÖ Health check OK (—Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç)")

    return web.Response(text=response_text, status=status_code)
