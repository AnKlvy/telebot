"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from typing import Dict, Optional
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Message
from aiogram import Bot


class KeyboardManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–æ–ª–µ–π"""
    
    def __init__(self):
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        self.admin_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–∞–¥–º–∏–Ω")],
                [KeyboardButton(text="–º–µ–Ω–µ–¥–∂–µ—Ä"), KeyboardButton(text="–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")],
                [KeyboardButton(text="–∫—É—Ä–∞—Ç–æ—Ä"), KeyboardButton(text="—É—á–µ–Ω–∏–∫")]
            ],
            resize_keyboard=True,
            persistent=True
        )
        
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        self.remove_keyboard = ReplyKeyboardRemove()
        
        # –ö—ç—à —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._user_keyboards: Dict[int, str] = {}
    
    async def set_keyboard_for_role(self, bot: Bot, user_id: int, role: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            current_role = self._user_keyboards.get(user_id)
            if current_role == role:
                logging.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–æ–ª–∏ {role}")
                return True
            
            if role == "admin":
                # –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await bot.send_message(
                    chat_id=user_id,
                    text="üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω! –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                    reply_markup=self.admin_keyboard
                )
                logging.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ set_chat_menu_button
                from aiogram.types import MenuButtonDefault
                await bot.set_chat_menu_button(
                    chat_id=user_id,
                    menu_button=MenuButtonDefault()
                )
                logging.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—Ä–æ–ª—å: {role})")
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å
            self._user_keyboards[user_id] = role
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def force_update_keyboard(self, bot: Bot, user_id: int, role: str) -> bool:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à)
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        """
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self._user_keyboards:
            del self._user_keyboards[user_id]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        return await self.set_keyboard_for_role(bot, user_id, role)
    
    def get_keyboard_for_role(self, role: str):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–æ–ª–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ reply_markup)
        
        Args:
            role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            ReplyKeyboardMarkup –∏–ª–∏ ReplyKeyboardRemove
        """
        if role == "admin":
            return self.admin_keyboard
        else:
            return self.remove_keyboard
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        self._user_keyboards.clear()
        logging.info("üóëÔ∏è –ö—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä –æ—á–∏—â–µ–Ω")
    
    def get_cache_info(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—ç—à–µ
        """
        return {
            "total_users": len(self._user_keyboards),
            "admin_users": len([r for r in self._user_keyboards.values() if r == "admin"]),
            "other_users": len([r for r in self._user_keyboards.values() if r != "admin"])
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
keyboard_manager = KeyboardManager()


async def update_user_keyboard_after_role_change(user_id: int, new_role: str):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_role: –ù–æ–≤–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        from aiogram import Bot
        from utils.config import TOKEN
        
        bot = Bot(token=TOKEN)
        success = await keyboard_manager.force_update_keyboard(bot, user_id, new_role)
        await bot.session.close()
        
        if success:
            logging.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –Ω–æ–≤–æ–π —Ä–æ–ª—å—é '{new_role}'")
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
