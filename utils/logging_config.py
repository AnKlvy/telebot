"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import logging
import sys
import os
from datetime import datetime


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("logs", exist_ok=True)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = "%(asctime)s | %(levelname)-8s | %(name)-20s | %(message)s"
    date_format = "%Y-%m-%d %H:%M:%S"
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Ü–≤–µ—Ç–Ω–æ–π)
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    class ColoredFormatter(logging.Formatter):
        COLORS = {
            'DEBUG': '36m',    # Cyan
            'INFO': '32m',     # Green  
            'WARNING': '33m',  # Yellow
            'ERROR': '31m',    # Red
            'CRITICAL': '35m'  # Magenta
        }
        
        def format(self, record):
            record.color = self.COLORS.get(record.levelname, '37m')  # Default white
            return super().format(record)
    
    console_handler.setFormatter(ColoredFormatter(
        "%(asctime)s | \033[%(color)s%(levelname)-8s\033[0m | %(name)-20s | %(message)s",
        datefmt=date_format
    ))
    logger.addHandler(console_handler)
    
    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ (–≤—Å–µ –ª–æ–≥–∏)
    today = datetime.now().strftime("%Y-%m-%d")
    file_handler = logging.FileHandler(f"logs/bot_{today}.log", encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter(log_format, datefmt=date_format))
    logger.addHandler(file_handler)
    
    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ –æ—à–∏–±–æ–∫
    error_handler = logging.FileHandler(f"logs/errors_{today}.log", encoding='utf-8')
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(logging.Formatter(log_format, datefmt=date_format))
    logger.addHandler(error_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è aiohttp.access –ª–æ–≥–æ–≤
    class HealthCheckFilter(logging.Filter):
        """–§–∏–ª—å—Ç—Ä –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —É—Å–ø–µ—à–Ω—ã—Ö health check –∑–∞–ø—Ä–æ—Å–æ–≤"""
        def filter(self, record):
            # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ GET /health –∑–∞–ø—Ä–æ—Å—ã (200 —Å—Ç–∞—Ç—É—Å)
            if hasattr(record, 'getMessage'):
                message = record.getMessage()
                if '/health' in message and ' 200 ' in message and 'GET' in message:
                    return False
            return True

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ aiohttp.access –ª–æ–≥–≥–µ—Ä—É
    aiohttp_logger = logging.getLogger('aiohttp.access')
    aiohttp_logger.addFilter(HealthCheckFilter())

    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç
    logging.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    logging.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: logs/bot_{today}.log")
    logging.info(f"üìÅ –û—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: logs/errors_{today}.log")
    logging.info("üîá Health check –ª–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è (—Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç)")
