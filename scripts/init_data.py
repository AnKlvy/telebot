"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import (
    init_database, 
    UserRepository, 
    CourseRepository, 
    SubjectRepository
)


async def add_initial_data():
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_database()
    
    print("üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...")
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã
    try:
        course_ent = await CourseRepository.create("–ï–ù–¢")
        course_it = await CourseRepository.create("IT")
        print(f"‚úÖ –ö—É—Ä—Å '{course_ent.name}' —Å–æ–∑–¥–∞–Ω (ID: {course_ent.id})")
        print(f"‚úÖ –ö—É—Ä—Å '{course_it.name}' —Å–æ–∑–¥–∞–Ω (ID: {course_it.id})")
    except Exception as e:
        print(f"‚ö†Ô∏è –ö—É—Ä—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É—Ä—Å—ã
        courses = await CourseRepository.get_all()
        course_ent = next((c for c in courses if c.name == "–ï–ù–¢"), None)
        course_it = next((c for c in courses if c.name == "IT"), None)

    print("üìñ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    all_subjects = [
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "–§–∏–∑–∏–∫–∞",
        "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "–•–∏–º–∏—è",
        "–ë–∏–æ–ª–æ–≥–∏—è",
        "Python",
        "JavaScript",
        "Java"
    ]

    created_subjects = {}
    for subject_name in all_subjects:
        try:
            subject = await SubjectRepository.create(subject_name)
            created_subjects[subject_name] = subject
            print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject.name}' —Å–æ–∑–¥–∞–Ω (ID: {subject.id})")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç
            all_existing = await SubjectRepository.get_all()
            existing_subject = next((s for s in all_existing if s.name == subject_name), None)
            if existing_subject:
                created_subjects[subject_name] = existing_subject

    print("üîó –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫ –∫—É—Ä—Å–∞–º...")
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∫ –∫—É—Ä—Å—É –ï–ù–¢
    if course_ent:
        ent_subjects = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è"]
        for subject_name in ent_subjects:
            if subject_name in created_subjects:
                success = await SubjectRepository.add_to_course(created_subjects[subject_name].id, course_ent.id)
                if success:
                    print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É –ï–ù–¢")

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∫ –∫—É—Ä—Å—É IT
    if course_it:
        it_subjects = ["Python", "JavaScript", "Java", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Ç–æ–∂–µ –Ω—É–∂–Ω–∞ –≤ IT
        for subject_name in it_subjects:
            if subject_name in created_subjects:
                success = await SubjectRepository.add_to_course(created_subjects[subject_name].id, course_it.id)
                if success:
                    print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É IT")
    
    print("üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [
        (123456789, "–ê–¥–º–∏–Ω –¢–µ—Å—Ç–æ–≤—ã–π", "admin"),
        (987654321, "–ú–µ–Ω–µ–¥–∂–µ—Ä –¢–µ—Å—Ç–æ–≤—ã–π", "manager"),
        (111222333, "–ö—É—Ä–∞—Ç–æ—Ä –¢–µ—Å—Ç–æ–≤—ã–π", "curator"),
        (444555666, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¢–µ—Å—Ç–æ–≤—ã–π", "teacher"),
        (777888999, "–°—Ç—É–¥–µ–Ω—Ç –¢–µ—Å—Ç–æ–≤—ã–π", "student"),
    ]
    
    for telegram_id, name, role in test_users:
        try:
            user = await UserRepository.create(telegram_id, name, role)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user.name}' ({user.role}) —Å–æ–∑–¥–∞–Ω (Telegram ID: {user.telegram_id})")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
    
    print("üéâ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(add_initial_data())
