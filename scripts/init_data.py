"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import (
    init_database,
    UserRepository,
    CourseRepository,
    SubjectRepository,
    GroupRepository,
    StudentRepository,
    CuratorRepository,
    TeacherRepository,
    ManagerRepository,
    MicrotopicRepository,
    LessonRepository,
    HomeworkRepository,
    QuestionRepository,
    AnswerOptionRepository,
    MonthTestRepository,
    MonthTestMicrotopicRepository,
    BonusTestRepository,
    BonusQuestionRepository,
    BonusAnswerOptionRepository,
    HomeworkResultRepository,
    QuestionResultRepository,
    get_db_session
)
from database.models import Microtopic, Subject
from sqlalchemy import text, select
from sqlalchemy.exc import IntegrityError


async def migrate_microtopics():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ç–µ–º: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è number –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ç–µ–º...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ number
    async with get_db_session() as session:
        try:
            await session.execute(text("SELECT number FROM microtopics LIMIT 1"))
            print("‚úÖ –ü–æ–ª–µ 'number' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ microtopics")
            return  # –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        except Exception:
            print("üìù –ü–æ–ª–µ 'number' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ number –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async with get_db_session() as session:
        try:
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ 'number' –≤ —Ç–∞–±–ª–∏—Ü—É microtopics...")
            await session.execute(text("ALTER TABLE microtopics ADD COLUMN number INTEGER"))
            await session.commit()
            print("‚úÖ –ü–æ–ª–µ 'number' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è 'number': {e}")
            await session.rollback()
            return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async with get_db_session() as session:
        try:
            # 3. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            subjects_result = await session.execute(select(Subject))
            subjects = subjects_result.scalars().all()

            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(subjects)}")

            # 4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω—É–º–µ—Ä—É–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for subject in subjects:
                print(f"üî¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç: {subject.name}")

                # –ü–æ–ª—É—á–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—ã –ø—Ä–µ–¥–º–µ—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ ID (–ø–æ—Ä—è–¥–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è)
                microtopics_result = await session.execute(
                    select(Microtopic)
                    .where(Microtopic.subject_id == subject.id)
                    .order_by(Microtopic.id)
                )
                microtopics = microtopics_result.scalars().all()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
                seen_names = {}
                renamed_count = 0

                for microtopic in microtopics:
                    original_name = microtopic.name

                    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
                    if original_name in seen_names:
                        seen_names[original_name] += 1
                        new_name = f"{original_name} ({seen_names[original_name]})"
                        microtopic.name = new_name
                        renamed_count += 1
                        print(f"  üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: '{original_name}' ‚Üí '{new_name}'")
                    else:
                        seen_names[original_name] = 1

                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞
                for i, microtopic in enumerate(microtopics, 1):
                    if microtopic.number is None:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –µ—â–µ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω
                        microtopic.number = i
                        print(f"  üìå –ú–∏–∫—Ä–æ—Ç–µ–º–∞ '{microtopic.name}' ‚Üí –Ω–æ–º–µ—Ä {i}")

                await session.commit()

                if renamed_count > 0:
                    print(f"üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {renamed_count}")
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∏–∫—Ä–æ—Ç–µ–º –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}': {len(microtopics)}")

            print("üéâ –ù—É–º–µ—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ç–µ–º: {e}")
            await session.rollback()
            raise

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async with get_db_session() as session:
        try:
            # 5. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                await session.execute(text("ALTER TABLE microtopics DROP CONSTRAINT unique_microtopic_per_subject"))
                await session.commit()
                print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏")
            except Exception:
                print("‚ÑπÔ∏è –°—Ç–∞—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            # 6. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É
            try:
                await session.execute(text(
                    "ALTER TABLE microtopics ADD CONSTRAINT unique_microtopic_number_per_subject "
                    "UNIQUE (number, subject_id)"
                ))
                await session.commit()
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É")
            except IntegrityError:
                print("‚ÑπÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # 7. –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            try:
                await session.execute(text(
                    "ALTER TABLE microtopics ADD CONSTRAINT unique_microtopic_name_per_subject "
                    "UNIQUE (name, subject_id)"
                ))
                await session.commit()
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
            except IntegrityError:
                print("‚ÑπÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # 8. –î–µ–ª–∞–µ–º –ø–æ–ª–µ number –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
            try:
                await session.execute(text("ALTER TABLE microtopics ALTER COLUMN number SET NOT NULL"))
                await session.commit()
                print("‚úÖ –ü–æ–ª–µ 'number' —Å–¥–µ–ª–∞–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–µ 'number' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º: {e}")

            print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
            await session.rollback()
            raise


async def add_initial_data():
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_database()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –º–∏–∫—Ä–æ—Ç–µ–º
    await migrate_microtopics()
    
    print("üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...")
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É—Ä—Å—ã
    existing_courses = await CourseRepository.get_all()
    existing_course_names = {course.name: course for course in existing_courses}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫—É—Ä—Å –ï–ù–¢
    if "–ï–ù–¢" in existing_course_names:
        course_ent = existing_course_names["–ï–ù–¢"]
        print(f"‚ö†Ô∏è –ö—É—Ä—Å '–ï–ù–¢' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {course_ent.id})")
    else:
        try:
            course_ent = await CourseRepository.create("–ï–ù–¢")
            print(f"‚úÖ –ö—É—Ä—Å '{course_ent.name}' —Å–æ–∑–¥–∞–Ω (ID: {course_ent.id})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞ '–ï–ù–¢': {e}")
            course_ent = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫—É—Ä—Å IT
    if "IT" in existing_course_names:
        course_it = existing_course_names["IT"]
        print(f"‚ö†Ô∏è –ö—É—Ä—Å 'IT' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {course_it.id})")
    else:
        try:
            course_it = await CourseRepository.create("IT")
            print(f"‚úÖ –ö—É—Ä—Å '{course_it.name}' —Å–æ–∑–¥–∞–Ω (ID: {course_it.id})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞ 'IT': {e}")
            course_it = None

    print("üìñ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    all_subjects = [
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "–§–∏–∑–∏–∫–∞",
        "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "–•–∏–º–∏—è",
        "–ë–∏–æ–ª–æ–≥–∏—è",
        "Python",
        "JavaScript",
        "Java"
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    existing_subjects = await SubjectRepository.get_all()
    existing_subject_names = {subject.name: subject for subject in existing_subjects}

    created_subjects = {}
    for subject_name in all_subjects:
        if subject_name in existing_subject_names:
            created_subjects[subject_name] = existing_subject_names[subject_name]
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_subject_names[subject_name].id})")
        else:
            try:
                subject = await SubjectRepository.create(subject_name)
                created_subjects[subject_name] = subject
                print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject.name}' —Å–æ–∑–¥–∞–Ω (ID: {subject.id})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}': {e}")

    print("üîó –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫ –∫—É—Ä—Å–∞–º...")
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∫ –∫—É—Ä—Å—É –ï–ù–¢
    if course_ent:
        ent_subjects = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è"]
        for subject_name in ent_subjects:
            if subject_name in created_subjects:
                success = await SubjectRepository.add_to_course(created_subjects[subject_name].id, course_ent.id)
                if success:
                    print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É –ï–ù–¢")

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∫ –∫—É—Ä—Å—É IT
    if course_it:
        it_subjects = ["Python", "JavaScript", "Java", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Ç–æ–∂–µ –Ω—É–∂–Ω–∞ –≤ IT
        for subject_name in it_subjects:
            if subject_name in created_subjects:
                success = await SubjectRepository.add_to_course(created_subjects[subject_name].id, course_it.id)
                if success:
                    print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É IT")
    
    print("üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [
        (955518340, "–ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤", "admin"),
        (5205775566, "–ú–∞–¥–∏—è—Ä –°–∞–ø–∞—Ä–æ–≤", "admin"),
        (7265679697, "–ú–µ–¥–∏–Ω–∞ –ú–∞—Ö–∞–º–±–µ—Ç", "manager"),
        (111222333, "–ö—É—Ä–∞—Ç–æ—Ä –¢–µ—Å—Ç–æ–≤—ã–π", "curator"),
        (444555666, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¢–µ—Å—Ç–æ–≤—ã–π", "teacher"),
        (777888999, "–°—Ç—É–¥–µ–Ω—Ç –¢–µ—Å—Ç–æ–≤—ã–π", "student"),
    ]

    for telegram_id, name, role in test_users:
        try:
            user = await UserRepository.create(telegram_id, name, role)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user.name}' ({user.role}) —Å–æ–∑–¥–∞–Ω (Telegram ID: {user.telegram_id})")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")

    print("üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø...")
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    test_groups = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": ["–ú–ê–¢-1", "–ú–ê–¢-2", "–ú–ê–¢-3"],
        "–§–∏–∑–∏–∫–∞": ["–§–ò–ó-1", "–§–ò–ó-2"],
        "Python": ["PY-1", "PY-2", "PY-3"],
        "–•–∏–º–∏—è": ["–•–ò–ú-1", "–•–ò–ú-2"],
        "–ë–∏–æ–ª–æ–≥–∏—è": ["–ë–ò–û-1", "–ë–ò–û-2", "–ë–ò–û-3"],
        "JavaScript": ["JS-1", "JS-2"],
        "Java": ["JAVA-1", "JAVA-2"],
        "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞": ["–ò–°–¢-1", "–ò–°–¢-2"]
    }

    created_groups_count = 0

    for subject_name, group_names in test_groups.items():
        if subject_name in created_subjects:
            subject = created_subjects[subject_name]
            print(f"üìö –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}':")

            for group_name in group_names:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
                    existing_groups = await GroupRepository.get_by_subject(subject.id)
                    if any(g.name == group_name for g in existing_groups):
                        print(f"   ‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ '{group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        continue

                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                    group = await GroupRepository.create(group_name, subject.id)
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ '{group.name}' (ID: {group.id})")
                    created_groups_count += 1

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã '{group_name}': {e}")

    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {created_groups_count}")

    print("üéì –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    test_students = [
        {
            "name": "–ú—É—Ö–∞–Ω–±–µ—Ç–∂–∞–Ω –û–ª–∂–∞—Å",
            "telegram_id": 1023397024,
            "group_name": "–ú–ê–¢-1",
            "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "tariff": "premium"
        },
        {
            "name": "–ê—Ä—É–∂–∞–Ω –ê—Ö–º–µ—Ç–æ–≤–∞",
            "telegram_id": 111111111,
            "group_name": "–•–ò–ú-1",
            "subject_name": "–•–∏–º–∏—è",
            "tariff": "standard"
        },
        {
            "name": "–ê–π—Å—É–ª—É –ù—É—Ä–±–µ–∫–æ–≤–∞",
            "telegram_id": 333444555,
            "group_name": "–ë–ò–û-1",
            "subject_name": "–ë–∏–æ–ª–æ–≥–∏—è",
            "tariff": "premium"
        },
        {
            "name": "–î–∏–∞–Ω–∞ –ï—Ä–∂–∞–Ω–æ–≤–∞",
            "telegram_id": 333333333,
            "group_name": "PY-1",
            "subject_name": "Python",
            "tariff": "standard"
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
        {
            "name": "–ê–ª–∏—è –ù—É—Ä–ª–∞–Ω–æ–≤–∞",
            "telegram_id": 444444445,
            "group_name": "–ú–ê–¢-2",
            "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "tariff": "premium"
        },
        {
            "name": "–ï—Ä–ª–∞–Ω –ö–∞—Å—ã–º–æ–≤",
            "telegram_id": 555555556,
            "group_name": "–ú–ê–¢-3",
            "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "tariff": "standard"
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è —Ö–∏–º–∏–∏
        {
            "name": "–ñ–∞–Ω–∞—Ä–∞ –û–º–∞—Ä–æ–≤–∞",
            "telegram_id": 666666667,
            "group_name": "–•–ò–ú-2",
            "subject_name": "–•–∏–º–∏—è",
            "tariff": "premium"
        },
        {
            "name": "–î–∞–Ω–∏—è—Ä –ê–±–¥—É–ª–ª–∞–µ–≤",
            "telegram_id": 777777778,
            "group_name": "–•–ò–ú-1",
            "subject_name": "–•–∏–º–∏—è",
            "tariff": "standard"
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è –±–∏–æ–ª–æ–≥–∏–∏
        {
            "name": "–ê–π–≥–µ—Ä–∏–º –¢–æ–∫—Ç–∞—Ä–æ–≤–∞",
            "telegram_id": 888888889,
            "group_name": "–ë–ò–û-2",
            "subject_name": "–ë–∏–æ–ª–æ–≥–∏—è",
            "tariff": "premium"
        },
        {
            "name": "–ù—É—Ä–ª–∞–Ω –ñ—É–º–∞–±–µ–∫–æ–≤",
            "telegram_id": 999999990,
            "group_name": "–ë–ò–û-3",
            "subject_name": "–ë–∏–æ–ª–æ–≥–∏—è",
            "tariff": "standard"
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è —Ñ–∏–∑–∏–∫–∏
        {
            "name": "–ê—Å–µ–ª—å –ú—É—Ö–∞–º–µ–¥–æ–≤–∞",
            "telegram_id": 101010101,
            "group_name": "–§–ò–ó-1",
            "subject_name": "–§–∏–∑–∏–∫–∞",
            "tariff": "premium"
        },
        {
            "name": "–ë–∞—É—ã—Ä–∂–∞–Ω –°–µ–π—Ç–æ–≤",
            "telegram_id": 121212121,
            "group_name": "–§–ò–ó-2",
            "subject_name": "–§–∏–∑–∏–∫–∞",
            "tariff": "standard"
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è Python
        {
            "name": "–ö–∞–º–∏–ª–∞ –†–∞—Ö–∏–º–æ–≤–∞",
            "telegram_id": 131313131,
            "group_name": "PY-2",
            "subject_name": "Python",
            "tariff": "premium"
        },
        {
            "name": "–ê—Ä–º–∞–Ω –î–æ—Å–∂–∞–Ω–æ–≤",
            "telegram_id": 141414141,
            "group_name": "PY-3",
            "subject_name": "Python",
            "tariff": "standard"
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è JavaScript
        {
            "name": "–°–∞–±–∏–Ω–∞ –ö–∞–ª–∏–µ–≤–∞",
            "telegram_id": 151515151,
            "group_name": "JS-1",
            "subject_name": "JavaScript",
            "tariff": "premium"
        },
        {
            "name": "–¢–µ–º–∏—Ä–ª–∞–Ω –ê—Ö–º–µ—Ç–æ–≤",
            "telegram_id": 161616161,
            "group_name": "JS-2",
            "subject_name": "JavaScript",
            "tariff": "standard"
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è Java
        {
            "name": "–ê–π–∂–∞–Ω –ë–µ–∫–º—É—Ä–∞—Ç–æ–≤–∞",
            "telegram_id": 171717171,
            "group_name": "JAVA-1",
            "subject_name": "Java",
            "tariff": "premium"
        },
        {
            "name": "–ï—Ä–±–æ–ª–∞—Ç –ù—É—Ä–∂–∞–Ω–æ–≤",
            "telegram_id": 181818181,
            "group_name": "JAVA-2",
            "subject_name": "Java",
            "tariff": "standard"
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
        {
            "name": "–ì—É–ª—å–Ω–∞—Ä–∞ –°–∞—Ä—Å–µ–Ω–æ–≤–∞",
            "telegram_id": 191919191,
            "group_name": "–ò–°–¢-1",
            "subject_name": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
            "tariff": "premium"
        },
        {
            "name": "–ú–∞–∫—Å–∞—Ç –ï—Ä–∂–∞–Ω–æ–≤",
            "telegram_id": 202020202,
            "group_name": "–ò–°–¢-2",
            "subject_name": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
            "tariff": "standard"
        },
        # –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫/—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫
        {
            "name": "–ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤",
            "telegram_id": 955518340,
            "group_name": "PY-1",  # Python –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            "subject_name": "Python",
            "tariff": "premium"
        },
        # –ú–µ–¥–∏–Ω–∞ –ú–∞—Ö–∞–º–±–µ—Ç - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç
        {
            "name": "–ú–µ–¥–∏–Ω–∞ –ú–∞—Ö–∞–º–±–µ—Ç",
            "telegram_id": 7265679697,
            "group_name": "–ú–ê–¢-1",  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –≥—Ä—É–ø–ø–∞
            "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "tariff": "premium"
        }
    ]

    created_students_count = 0

    for student_data in test_students:
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –ø–æ –∏–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—É
            subject = created_subjects.get(student_data["subject_name"])
            if not subject:
                print(f"   ‚ùå –ü—Ä–µ–¥–º–µ—Ç '{student_data['subject_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_data['name']}")
                continue

            groups = await GroupRepository.get_by_subject(subject.id)
            target_group = next((g for g in groups if g.name == student_data["group_name"]), None)

            if not target_group:
                print(f"   ‚ùå –ì—Ä—É–ø–ø–∞ '{student_data['group_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_data['name']}")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = await UserRepository.get_by_telegram_id(student_data["telegram_id"])
            if existing_user:
                print(f"   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {student_data['telegram_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
                existing_student = await StudentRepository.get_by_user_id(existing_user.id)
                if existing_student:
                    print(f"   ‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {existing_user.name}")
                    continue
                else:
                    user = existing_user
                    print(f"   üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}")
            else:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await UserRepository.create(
                    telegram_id=student_data["telegram_id"],
                    name=student_data["name"],
                    role='student'
                )
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}")

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = await StudentRepository.create(
                user_id=user.id,
                tariff=student_data["tariff"]
            )

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫ –≥—Ä—É–ø–ø–µ
            await StudentRepository.set_groups(student.id, [target_group.id])

            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç '{student_data['name']}' –≤ –≥—Ä—É–ø–ø–µ '{target_group.name}' ({student_data['subject_name']})")
            created_students_count += 1

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ '{student_data['name']}': {e}")

    print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {created_students_count}")

    print("üë®‚Äçüè´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
    test_curators = [
        {
            "name": "–ú–∞–∫—Å–∞—Ç –ë–∞–π–∫–∞–¥–∞–º–æ–≤",
            "telegram_id": 1268264380,
            "course_name": "–ï–ù–¢",
            "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "group_name": "–ú–ê–¢-1"
        },
        {
            "name": "–ö—É—Ä–∞—Ç–æ—Ä –•–∏–º–∏–∏",
            "telegram_id": 444444444,
            "course_name": "–ï–ù–¢",
            "subject_name": "–•–∏–º–∏—è",
            "group_name": "–•–ò–ú-1"
        },
        {
            "name": "–ö—É—Ä–∞—Ç–æ—Ä Python",
            "telegram_id": 555555555,
            "course_name": "IT",
            "subject_name": "Python",
            "group_name": "PY-1"
        }
    ]

    created_curators_count = 0

    for curator_data in test_curators:
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä—Å
            course = None
            if curator_data["course_name"] == "–ï–ù–¢":
                course = course_ent
            elif curator_data["course_name"] == "IT":
                course = course_it

            if not course:
                print(f"   ‚ùå –ö—É—Ä—Å '{curator_data['course_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞ {curator_data['name']}")
                continue

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç
            subject = created_subjects.get(curator_data["subject_name"])
            if not subject:
                print(f"   ‚ùå –ü—Ä–µ–¥–º–µ—Ç '{curator_data['subject_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞ {curator_data['name']}")
                continue

            # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –ø–æ –∏–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—É
            groups = await GroupRepository.get_by_subject(subject.id)
            target_group = next((g for g in groups if g.name == curator_data["group_name"]), None)

            if not target_group:
                print(f"   ‚ùå –ì—Ä—É–ø–ø–∞ '{curator_data['group_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞ {curator_data['name']}")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = await UserRepository.get_by_telegram_id(curator_data["telegram_id"])
            if existing_user:
                print(f"   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {curator_data['telegram_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞
                existing_curator = await CuratorRepository.get_by_user_id(existing_user.id)
                if existing_curator:
                    print(f"   ‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {existing_user.name}")
                    continue
                else:
                    user = existing_user
                    print(f"   üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}")
            else:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await UserRepository.create(
                    telegram_id=curator_data["telegram_id"],
                    name=curator_data["name"],
                    role='curator'
                )
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}")

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞
            curator = await CuratorRepository.create(
                user_id=user.id,
                course_id=course.id,
                subject_id=subject.id
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ M2M —Å–≤—è–∑—å
            success = await CuratorRepository.add_curator_to_group(curator.id, target_group.id)
            if success:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –∫—É—Ä–∞—Ç–æ—Ä '{curator_data['name']}' –¥–ª—è –≥—Ä—É–ø–ø—ã '{target_group.name}' ({curator_data['subject_name']})")
            else:
                print(f"   ‚ö†Ô∏è –ö—É—Ä–∞—Ç–æ—Ä '{curator_data['name']}' —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –≥—Ä—É–ø–ø–µ '{target_group.name}'")

            created_curators_count += 1

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞ '{curator_data['name']}': {e}")

    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {created_curators_count}")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Many-to-Many —Å–≤—è–∑–∏
    print("üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤...")
    try:
        # –ú–∞–∫—Å–∞—Ç –ë–∞–π–∫–∞–¥–∞–º–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º –ú–ê–¢-2 –∏ –ú–ê–¢-3
        curators = await CuratorRepository.get_all()
        math_curator = next((c for c in curators if c.user.telegram_id == 1268264380), None)
        if math_curator:
            math_subject = created_subjects.get("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            if math_subject:
                groups = await GroupRepository.get_by_subject(math_subject.id)
                for group_name in ["–ú–ê–¢-2", "–ú–ê–¢-3"]:
                    group = next((g for g in groups if g.name == group_name), None)
                    if group:
                        await CuratorRepository.add_curator_to_group(math_curator.id, group.id)
                        print(f"   ‚úÖ {math_curator.user.name} -> {group_name}")

        # –ö—É—Ä–∞—Ç–æ—Ä –•–∏–º–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –•–ò–ú-2
        chem_curator = next((c for c in curators if c.user.telegram_id == 444444444), None)
        if chem_curator:
            chem_subject = created_subjects.get("–•–∏–º–∏—è")
            if chem_subject:
                groups = await GroupRepository.get_by_subject(chem_subject.id)
                group = next((g for g in groups if g.name == "–•–ò–ú-2"), None)
                if group:
                    await CuratorRepository.add_curator_to_group(chem_curator.id, group.id)
                    print(f"   ‚úÖ {chem_curator.user.name} -> –•–ò–ú-2")

        # –ö—É—Ä–∞—Ç–æ—Ä Python - –¥–æ–±–∞–≤–ª—è–µ–º PY-2 –∏ PY-3
        py_curator = next((c for c in curators if c.user.telegram_id == 555555555), None)
        if py_curator:
            py_subject = created_subjects.get("Python")
            if py_subject:
                groups = await GroupRepository.get_by_subject(py_subject.id)
                for group_name in ["PY-2", "PY-3"]:
                    group = next((g for g in groups if g.name == group_name), None)
                    if group:
                        await CuratorRepository.add_curator_to_group(py_curator.id, group.id)
                        print(f"   ‚úÖ {py_curator.user.name} -> {group_name}")

    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    print("üë®‚Äçüè´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    test_teachers = [
        {
            "name": "–ê—Å–ª—ã—Ö–∞–Ω –ï—â–∞–Ω–æ–≤",
            "telegram_id": 666666666,  # –ó–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –µ—Å–ª–∏ –µ—Å—Ç—å
            "course_name": "–ï–ù–¢",
            "subject_name": "–§–∏–∑–∏–∫–∞",
            "group_name": "–§–ò–ó-1"
        },
        {
            "name": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ë–∏–æ–ª–æ–≥–∏–∏",
            "telegram_id": 777777777,
            "course_name": "–ï–ù–¢",
            "subject_name": "–ë–∏–æ–ª–æ–≥–∏—è",
            "group_name": "–ë–ò–û-1"
        },
        {
            "name": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å JavaScript",
            "telegram_id": 888888888,
            "course_name": "IT",
            "subject_name": "JavaScript",
            "group_name": "JS-1"
        }
    ]

    created_teachers_count = 0

    for teacher_data in test_teachers:
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä—Å
            course = None
            if teacher_data["course_name"] == "–ï–ù–¢":
                course = course_ent
            elif teacher_data["course_name"] == "IT":
                course = course_it

            if not course:
                print(f"   ‚ùå –ö—É—Ä—Å '{teacher_data['course_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_data['name']}")
                continue

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç
            subject = created_subjects.get(teacher_data["subject_name"])
            if not subject:
                print(f"   ‚ùå –ü—Ä–µ–¥–º–µ—Ç '{teacher_data['subject_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_data['name']}")
                continue

            # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –ø–æ –∏–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—É
            groups = await GroupRepository.get_by_subject(subject.id)
            target_group = next((g for g in groups if g.name == teacher_data["group_name"]), None)

            if not target_group:
                print(f"   ‚ùå –ì—Ä—É–ø–ø–∞ '{teacher_data['group_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_data['name']}")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = await UserRepository.get_by_telegram_id(teacher_data["telegram_id"])
            if existing_user:
                print(f"   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {teacher_data['telegram_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await UserRepository.create(
                telegram_id=teacher_data["telegram_id"],
                name=teacher_data["name"],
                role='teacher'
            )

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            teacher = await TeacherRepository.create(
                user_id=user.id,
                course_id=course.id,
                subject_id=subject.id
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ M2M —Å–≤—è–∑—å
            success = await TeacherRepository.add_teacher_to_group(teacher.id, target_group.id)
            if not success:
                print(f"   ‚ö†Ô∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{teacher_data['name']}' —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –≥—Ä—É–ø–ø–µ '{target_group.name}'")

            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{teacher_data['name']}' –¥–ª—è –≥—Ä—É–ø–ø—ã '{target_group.name}' ({teacher_data['subject_name']})")
            created_teachers_count += 1

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è '{teacher_data['name']}': {e}")

    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {created_teachers_count}")

    print("üë®‚Äçüíº –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    test_managers = [
        {
            "name": "–ú–µ–¥–∏–Ω–∞ –ú–∞—Ö–∞–º–±–µ—Ç",
            "telegram_id": 7265679697  # –†–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        },
        {
            "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –¢–µ—Å—Ç–æ–≤—ã–π",
            "telegram_id": 999999999
        }
    ]

    created_managers_count = 0

    for manager_data in test_managers:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = await UserRepository.get_by_telegram_id(manager_data["telegram_id"])
            if existing_user:
                print(f"   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {manager_data['telegram_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await UserRepository.create(
                telegram_id=manager_data["telegram_id"],
                name=manager_data["name"],
                role='manager'
            )

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager = await ManagerRepository.create(user_id=user.id)

            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä '{manager_data['name']}'")
            created_managers_count += 1

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '{manager_data['name']}': {e}")

    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {created_managers_count}")

    print("üëë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤...")
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –≤—Å–µ —Ä–æ–ª–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await add_admin_roles(created_subjects, course_ent, course_it)

    print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∏–∫—Ä–æ—Ç–µ–º...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã
    test_microtopics = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": ["–î—Ä–æ–±–∏", "–ü—Ä–æ—Ü–µ–Ω—Ç—ã", "–£—Ä–∞–≤–Ω–µ–Ω–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è"],
        "–§–∏–∑–∏–∫–∞": ["–ú–µ—Ö–∞–Ω–∏–∫–∞", "–û–ø—Ç–∏–∫–∞", "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ"],
        "–•–∏–º–∏—è": ["–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è", "–ù–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è", "–†–µ–∞–∫—Ü–∏–∏"],
        "–ë–∏–æ–ª–æ–≥–∏—è": ["–ö–ª–µ—Ç–∫–∞", "–ì–µ–Ω–µ—Ç–∏–∫–∞", "–≠–≤–æ–ª—é—Ü–∏—è", "–≠–∫–æ–ª–æ–≥–∏—è"],
        "Python": ["–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "–§—É–Ω–∫—Ü–∏–∏", "–ö–ª–∞—Å—Å—ã", "–ú–æ–¥—É–ª–∏"],
        "JavaScript": ["DOM", "–°–æ–±—ã—Ç–∏—è", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å", "–ü—Ä–æ–º–∏—Å—ã"],
        "Java": ["–û–û–ü", "–ö–æ–ª–ª–µ–∫—Ü–∏–∏", "–ò—Å–∫–ª—é—á–µ–Ω–∏—è", "–ü–æ—Ç–æ–∫–∏"]
    }

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π
    existing_microtopics = await MicrotopicRepository.get_all()
    existing_by_subject = {}
    for mt in existing_microtopics:
        if mt.subject_id not in existing_by_subject:
            existing_by_subject[mt.subject_id] = set()
        existing_by_subject[mt.subject_id].add(mt.name)

    created_microtopics_count = 0

    for subject_name, microtopic_names in test_microtopics.items():
        if subject_name in created_subjects:
            subject = created_subjects[subject_name]
            existing_names = existing_by_subject.get(subject.id, set())

            print(f"üìù –°–æ–∑–¥–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}':")

            for microtopic_name in microtopic_names:
                if microtopic_name in existing_names:
                    print(f"   ‚ö†Ô∏è  –ú–∏–∫—Ä–æ—Ç–µ–º–∞ '{microtopic_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue

                try:
                    microtopic = await MicrotopicRepository.create(microtopic_name, subject.id)
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–∏–∫—Ä–æ—Ç–µ–º–∞ '{microtopic.name}' (ID: {microtopic.id})")
                    created_microtopics_count += 1

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ç–µ–º—ã '{microtopic_name}': {e}")

    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –º–∏–∫—Ä–æ—Ç–µ–º: {created_microtopics_count}")

    print("üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Ä–æ–∫–∏
    test_lessons = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": ["–£—Ä–æ–∫ 1: –û—Å–Ω–æ–≤—ã –∞–ª–≥–µ–±—Ä—ã", "–£—Ä–æ–∫ 2: –õ–∏–Ω–µ–π–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", "–£—Ä–æ–∫ 3: –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", "–£—Ä–æ–∫ 4: –°–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π"],
        "–§–∏–∑–∏–∫–∞": ["–£—Ä–æ–∫ 1: –ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞", "–£—Ä–æ–∫ 2: –î–∏–Ω–∞–º–∏–∫–∞", "–£—Ä–æ–∫ 3: –ó–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞", "–£—Ä–æ–∫ 4: –†–∞–±–æ—Ç–∞ –∏ —ç–Ω–µ—Ä–≥–∏—è"],
        "–•–∏–º–∏—è": ["–£—Ä–æ–∫ 1: –ê—Ç–æ–º–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–£—Ä–æ–∫ 2: –•–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏", "–£—Ä–æ–∫ 3: –†–µ–∞–∫—Ü–∏–∏ –æ–∫–∏—Å–ª–µ–Ω–∏—è", "–£—Ä–æ–∫ 4: –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"],
        "–ë–∏–æ–ª–æ–≥–∏—è": ["–£—Ä–æ–∫ 1: –°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏", "–£—Ä–æ–∫ 2: –ú–∏—Ç–æ–∑ –∏ –º–µ–π–æ–∑", "–£—Ä–æ–∫ 3: –ó–∞–∫–æ–Ω—ã –ú–µ–Ω–¥–µ–ª—è", "–£—Ä–æ–∫ 4: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–±–æ—Ä"],
        "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞": ["–£—Ä–æ–∫ 1: –î—Ä–µ–≤–Ω–∏–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–£—Ä–æ–∫ 2: –°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ", "–£—Ä–æ–∫ 3: –ö–∞–∑–∞—Ö—Å–∫–æ–µ —Ö–∞–Ω—Å—Ç–≤–æ", "–£—Ä–æ–∫ 4: –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å"],
        "Python": ["–£—Ä–æ–∫ 1: –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python", "–£—Ä–æ–∫ 2: –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏", "–£—Ä–æ–∫ 3: –§—É–Ω–∫—Ü–∏–∏ –∏ –º–æ–¥—É–ª–∏", "–£—Ä–æ–∫ 4: –û–û–ü –≤ Python"],
        "JavaScript": ["–£—Ä–æ–∫ 1: –û—Å–Ω–æ–≤—ã JS", "–£—Ä–æ–∫ 2: –†–∞–±–æ—Ç–∞ —Å DOM", "–£—Ä–æ–∫ 3: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π JS", "–£—Ä–æ–∫ 4: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JS"],
        "Java": ["–£—Ä–æ–∫ 1: –û—Å–Ω–æ–≤—ã Java", "–£—Ä–æ–∫ 2: –û–û–ü –≤ Java", "–£—Ä–æ–∫ 3: –ö–æ–ª–ª–µ–∫—Ü–∏–∏", "–£—Ä–æ–∫ 4: –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å"]
    }

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π
    existing_lessons = await LessonRepository.get_all()
    existing_lessons_by_subject = {}
    for lesson in existing_lessons:
        if lesson.subject_id not in existing_lessons_by_subject:
            existing_lessons_by_subject[lesson.subject_id] = set()
        existing_lessons_by_subject[lesson.subject_id].add(lesson.name)

    created_lessons_count = 0

    for subject_name, lesson_names in test_lessons.items():
        if subject_name in created_subjects:
            subject = created_subjects[subject_name]
            existing_names = existing_lessons_by_subject.get(subject.id, set())

            print(f"üìö –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}':")

            for lesson_name in lesson_names:
                if lesson_name in existing_names:
                    print(f"   ‚ö†Ô∏è  –£—Ä–æ–∫ '{lesson_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue

                try:
                    lesson = await LessonRepository.create(lesson_name, subject.id)
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–∫ '{lesson.name}' (ID: {lesson.id})")
                    created_lessons_count += 1

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞ '{lesson_name}': {e}")

    print(f"üìä –°–æ–∑–¥–∞–Ω–æ —É—Ä–æ–∫–æ–≤: {created_lessons_count}")

    print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    await add_test_homework_data(created_subjects, course_ent, course_it)

    print("üß™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    await add_test_bonus_tests()

    print("üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –º–µ—Å—è—Ü–∞
    await add_test_month_tests(created_subjects, course_ent, course_it)

    print("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –î–ó...")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await add_test_homework_results()

    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –∏ —É—Ä–æ–≤–Ω–∏ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    await update_all_student_stats()

    print("üîó –ü—Ä–∏–≤—è–∑–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫ –∫—É—Ä—Å–∞–º...")
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫ –∫—É—Ä—Å–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    await assign_students_to_courses(created_subjects, course_ent, course_it)

    print("üéâ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")


async def add_test_homework_data(created_subjects, course_ent, course_it):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –î–ó
        managers = await ManagerRepository.get_all()
        if not managers:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –î–ó")
            return

        manager_user = managers[0].user  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –î–ó
        lessons = await LessonRepository.get_all()
        if not lessons:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—Ä–æ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –î–ó")
            return

        # –°–æ–∑–¥–∞–µ–º –î–ó –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        homework_data = [
            # –•–∏–º–∏—è - 4 –î–ó
            {
                "name": "–ë–∞–∑–æ–≤–æ–µ –î–ó –ø–æ –∞–ª–∫–∞–Ω–∞–º",
                "subject_name": "–•–∏–º–∏—è",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ö–∞–∫–∞—è –æ–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∞–ª–∫–∞–Ω–æ–≤?",
                        "time_limit": 30,
                        "microtopic_number": 1,
                        "answers": [
                            {"text": "CnH2n+2", "is_correct": True},
                            {"text": "CnH2n", "is_correct": False},
                            {"text": "CnH2n-2", "is_correct": False},
                            {"text": "CnHn", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–ê–ª–∫–µ–Ω—ã –∏ –∞–ª–∫–∏–Ω—ã",
                "subject_name": "–•–∏–º–∏—è",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ö–∞–∫–∞—è –æ–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∞–ª–∫–µ–Ω–æ–≤?",
                        "time_limit": 30,
                        "microtopic_number": 2,
                        "answers": [
                            {"text": "CnH2n", "is_correct": True},
                            {"text": "CnH2n+2", "is_correct": False},
                            {"text": "CnH2n-2", "is_correct": False},
                            {"text": "CnHn", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
                "subject_name": "–•–∏–º–∏—è",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ö–∞–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–µ–π—à–∏–º –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º?",
                        "time_limit": 30,
                        "microtopic_number": 3,
                        "answers": [
                            {"text": "–ë–µ–Ω–∑–æ–ª", "is_correct": True},
                            {"text": "–¢–æ–ª—É–æ–ª", "is_correct": False},
                            {"text": "–§–µ–Ω–æ–ª", "is_correct": False},
                            {"text": "–ê–Ω–∏–ª–∏–Ω", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–ö–∏—Å–ª–æ—Ç—ã –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è",
                "subject_name": "–•–∏–º–∏—è",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç pH —Ä–∞—Å—Ç–≤–æ—Ä–∞?",
                        "time_limit": 30,
                        "microtopic_number": 4,
                        "answers": [
                            {"text": "–ö–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å", "is_correct": True},
                            {"text": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", "is_correct": False},
                            {"text": "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å", "is_correct": False},
                            {"text": "–î–∞–≤–ª–µ–Ω–∏–µ", "is_correct": False}
                        ]
                    }
                ]
            },
            # Python - 4 –î–ó
            {
                "name": "–û—Å–Ω–æ–≤—ã Python",
                "subject_name": "Python",
                "course": course_it,
                "questions": [
                    {
                        "text": "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ Python?",
                        "time_limit": 30,
                        "microtopic_number": 1,
                        "answers": [
                            {"text": "str", "is_correct": True},
                            {"text": "text", "is_correct": False},
                            {"text": "string", "is_correct": False},
                            {"text": "char", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–¶–∏–∫–ª—ã –∏ —É—Å–ª–æ–≤–∏—è",
                "subject_name": "Python",
                "course": course_it,
                "questions": [
                    {
                        "text": "–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ü–∏–∫–ª–∞ –≤ Python?",
                        "time_limit": 30,
                        "microtopic_number": 2,
                        "answers": [
                            {"text": "for", "is_correct": True},
                            {"text": "loop", "is_correct": False},
                            {"text": "repeat", "is_correct": False},
                            {"text": "cycle", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–§—É–Ω–∫—Ü–∏–∏",
                "subject_name": "Python",
                "course": course_it,
                "questions": [
                    {
                        "text": "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ Python?",
                        "time_limit": 30,
                        "microtopic_number": 3,
                        "answers": [
                            {"text": "def", "is_correct": True},
                            {"text": "function", "is_correct": False},
                            {"text": "func", "is_correct": False},
                            {"text": "define", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–û–û–ü –≤ Python",
                "subject_name": "Python",
                "course": course_it,
                "questions": [
                    {
                        "text": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –≤ Python?",
                        "time_limit": 30,
                        "microtopic_number": 4,
                        "answers": [
                            {"text": "class", "is_correct": True},
                            {"text": "object", "is_correct": False},
                            {"text": "struct", "is_correct": False},
                            {"text": "type", "is_correct": False}
                        ]
                    }
                ]
            },
            # –ë–∏–æ–ª–æ–≥–∏—è - 4 –î–ó
            {
                "name": "–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏",
                "subject_name": "–ë–∏–æ–ª–æ–≥–∏—è",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ–π –∂–∏–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞?",
                        "time_limit": 30,
                        "microtopic_number": 1,
                        "answers": [
                            {"text": "–ö–ª–µ—Ç–∫–∞", "is_correct": True},
                            {"text": "–¢–∫–∞–Ω—å", "is_correct": False},
                            {"text": "–û—Ä–≥–∞–Ω", "is_correct": False},
                            {"text": "–°–∏—Å—Ç–µ–º–∞ –æ—Ä–≥–∞–Ω–æ–≤", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–ì–µ–Ω–µ—Ç–∏–∫–∞ –∏ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
                "subject_name": "–ë–∏–æ–ª–æ–≥–∏—è",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ö—Ç–æ –æ—Ç–∫—Ä—ã–ª –∑–∞–∫–æ–Ω—ã –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?",
                        "time_limit": 30,
                        "microtopic_number": 2,
                        "answers": [
                            {"text": "–ì—Ä–µ–≥–æ—Ä –ú–µ–Ω–¥–µ–ª—å", "is_correct": True},
                            {"text": "–ß–∞—Ä–ª—å–∑ –î–∞—Ä–≤–∏–Ω", "is_correct": False},
                            {"text": "–õ—É–∏ –ü–∞—Å—Ç–µ—Ä", "is_correct": False},
                            {"text": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –§–ª–µ–º–∏–Ω–≥", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–≠–≤–æ–ª—é—Ü–∏—è –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–±–æ—Ä",
                "subject_name": "–ë–∏–æ–ª–æ–≥–∏—è",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —Ç–µ–æ—Ä–∏–∏ —ç–≤–æ–ª—é—Ü–∏–∏?",
                        "time_limit": 30,
                        "microtopic_number": 3,
                        "answers": [
                            {"text": "–ß–∞—Ä–ª—å–∑ –î–∞—Ä–≤–∏–Ω", "is_correct": True},
                            {"text": "–ì—Ä–µ–≥–æ—Ä –ú–µ–Ω–¥–µ–ª—å", "is_correct": False},
                            {"text": "–ñ–∞–Ω-–ë–∞—Ç–∏—Å—Ç –õ–∞–º–∞—Ä–∫", "is_correct": False},
                            {"text": "–ê–ª—å—Ñ—Ä–µ–¥ –£–æ–ª–ª–µ—Å", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–≠–∫–æ—Å–∏—Å—Ç–µ–º—ã –∏ –±–∏–æ—Å—Ñ–µ—Ä–∞",
                "subject_name": "–ë–∏–æ–ª–æ–≥–∏—è",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞?",
                        "time_limit": 30,
                        "microtopic_number": 4,
                        "answers": [
                            {"text": "–°–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –∂–∏–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –∏ —Å—Ä–µ–¥—ã –∏—Ö –æ–±–∏—Ç–∞–Ω–∏—è", "is_correct": True},
                            {"text": "–¢–æ–ª—å–∫–æ –∂–∏–≤—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–º—ã", "is_correct": False},
                            {"text": "–¢–æ–ª—å–∫–æ –Ω–µ–∂–∏–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞", "is_correct": False},
                            {"text": "–¢–æ–ª—å–∫–æ —Ä–∞—Å—Ç–µ–Ω–∏—è", "is_correct": False}
                        ]
                    }
                ]
            },
            # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - 4 –î–ó
            {
                "name": "–û—Å–Ω–æ–≤—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏",
                "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ß–µ–º—É —Ä–∞–≤–µ–Ω –∫–æ—Ä–µ–Ω—å –∏–∑ 16?",
                        "time_limit": 30,
                        "microtopic_number": 1,
                        "answers": [
                            {"text": "4", "is_correct": True},
                            {"text": "8", "is_correct": False},
                            {"text": "2", "is_correct": False},
                            {"text": "16", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–ê–ª–≥–µ–±—Ä–∞",
                "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ß–µ–º—É —Ä–∞–≤–Ω–æ x –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–∏ 2x + 4 = 10?",
                        "time_limit": 30,
                        "microtopic_number": 2,
                        "answers": [
                            {"text": "3", "is_correct": True},
                            {"text": "2", "is_correct": False},
                            {"text": "4", "is_correct": False},
                            {"text": "5", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
                "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ?",
                        "time_limit": 30,
                        "microtopic_number": 3,
                        "answers": [
                            {"text": "180", "is_correct": True},
                            {"text": "90", "is_correct": False},
                            {"text": "360", "is_correct": False},
                            {"text": "270", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è",
                "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "course": course_ent,
                "questions": [
                    {
                        "text": "–ß–µ–º—É —Ä–∞–≤–µ–Ω sin(90¬∞)?",
                        "time_limit": 30,
                        "microtopic_number": 4,
                        "answers": [
                            {"text": "1", "is_correct": True},
                            {"text": "0", "is_correct": False},
                            {"text": "0.5", "is_correct": False},
                            {"text": "-1", "is_correct": False}
                        ]
                    }
                ]
            }
        ]

        created_homeworks_count = 0
        created_questions_count = 0
        created_answers_count = 0

        for hw_data in homework_data:
            try:
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç
                subject = created_subjects.get(hw_data["subject_name"])
                if not subject:
                    print(f"   ‚ùå –ü—Ä–µ–¥–º–µ—Ç '{hw_data['subject_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue

                # –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                subject_lessons = await LessonRepository.get_by_subject(subject.id)
                if not subject_lessons:
                    print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{hw_data['subject_name']}'")
                    continue

                lesson = subject_lessons[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –î–ó
                existing_homeworks = await HomeworkRepository.get_by_lesson(lesson.id)
                if any(hw.name == hw_data["name"] for hw in existing_homeworks):
                    print(f"   ‚ö†Ô∏è  –î–ó '{hw_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue

                # –°–æ–∑–¥–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                homework = await HomeworkRepository.create(
                    name=hw_data["name"],
                    subject_id=subject.id,
                    lesson_id=lesson.id
                )

                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –î–ó '{homework.name}' (ID: {homework.id})")
                created_homeworks_count += 1

                # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
                question_repo = QuestionRepository()
                for question_data in hw_data["questions"]:
                    question = await question_repo.create(
                        homework_id=homework.id,
                        text=question_data["text"],
                        subject_id=subject.id,
                        microtopic_number=question_data.get("microtopic_number"),
                        time_limit=question_data["time_limit"]
                    )

                    created_questions_count += 1

                    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                    await AnswerOptionRepository.create_multiple(
                        question.id,
                        question_data["answers"]
                    )

                    created_answers_count += len(question_data["answers"])

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –î–ó '{hw_data['name']}': {e}")

        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π: {created_homeworks_count}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {created_questions_count}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {created_answers_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –î–ó: {e}")


async def add_test_bonus_tests():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    try:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        bonus_tests_data = [
            {
                "name": "–¢–µ—Å—Ç –ø–æ –∞–ª–∫–∞–Ω–∞–º",
                "price": 100,
                "questions": [
                    {
                        "text": "–ö–∞–∫–æ–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–º–µ—Ä–æ–º –±—É—Ç–∞–Ω–∞?",
                        "time_limit": 30,
                        "answers": [
                            {"text": "–ü—Ä–æ–ø–∞–Ω", "is_correct": False},
                            {"text": "2-–º–µ—Ç–∏–ª–ø—Ä–æ–ø–∞–Ω", "is_correct": True},
                            {"text": "–ü–µ–Ω—Ç–∞–Ω", "is_correct": False},
                            {"text": "–≠—Ç–∞–Ω", "is_correct": False}
                        ]
                    },
                    {
                        "text": "–ö–∞–∫–æ–π —Ç–∏–ø –∏–∑–æ–º–µ—Ä–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ–Ω –¥–ª—è –∞–ª–∫–∞–Ω–æ–≤?",
                        "time_limit": 45,
                        "answers": [
                            {"text": "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è", "is_correct": False},
                            {"text": "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è", "is_correct": True},
                            {"text": "–û–ø—Ç–∏—á–µ—Å–∫–∞—è", "is_correct": False},
                            {"text": "–¢–∞—É—Ç–æ–º–µ—Ä–∏—è", "is_correct": False}
                        ]
                    },
                    {
                        "text": "–ö–∞–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ –¥–ª—è –∞–ª–∫–∞–Ω–æ–≤?",
                        "time_limit": 30,
                        "answers": [
                            {"text": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "is_correct": False},
                            {"text": "–ó–∞–º–µ—â–µ–Ω–∏–µ", "is_correct": True},
                            {"text": "–ü–æ–ª–∏–º–µ—Ä–∏–∑–∞—Ü–∏—è", "is_correct": False},
                            {"text": "–ö–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏—è", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "price": 150,
                "questions": [
                    {
                        "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?",
                        "time_limit": 30,
                        "answers": [
                            {"text": "–ò–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏", "is_correct": True},
                            {"text": "–§—É–Ω–∫—Ü–∏—è", "is_correct": False},
                            {"text": "–ö–ª–∞—Å—Å", "is_correct": False},
                            {"text": "–ú–æ–¥—É–ª—å", "is_correct": False}
                        ]
                    },
                    {
                        "text": "–ö–∞–∫–æ–π –∏–∑ —è–∑—ã–∫–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–º?",
                        "time_limit": 30,
                        "answers": [
                            {"text": "C++", "is_correct": False},
                            {"text": "Java", "is_correct": False},
                            {"text": "Python", "is_correct": True},
                            {"text": "C#", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã",
                "price": 75,
                "questions": [
                    {
                        "text": "–ß–µ–º—É —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ œÄ (–ø–∏) —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤?",
                        "time_limit": 30,
                        "answers": [
                            {"text": "3.14", "is_correct": True},
                            {"text": "3.15", "is_correct": False},
                            {"text": "3.13", "is_correct": False},
                            {"text": "3.16", "is_correct": False}
                        ]
                    },
                    {
                        "text": "–ö–∞–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞?",
                        "time_limit": 45,
                        "answers": [
                            {"text": "œÄr¬≤", "is_correct": True},
                            {"text": "2œÄr", "is_correct": False},
                            {"text": "œÄd", "is_correct": False},
                            {"text": "r¬≤", "is_correct": False}
                        ]
                    },
                    {
                        "text": "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –ø—Ä—è–º–æ–º —É–≥–ª–µ?",
                        "time_limit": 20,
                        "answers": [
                            {"text": "90¬∞", "is_correct": True},
                            {"text": "180¬∞", "is_correct": False},
                            {"text": "45¬∞", "is_correct": False},
                            {"text": "360¬∞", "is_correct": False}
                        ]
                    }
                ]
            },
            {
                "name": "–§–∏–∑–∏–∫–∞: –ú–µ—Ö–∞–Ω–∏–∫–∞",
                "price": 120,
                "questions": [
                    {
                        "text": "–ö–∞–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∏–ª—ã –≤ –°–ò?",
                        "time_limit": 30,
                        "answers": [
                            {"text": "–ù—å—é—Ç–æ–Ω", "is_correct": True},
                            {"text": "–î–∂–æ—É–ª—å", "is_correct": False},
                            {"text": "–í–∞—Ç—Ç", "is_correct": False},
                            {"text": "–ü–∞—Å–∫–∞–ª—å", "is_correct": False}
                        ]
                    },
                    {
                        "text": "–ß—Ç–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞?",
                        "time_limit": 45,
                        "answers": [
                            {"text": "F = ma", "is_correct": True},
                            {"text": "E = mc¬≤", "is_correct": False},
                            {"text": "P = mv", "is_correct": False},
                            {"text": "W = Fs", "is_correct": False}
                        ]
                    }
                ]
            }
        ]

        created_bonus_tests_count = 0
        created_bonus_questions_count = 0
        created_bonus_answers_count = 0

        for test_data in bonus_tests_data:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç
                existing_test = await BonusTestRepository.exists_by_name(test_data["name"])
                if existing_test:
                    print(f"   ‚ö†Ô∏è  –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç '{test_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue

                # –°–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç
                bonus_test = await BonusTestRepository.create(
                    name=test_data["name"],
                    price=test_data["price"]
                )

                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç '{bonus_test.name}' (ID: {bonus_test.id}, —Ü–µ–Ω–∞: {bonus_test.price} –º–æ–Ω–µ—Ç)")
                created_bonus_tests_count += 1

                # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
                for question_data in test_data["questions"]:
                    bonus_question_repo = BonusQuestionRepository()
                    question = await bonus_question_repo.create(
                        bonus_test_id=bonus_test.id,
                        text=question_data["text"],
                        time_limit=question_data["time_limit"]
                    )

                    created_bonus_questions_count += 1

                    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                    await BonusAnswerOptionRepository.create_multiple(
                        question.id,
                        question_data["answers"]
                    )

                    created_bonus_answers_count += len(question_data["answers"])

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ '{test_data['name']}': {e}")

        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {created_bonus_tests_count}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {created_bonus_questions_count}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {created_bonus_answers_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")


async def add_test_month_tests(created_subjects, course_ent, course_it):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞"""
    try:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞
        month_tests_data = [
            {
                "name": "–°–µ–Ω—Ç—è–±—Ä—å",
                "course": course_ent,
                "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "microtopic_numbers": [1, 2, 3]  # –ü–µ—Ä–≤—ã–µ 3 –º–∏–∫—Ä–æ—Ç–µ–º—ã
            },
            {
                "name": "–û–∫—Ç—è–±—Ä—å",
                "course": course_ent,
                "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "microtopic_numbers": [2, 3, 4]  # –ú–∏–∫—Ä–æ—Ç–µ–º—ã 2-4
            },
            {
                "name": "–°–µ–Ω—Ç—è–±—Ä—å",
                "course": course_ent,
                "subject_name": "–•–∏–º–∏—è",
                "microtopic_numbers": [1, 2]  # –ü–µ—Ä–≤—ã–µ 2 –º–∏–∫—Ä–æ—Ç–µ–º—ã
            },
            {
                "name": "–û–∫—Ç—è–±—Ä—å",
                "course": course_ent,
                "subject_name": "–§–∏–∑–∏–∫–∞",
                "microtopic_numbers": [1, 2, 3, 4]  # –í—Å–µ 4 –º–∏–∫—Ä–æ—Ç–µ–º—ã
            },
            {
                "name": "–°–µ–Ω—Ç—è–±—Ä—å",
                "course": course_it,
                "subject_name": "Python",
                "microtopic_numbers": [1, 2]  # –ü–µ—Ä–≤—ã–µ 2 –º–∏–∫—Ä–æ—Ç–µ–º—ã
            },
            {
                "name": "–û–∫—Ç—è–±—Ä—å",
                "course": course_it,
                "subject_name": "Python",
                "microtopic_numbers": [3, 4]  # –ú–∏–∫—Ä–æ—Ç–µ–º—ã 3-4
            },
            {
                "name": "–°–µ–Ω—Ç—è–±—Ä—å",
                "course": course_it,
                "subject_name": "JavaScript",
                "microtopic_numbers": [1, 2, 3]  # –ü–µ—Ä–≤—ã–µ 3 –º–∏–∫—Ä–æ—Ç–µ–º—ã
            }
        ]

        created_month_tests_count = 0
        created_relations_count = 0

        for test_data in month_tests_data:
            try:
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç
                subject = created_subjects.get(test_data["subject_name"])
                if not subject:
                    print(f"   ‚ùå –ü—Ä–µ–¥–º–µ—Ç '{test_data['subject_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue

                course = test_data["course"]
                if not course:
                    print(f"   ‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ '{test_data['name']}'")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞
                existing_test = await MonthTestRepository.exists_by_name_course_subject(
                    test_data["name"], course.id, subject.id
                )
                if existing_test:
                    print(f"   ‚ö†Ô∏è  –¢–µ—Å—Ç –º–µ—Å—è—Ü–∞ '{test_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {course.name}/{subject.name}")
                    continue

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞
                month_test = await MonthTestRepository.create(
                    name=test_data["name"],
                    course_id=course.id,
                    subject_id=subject.id
                )

                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞ '{month_test.name}' –¥–ª—è {course.name}/{subject.name} (ID: {month_test.id})")
                created_month_tests_count += 1

                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—ã
                relations = await MonthTestMicrotopicRepository.create_multiple(
                    month_test.id,
                    test_data["microtopic_numbers"]
                )

                created_relations_count += len(relations)
                numbers_text = ", ".join([str(num) for num in sorted(test_data["microtopic_numbers"])])
                print(f"      üìå –ü—Ä–∏–≤—è–∑–∞–Ω—ã –º–∏–∫—Ä–æ—Ç–µ–º—ã: {numbers_text}")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ '{test_data['name']}': {e}")

        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞: {created_month_tests_count}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π —Å –º–∏–∫—Ä–æ—Ç–µ–º–∞–º–∏: {created_relations_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞: {e}")


async def add_test_homework_results():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = await StudentRepository.get_all()
        if not students:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        homeworks = await HomeworkRepository.get_all()
        if not homeworks:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        question_repo = QuestionRepository()
        questions = await question_repo.get_all()
        if not questions:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        created_results_count = 0
        created_question_results_count = 0

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        for student in students:
            print(f"üìä –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ '{student.user.name}':")

            # –ü–æ–ª—É—á–∞–µ–º –î–ó —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–∞
            if not student.groups:
                print(f"   ‚ö†Ô∏è  –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.user.name} –Ω–µ—Ç –≥—Ä—É–ø–ø")
                continue

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–∞
            subject_ids = []
            subject_names = []
            for group in student.groups:
                if group.subject:
                    subject_ids.append(group.subject_id)
                    subject_names.append(group.subject.name)

            if not subject_ids:
                print(f"   ‚ö†Ô∏è  –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.user.name} –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö")
                continue

            subject_homeworks = [hw for hw in homeworks if hw.subject_id in subject_ids]
            if not subject_homeworks:
                print(f"   ‚ö†Ô∏è  –ù–µ—Ç –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º {', '.join(subject_names)}")
                continue

            import random
            if student.user.telegram_id == 955518340:  # –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤
                print(f"   –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {student.user.name}")
                max_homeworks = len(subject_homeworks)
                num_homeworks = max_homeworks  # –í—ã–ø–æ–ª–Ω—è–µ—Ç –í–°–ï –î–ó
                student_homeworks = subject_homeworks  # –í—Å–µ –î–ó
                is_excellent_student = True
            elif student.user.telegram_id == 333444555:  # –ê–π—Å—É–ª—É –ù—É—Ä–±–µ–∫–æ–≤–∞
                print(f"   –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {student.user.name}")
                max_homeworks = len(subject_homeworks)
                num_homeworks = max_homeworks  # –í—ã–ø–æ–ª–Ω—è–µ—Ç –í–°–ï –î–ó
                student_homeworks = subject_homeworks  # –í—Å–µ –î–ó
                is_excellent_student = True
            else:
                # –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–ó –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–æ—Ç 1 –¥–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
                max_homeworks = len(subject_homeworks)
                num_homeworks = random.randint(1, max_homeworks)  # –û—Ç 1 –¥–æ –≤—Å–µ—Ö –î–ó
                student_homeworks = random.sample(subject_homeworks, num_homeworks)  # –°–ª—É—á–∞–π–Ω—ã–µ –î–ó
                is_excellent_student = False

            print(f"   üìö –í—ã–ø–æ–ª–Ω—è–µ—Ç {num_homeworks} –∏–∑ {max_homeworks} –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º {', '.join(subject_names)}")

            for homework in student_homeworks:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –î–ó
                    homework_questions = await question_repo.get_by_homework(homework.id)
                    if not homework_questions:
                        continue

                    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —É—Å–ø–µ—Ö–∞
                    if is_excellent_student:
                        success_rate = random.choice([0.9, 0.95, 1.0, 1.0, 1.0])  # –í –æ—Å–Ω–æ–≤–Ω–æ–º 100%
                    else:
                        success_rate = random.choice([0.5, 0.7, 0.8, 0.9, 1.0])  # 50%, 70%, 80%, 90%, 100%

                    total_questions = len(homework_questions)
                    correct_answers = int(total_questions * success_rate)

                    # –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    points_earned = total_questions * 3 if success_rate == 1.0 else 0
                    points_awarded = success_rate == 1.0

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –î–ó
                    homework_result = await HomeworkResultRepository.create(
                        student_id=student.id,
                        homework_id=homework.id,
                        total_questions=total_questions,
                        correct_answers=correct_answers,
                        points_earned=points_earned,
                        is_first_attempt=True,
                        points_awarded=points_awarded
                    )

                    created_results_count += 1

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    question_results_data = []
                    correct_count = 0

                    for i, question in enumerate(homework_questions):
                        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
                        answer_options = await AnswerOptionRepository.get_by_question(question.id)
                        if not answer_options:
                            continue

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                        is_correct = correct_count < correct_answers
                        if is_correct:
                            correct_count += 1

                        # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
                        if is_correct:
                            selected_answer = next((opt for opt in answer_options if opt.is_correct), None)
                        else:
                            wrong_answers = [opt for opt in answer_options if not opt.is_correct]
                            selected_answer = random.choice(wrong_answers) if wrong_answers else answer_options[0]

                        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (10-60 —Å–µ–∫—É–Ω–¥)
                        time_spent = random.randint(10, 60)

                        question_results_data.append({
                            'question_id': question.id,
                            'selected_answer_id': selected_answer.id if selected_answer else None,
                            'is_correct': is_correct,
                            'time_spent': time_spent,
                            'microtopic_number': question.microtopic_number
                        })

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
                    if question_results_data:
                        await QuestionResultRepository.create_multiple(
                            homework_result.id,
                            question_results_data
                        )
                        created_question_results_count += len(question_results_data)

                    result_percent = int(success_rate * 100)
                    print(f"   ‚úÖ –î–ó '{homework.name}': {correct_answers}/{total_questions} ({result_percent}%) - {points_earned} –±–∞–ª–ª–æ–≤")

                    # –ò–Ω–æ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –Ω–µ–∏–¥–µ–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if success_rate < 1.0:
                        if is_excellent_student:
                            # –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤ –∏ –ê–π—Å—É–ª—É –ù—É—Ä–±–µ–∫–æ–≤–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–ª—è—é—Ç –Ω–∞ 100%
                            should_repeat = True
                            repeat_success_rate = 1.0
                        else:
                            should_repeat = random.choice([True, False])
                            repeat_success_rate = min(1.0, success_rate + 0.2)

                        if should_repeat:
                            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –ª—É—á—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                            repeat_correct = int(total_questions * repeat_success_rate)
                            repeat_points = total_questions * 3 if repeat_success_rate == 1.0 else 0

                            repeat_result = await HomeworkResultRepository.create(
                                student_id=student.id,
                                homework_id=homework.id,
                                total_questions=total_questions,
                                correct_answers=repeat_correct,
                                points_earned=repeat_points,
                                is_first_attempt=False,
                                points_awarded=False  # –ë–∞–ª–ª—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
                            )

                            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
                            repeat_question_results = []
                            repeat_correct_count = 0

                            for question in homework_questions:
                                answer_options = await AnswerOptionRepository.get_by_question(question.id)
                                if not answer_options:
                                    continue

                                is_correct = repeat_correct_count < repeat_correct
                                if is_correct:
                                    repeat_correct_count += 1

                                if is_correct:
                                    selected_answer = next((opt for opt in answer_options if opt.is_correct), None)
                                else:
                                    wrong_answers = [opt for opt in answer_options if not opt.is_correct]
                                    selected_answer = random.choice(wrong_answers) if wrong_answers else answer_options[0]

                                time_spent = random.randint(8, 45)  # –ë—ã—Å—Ç—Ä–µ–µ –≤–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑

                                repeat_question_results.append({
                                    'question_id': question.id,
                                    'selected_answer_id': selected_answer.id if selected_answer else None,
                                    'is_correct': is_correct,
                                    'time_spent': time_spent,
                                    'microtopic_number': question.microtopic_number
                                })

                            if repeat_question_results:
                                await QuestionResultRepository.create_multiple(
                                    repeat_result.id,
                                    repeat_question_results
                                )
                                created_question_results_count += len(repeat_question_results)

                            repeat_percent = int(repeat_success_rate * 100)
                            print(f"   üîÑ –ü–æ–≤—Ç–æ—Ä '{homework.name}': {repeat_correct}/{total_questions} ({repeat_percent}%) - {repeat_points} –±–∞–ª–ª–æ–≤")
                            created_results_count += 1

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –î–ó '{homework.name}': {e}")

        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –î–ó: {created_results_count}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤: {created_question_results_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –î–ó: {e}")


async def update_all_student_stats():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    try:
        students = await StudentRepository.get_all()
        if not students:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return

        updated_count = 0
        for student in students:
            try:
                success = await StudentRepository.update_points_and_level(student.id)
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    updated_student = await StudentRepository.get_by_id(student.id)
                    if updated_student:
                        print(f"   ‚úÖ {updated_student.user.name}: {updated_student.points} –±–∞–ª–ª–æ–≤, —É—Ä–æ–≤–µ–Ω—å '{updated_student.level}'")
                        updated_count += 1
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.user.name}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.user.name}: {e}")

        print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {updated_count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")


async def create_results_for_andrey():
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ê–Ω–¥—Ä–µ—è –ö–ª–∏–º–æ–≤–∞
        andrey = await StudentRepository.get_by_telegram_id(955518340)
        if not andrey:
            print("   ‚ùå –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ (Python)
        has_python_group = False
        if andrey.groups:
            for group in andrey.groups:
                if group.subject and group.subject.name == "Python":
                    has_python_group = True
                    break

        if not has_python_group:
            print(f"   üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ê–Ω–¥—Ä–µ—è –≤ –≥—Ä—É–ø–ø—É Python...")
            # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É PY-1
            groups = await GroupRepository.get_all()
            python_group = next((g for g in groups if g.name == "PY-1"), None)
            if python_group:
                await StudentRepository.add_groups(andrey.id, [python_group.id])
                andrey = await StudentRepository.get_by_id(andrey.id)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                print(f"   ‚úÖ –ê–Ω–¥—Ä–µ–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {python_group.name}")
            else:
                print("   ‚ùå –ì—Ä—É–ø–ø–∞ PY-1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

        print(f"   üë§ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {andrey.user.name}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –î–ó –ø–æ Python
        homeworks = await HomeworkRepository.get_all()
        # –ù–∞—Ö–æ–¥–∏–º ID –ø—Ä–µ–¥–º–µ—Ç–∞ Python –∏–∑ –≥—Ä—É–ø–ø –ê–Ω–¥—Ä–µ—è
        python_subject_id = None
        for group in andrey.groups:
            if group.subject and group.subject.name == "Python":
                python_subject_id = group.subject.id
                break

        if not python_subject_id:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç Python –≤ –≥—Ä—É–ø–ø–∞—Ö –ê–Ω–¥—Ä–µ—è")
            return

        python_homeworks = [hw for hw in homeworks if hw.subject_id == python_subject_id]

        if not python_homeworks:
            print("   ‚ùå –ù–µ—Ç –î–ó –ø–æ Python")
            return

        question_repo = QuestionRepository()
        created_results = 0

        for homework in python_homeworks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            existing_results = await HomeworkResultRepository.get_by_student(andrey.id)
            homework_exists = any(result.homework_id == homework.id for result in existing_results)
            if homework_exists:
                print(f"   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –î–ó '{homework.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue

            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –î–ó
            homework_questions = await question_repo.get_by_homework(homework.id)
            if not homework_questions:
                continue

            total_questions = len(homework_questions)
            correct_answers = total_questions  # 100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            points_earned = total_questions * 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –î–ó
            homework_result = await HomeworkResultRepository.create(
                student_id=andrey.id,
                homework_id=homework.id,
                total_questions=total_questions,
                correct_answers=correct_answers,
                points_earned=points_earned,
                is_first_attempt=True,
                points_awarded=True
            )

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            question_results_data = []

            for question in homework_questions:
                # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
                answer_options = await AnswerOptionRepository.get_by_question(question.id)
                if not answer_options:
                    continue

                # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                correct_answer = next((opt for opt in answer_options if opt.is_correct), None)

                # –ë—ã—Å—Ç—Ä–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–∫–∞–∫ —É –æ–ø—ã—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
                import random
                time_spent = random.randint(5, 15)  # 5-15 —Å–µ–∫—É–Ω–¥

                question_results_data.append({
                    'question_id': question.id,
                    'selected_answer_id': correct_answer.id if correct_answer else None,
                    'is_correct': True,
                    'time_spent': time_spent,
                    'microtopic_number': question.microtopic_number
                })

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
            if question_results_data:
                await QuestionResultRepository.create_multiple(
                    homework_result.id,
                    question_results_data
                )

            print(f"   ‚úÖ –î–ó '{homework.name}': {correct_answers}/{total_questions} (100%) - {points_earned} –±–∞–ª–ª–æ–≤")
            created_results += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –∏ —É—Ä–æ–≤–µ–Ω—å
        await StudentRepository.update_points_and_level(andrey.id)

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final_andrey = await StudentRepository.get_by_id(andrey.id)
        if final_andrey:
            print(f"   üéâ –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {created_results}")
            print(f"   üíé –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã: {final_andrey.points}")
            print(f"   üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {final_andrey.level}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ê–Ω–¥—Ä–µ—è: {e}")


async def add_admin_roles(created_subjects, course_ent, course_it):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        # ID –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–æ–ª–∏)
        admin_ids = [955518340]
        admin_names = {
            955518340: "–ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤"
        }

        for admin_telegram_id in admin_ids:
            admin_name = admin_names[admin_telegram_id]
            print(f"üëë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞: {admin_name}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∞
            admin_user = await UserRepository.get_by_telegram_id(admin_telegram_id)
            if not admin_user:
                print(f"   ‚ùå –ê–¥–º–∏–Ω —Å ID {admin_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue

            # 1. –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
            print(f"   üéì –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
                existing_student = await StudentRepository.get_by_user_id(admin_user.id)
                if not existing_student:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
                    math_groups = await GroupRepository.get_by_subject(created_subjects["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"].id)
                    if math_groups:
                        student = await StudentRepository.create(
                            user_id=admin_user.id,
                            tariff="premium"
                        )
                        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥—Ä—É–ø–ø–µ
                        await StudentRepository.set_groups(student.id, [math_groups[0].id])
                        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ (ID: {student.id}, –≥—Ä—É–ø–ø–∞: {math_groups[0].name})")
                    else:
                        print(f"      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≥—Ä—É–ø–ø—ã –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏")
                else:
                    print(f"      ‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_student.id})")
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

            # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞
            print(f"   üë®‚Äçüéì –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞
                existing_curator = await CuratorRepository.get_by_user_id(admin_user.id)
                if not existing_curator:
                    curator = await CuratorRepository.create(
                        user_id=admin_user.id,
                        course_id=course_ent.id,
                        subject_id=created_subjects["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"].id
                    )
                    print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞ (ID: {curator.id})")

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
                    math_groups = await GroupRepository.get_by_subject(created_subjects["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"].id)
                    for group in math_groups[:2]:  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—ã–µ 2 –≥—Ä—É–ø–ø—ã
                        await CuratorRepository.add_curator_to_group(curator.id, group.id)
                        print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {group.name}")
                else:
                    print(f"      ‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_curator.id})")
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞: {e}")

            # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            print(f"   üë®‚Äçüè´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                existing_teacher = await TeacherRepository.get_by_user_id(admin_user.id)
                if not existing_teacher:
                    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É Python –¥–ª—è IT –∫—É—Ä—Å–∞
                    python_groups = await GroupRepository.get_by_subject(created_subjects["Python"].id)
                    if python_groups:
                        teacher = await TeacherRepository.create(
                            user_id=admin_user.id,
                            course_id=course_it.id,
                            subject_id=created_subjects["Python"].id
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ M2M —Å–≤—è–∑—å
                        success = await TeacherRepository.add_teacher_to_group(teacher.id, python_groups[0].id)
                        if success:
                            print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (ID: {teacher.id}, –ø—Ä–µ–¥–º–µ—Ç: Python, –≥—Ä—É–ø–ø–∞: {python_groups[0].name})")
                        else:
                            print(f"      ‚ö†Ô∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –≥—Ä—É–ø–ø–µ {python_groups[0].name}")
                    else:
                        print(f"      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≥—Ä—É–ø–ø—ã –¥–ª—è Python")
                else:
                    print(f"      ‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_teacher.id})")
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")

            # 4. –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            print(f"   üëî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                existing_manager = await ManagerRepository.get_by_user_id(admin_user.id)
                if not existing_manager:
                    manager = await ManagerRepository.create(user_id=admin_user.id)
                    print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (ID: {manager.id})")
                else:
                    print(f"      ‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_manager.id})")
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

            print(f"   üéâ –í—Å–µ —Ä–æ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è {admin_name}")

        print(f"üëë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∞–º: {e}")


async def assign_students_to_courses(created_subjects, course_ent, course_it):
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫ –∫—É—Ä—Å–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    if not course_ent or not course_it:
        print("‚ö†Ô∏è –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    students = await StudentRepository.get_all()

    for student in students:
        if not student.groups:
            continue

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_subjects = set()
        for group in student.groups:
            if group.subject:
                student_subjects.add(group.subject.name)

        course_ids = []

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–∏–º –∫—É—Ä—Å–∞–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
        for subject_name in student_subjects:
            if subject_name in ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è"]:
                if course_ent.id not in course_ids:
                    course_ids.append(course_ent.id)

            if subject_name in ["Python", "JavaScript", "Java", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]:
                if course_it.id not in course_ids:
                    course_ids.append(course_it.id)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫ –∫—É—Ä—Å–∞–º
        if course_ids:
            success = await StudentRepository.set_courses(student.id, course_ids)
            if success:
                course_names = []
                if course_ent.id in course_ids:
                    course_names.append("–ï–ù–¢")
                if course_it.id in course_ids:
                    course_names.append("IT")
                print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç '{student.user.name}' –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å–∞–º: {', '.join(course_names)}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ '{student.user.name}' –∫ –∫—É—Ä—Å–∞–º")


if __name__ == "__main__":
    asyncio.run(add_initial_data())
