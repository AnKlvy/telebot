#!/bin/bash

# –ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ SSL —á–µ—Ä–µ–∑ acme.sh (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ certbot)

DOMAIN="n70741z2.beget.tech"
EMAIL="admin@${DOMAIN}"

echo "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —á–µ—Ä–µ–∑ acme.sh (–ø—Ä–æ—â–µ —á–µ–º certbot!)"
echo "=================================================="
echo "üåê –î–æ–º–µ–Ω: $DOMAIN"
echo "üìß Email: $EMAIL"
echo ""

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
    exit 1
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º nginx —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 80
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º nginx..."
sudo docker-compose stop nginx

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º acme.sh
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º acme.sh..."
if [ ! -d "$HOME/.acme.sh" ]; then
    curl https://get.acme.sh | sh -s email=$EMAIL
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH
    echo 'export PATH="$HOME/.acme.sh:$PATH"' >> ~/.bashrc
    source ~/.bashrc
else
    echo "‚úÖ acme.sh —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è SSL
mkdir -p nginx/ssl

# –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
echo "üîê –ü–æ–ª—É—á–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç..."
$HOME/.acme.sh/acme.sh --issue -d $DOMAIN --standalone --httpport 80

if [ $? -eq 0 ]; then
    echo "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    echo "üìã –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..."
    $HOME/.acme.sh/acme.sh --install-cert -d $DOMAIN \
        --cert-file $(pwd)/nginx/ssl/cert.pem \
        --key-file $(pwd)/nginx/ssl/privkey.pem \
        --fullchain-file $(pwd)/nginx/ssl/fullchain.pem \
        --reloadcmd "cd $(pwd) && sudo docker-compose restart nginx"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
    chmod 644 nginx/ssl/fullchain.pem nginx/ssl/cert.pem
    chmod 600 nginx/ssl/privkey.pem
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx –¥–ª—è SSL
    echo "‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx..."
    if [ ! -f "nginx/nginx.conf.backup" ]; then
        cp nginx/nginx.conf nginx/nginx.conf.backup
    fi
    
    # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cat > nginx/nginx.conf << 'EOF'
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name n70741z2.beget.tech;
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name n70741z2.beget.tech;

        # SSL configuration
        ssl_certificate /etc/ssl/fullchain.pem;
        ssl_certificate_key /etc/ssl/privkey.pem;
        
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        client_max_body_size 50M;

        # Webhook endpoint
        location /webhook {
            proxy_pass http://bot:8000/webhook;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Health check
        location /health {
            proxy_pass http://bot:8000/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        location / {
            return 200 "Telegram Bot is running with SSL!\n";
            add_header Content-Type text/plain;
        }

        server_tokens off;
    }
}
EOF
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    echo "üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    sudo sed -i "s|WEBHOOK_HOST=.*|WEBHOOK_HOST=https://$DOMAIN|" /etc/telebot/env
    sudo sed -i "s|WEBHOOK_MODE=.*|WEBHOOK_MODE=true|" /etc/telebot/env
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º nginx
    echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º nginx —Å SSL..."
    sudo docker-compose up -d nginx
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    echo "‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    (crontab -l 2>/dev/null; echo "0 0 * * * $HOME/.acme.sh/acme.sh --cron --home $HOME/.acme.sh > /dev/null") | crontab -
    
    echo ""
    echo "üéâ SSL –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    echo "üåê HTTPS URL: https://$DOMAIN/webhook"
    echo "üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —á–µ—Ä–µ–∑ cron"
    echo ""
    echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º:"
    echo "curl -I https://$DOMAIN/health"
    
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
    echo "üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:"
    echo "   - –î–æ–º–µ–Ω $DOMAIN —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä"
    echo "   - –ü–æ—Ä—Ç 80 –æ—Ç–∫—Ä—ã—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
    echo "   - –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 80"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º nginx
    sudo docker-compose up -d nginx
    exit 1
fi
