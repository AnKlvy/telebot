"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É 50 —É—á–µ–Ω–∏–∫–æ–≤
"""
import asyncio
import aiohttp
import json
import time
import random
from typing import List, Dict, Any
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    handlers=[
        logging.FileHandler(f'logs/load_test_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class HomeworkLoadTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    
    def __init__(self, webhook_url: str, bot_token: str):
        self.webhook_url = webhook_url
        self.bot_token = bot_token
        self.students = []
        self.results = []
        
    def generate_students(self, count: int = 50) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        students = []
        for i in range(count):
            student = {
                'user_id': 1000000 + i,
                'first_name': f'Student{i+1}',
                'username': f'student{i+1}',
                'chat_id': 1000000 + i
            }
            students.append(student)
        return students
    
    def create_telegram_update(self, student: Dict, message_text: str = None, callback_data: str = None) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ Telegram Update –æ–±—ä–µ–∫—Ç–∞"""
        update_id = random.randint(100000, 999999)
        
        if callback_data:
            # Callback query
            update = {
                "update_id": update_id,
                "callback_query": {
                    "id": str(random.randint(1000000000, 9999999999)),
                    "from": {
                        "id": student['user_id'],
                        "is_bot": False,
                        "first_name": student['first_name'],
                        "username": student['username']
                    },
                    "message": {
                        "message_id": random.randint(1000, 9999),
                        "from": {
                            "id": 123456789,  # Bot ID
                            "is_bot": True,
                            "first_name": "EduBot"
                        },
                        "chat": {
                            "id": student['chat_id'],
                            "first_name": student['first_name'],
                            "username": student['username'],
                            "type": "private"
                        },
                        "date": int(time.time()),
                        "text": "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å..."
                    },
                    "data": callback_data
                }
            }
        else:
            # Text message
            update = {
                "update_id": update_id,
                "message": {
                    "message_id": random.randint(1000, 9999),
                    "from": {
                        "id": student['user_id'],
                        "is_bot": False,
                        "first_name": student['first_name'],
                        "username": student['username']
                    },
                    "chat": {
                        "id": student['chat_id'],
                        "first_name": student['first_name'],
                        "username": student['username'],
                        "type": "private"
                    },
                    "date": int(time.time()),
                    "text": message_text or "/start"
                }
            }
        
        return update
    
    async def send_update(self, session: aiohttp.ClientSession, student: Dict, 
                         message_text: str = None, callback_data: str = None) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ update –Ω–∞ webhook"""
        update = self.create_telegram_update(student, message_text, callback_data)
        
        start_time = time.time()
        try:
            async with session.post(
                self.webhook_url,
                json=update,
                headers={'Content-Type': 'application/json'},
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                response_time = time.time() - start_time
                status = response.status
                
                result = {
                    'student_id': student['user_id'],
                    'action': callback_data or message_text or '/start',
                    'response_time': response_time,
                    'status_code': status,
                    'success': status == 200,
                    'timestamp': datetime.now().isoformat()
                }
                
                if status != 200:
                    result['error'] = await response.text()
                
                return result
                
        except Exception as e:
            response_time = time.time() - start_time
            return {
                'student_id': student['user_id'],
                'action': callback_data or message_text or '/start',
                'response_time': response_time,
                'status_code': 0,
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    async def simulate_homework_flow(self, session: aiohttp.ClientSession, student: Dict) -> List[Dict]:
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        results = []
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞
        actions = [
            ('/start', None),
            (None, 'homework'),  # –í—ã–±–æ—Ä –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
            (None, 'course_1'),  # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
            (None, 'subject_1'), # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
            (None, 'lesson_1'),  # –í—ã–±–æ—Ä —É—Ä–æ–∫–∞
            (None, 'homework_1'), # –í—ã–±–æ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            (None, 'start_test'), # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (15 –≤–æ–ø—Ä–æ—Å–æ–≤)
        for i in range(15):
            answer = random.choice(['A', 'B', 'C', 'D'])
            actions.append((None, f'answer_{answer}'))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        for i, (message, callback) in enumerate(actions):
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (0.5-2 —Å–µ–∫—É–Ω–¥—ã)
            if i > 0:
                await asyncio.sleep(random.uniform(0.5, 2.0))
            
            result = await self.send_update(session, student, message, callback)
            results.append(result)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if not result['success']:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student['user_id']}: {result.get('error', 'Unknown error')}")
        
        return results
    
    async def run_concurrent_test(self, student_count: int = 50) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç —Å {student_count} —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        self.students = self.generate_students(student_count)
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
        connector = aiohttp.TCPConnector(limit=100, limit_per_host=50)
        async with aiohttp.ClientSession(connector=connector) as session:
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            tasks = []
            for student in self.students:
                task = asyncio.create_task(
                    self.simulate_homework_flow(session, student)
                )
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            all_results = await asyncio.gather(*tasks, return_exceptions=True)
        
        total_time = time.time() - start_time
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_students = 0
        failed_students = 0
        all_response_times = []
        
        for student_results in all_results:
            if isinstance(student_results, Exception):
                failed_students += 1
                logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_results}")
                continue
            
            student_successful = True
            for result in student_results:
                all_response_times.append(result['response_time'])
                if not result['success']:
                    student_successful = False
            
            if student_successful:
                successful_students += 1
            else:
                failed_students += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_students': student_count,
            'successful_students': successful_students,
            'failed_students': failed_students,
            'success_rate': (successful_students / student_count) * 100,
            'total_test_time': total_time,
            'total_requests': len(all_response_times),
            'avg_response_time': sum(all_response_times) / len(all_response_times) if all_response_times else 0,
            'min_response_time': min(all_response_times) if all_response_times else 0,
            'max_response_time': max(all_response_times) if all_response_times else 0,
            'requests_per_second': len(all_response_times) / total_time if total_time > 0 else 0
        }
        
        logger.info(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {successful_students}/{student_count} ({stats['success_rate']:.1f}%)")
        logger.info(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']:.3f}—Å")
        logger.info(f"üî• –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {stats['requests_per_second']:.1f}")
        
        return stats


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    WEBHOOK_URL = "https://edubot.schoolpro.kz/webhook"  # –í–∞—à webhook URL
    BOT_TOKEN = "your_bot_token"  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è webhook —Ç–µ—Å—Ç–æ–≤
    
    tester = HomeworkLoadTester(WEBHOOK_URL, BOT_TOKEN)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    test_scenarios = [10, 25, 50]
    
    for student_count in test_scenarios:
        logger.info(f"\n{'='*50}")
        logger.info(f"–¢–ï–°–¢ –° {student_count} –°–¢–£–î–ï–ù–¢–ê–ú–ò")
        logger.info(f"{'='*50}")
        
        stats = await tester.run_concurrent_test(student_count)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open(f'logs/load_test_results_{student_count}students_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json', 'w') as f:
            json.dump(stats, f, indent=2, ensure_ascii=False)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        if student_count != test_scenarios[-1]:
            logger.info("‚è≥ –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
            await asyncio.sleep(30)


if __name__ == "__main__":
    asyncio.run(main())
