"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import subprocess
import sys
import os
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')
logger = logging.getLogger(__name__)

def run_command(command: str, description: str = None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ shell"""
    if description:
        logger.info(f"üîß {description}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        if result.stdout:
            logger.info(result.stdout.strip())
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        logger.error(f"‚ùå {e.stderr}")
        return False

def install_python_packages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    packages = [
        "py-spy",           # –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
        "snakeviz",         # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è cProfile
        "memory-profiler",  # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        "psutil",          # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        "aiohttp-devtools", # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è aiohttp
        "line-profiler",   # –ü–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        "pympler",         # –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
        "objgraph",        # –ì—Ä–∞—Ñ –æ–±—ä–µ–∫—Ç–æ–≤
    ]
    
    logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    for package in packages:
        if run_command(f"pip install {package}", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}"):
            logger.info(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}")

def create_profiling_scripts():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è py-spy –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    py_spy_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å py-spy

PID=$(pgrep -f "python.*main.py")

if [ -z "$PID" ]; then
    echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

echo "üîç –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ $PID —Å py-spy..."

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
mkdir -p profiling_results

# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
py-spy record -o profiling_results/profile_$(date +%Y%m%d_%H%M%S).svg -d 60 -p $PID

echo "‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ profiling_results/"
"""
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
    memory_monitor_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏

PID=$(pgrep -f "python.*main.py")

if [ -z "$PID" ]; then
    echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

echo "üß† –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ $PID..."

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
mkdir -p profiling_results

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
mprof run --interval 5 --timeout 300 --output profiling_results/memory_$(date +%Y%m%d_%H%M%S).dat python -c "
import time
import psutil
import os

pid = $PID
process = psutil.Process(pid)

print(f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}')
for i in range(60):  # 5 –º–∏–Ω—É—Ç
    try:
        memory_info = process.memory_info()
        print(f'RSS: {memory_info.rss / 1024 / 1024:.1f}MB, VMS: {memory_info.vms / 1024 / 1024:.1f}MB')
        time.sleep(5)
    except psutil.NoSuchProcess:
        print('–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω')
        break
"

echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω"
"""
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è cProfile
    cprofile_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å cProfile

echo "üìä –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å cProfile..."

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
mkdir -p profiling_results

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
python -m cProfile -o profiling_results/cprofile_$(date +%Y%m%d_%H%M%S).prof main.py &

PROF_PID=$!
echo "üîç –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: $PROF_PID)"
echo "‚è±Ô∏è –î–∞–π—Ç–µ –±–æ—Ç—É –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"

# –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
trap "kill $PROF_PID; echo '‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'" INT

wait $PROF_PID
"""
    
    scripts = {
        "scripts/profile_with_py_spy.sh": py_spy_script,
        "scripts/monitor_memory.sh": memory_monitor_script,
        "scripts/profile_with_cprofile.sh": cprofile_script
    }
    
    logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    for script_path, content in scripts.items():
        try:
            Path(script_path).parent.mkdir(exist_ok=True)
            with open(script_path, 'w') as f:
                f.write(content)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            os.chmod(script_path, 0o755)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç: {script_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {script_path}: {e}")

def create_analysis_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    analysis_script = """#!/usr/bin/env python3
\"\"\"
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
\"\"\"
import os
import sys
import subprocess
from pathlib import Path

def analyze_cprofile(prof_file):
    \"\"\"–ê–Ω–∞–ª–∏–∑ cProfile —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\"\"\"
    print(f"üìä –ê–Ω–∞–ª–∏–∑ cProfile: {prof_file}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º snakeviz –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    try:
        subprocess.run([sys.executable, "-m", "snakeviz", prof_file], check=True)
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ snakeviz")
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø —Ñ—É–Ω–∫—Ü–∏–π
    try:
        result = subprocess.run([
            sys.executable, "-c", 
            f"import pstats; p = pstats.Stats('{prof_file}'); p.sort_stats('cumulative').print_stats(20)"
        ], capture_output=True, text=True)
        
        print("üîù –¢–æ–ø 20 —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(result.stdout)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def main():
    profiling_dir = Path("profiling_results")
    
    if not profiling_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ profiling_results –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    prof_files = list(profiling_dir.glob("*.prof"))
    svg_files = list(profiling_dir.glob("*.svg"))
    dat_files = list(profiling_dir.glob("*.dat"))
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  ‚Ä¢ cProfile: {len(prof_files)}")
    print(f"  ‚Ä¢ py-spy SVG: {len(svg_files)}")
    print(f"  ‚Ä¢ Memory data: {len(dat_files)}")
    
    if prof_files:
        latest_prof = max(prof_files, key=os.path.getctime)
        analyze_cprofile(latest_prof)
    
    if svg_files:
        latest_svg = max(svg_files, key=os.path.getctime)
        print(f"üî• –ü–æ—Å–ª–µ–¥–Ω–∏–π flame graph: {latest_svg}")
        print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    
    if dat_files:
        latest_dat = max(dat_files, key=os.path.getctime)
        print(f"üß† –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏: {latest_dat}")
        try:
            subprocess.run([sys.executable, "-m", "mprof", "plot", str(latest_dat)])
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–∞–º—è—Ç–∏")

if __name__ == "__main__":
    main()
"""
    
    script_path = "scripts/analyze_profiling.py"
    
    try:
        with open(script_path, 'w') as f:
            f.write(analysis_script)
        
        os.chmod(script_path, 0o755)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞: {script_path}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        "profiling_results",
        "logs",
        "scripts"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
    install_python_packages()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
    create_profiling_scripts()
    create_analysis_script()
    
    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    logger.info("  ‚Ä¢ scripts/profile_with_py_spy.sh - –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å py-spy")
    logger.info("  ‚Ä¢ scripts/monitor_memory.sh - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏")
    logger.info("  ‚Ä¢ scripts/profile_with_cprofile.sh - –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å cProfile")
    logger.info("  ‚Ä¢ scripts/analyze_profiling.py - –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    logger.info("  ‚Ä¢ scripts/performance_monitor.py - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    logger.info("  ‚Ä¢ scripts/load_test_homework.py - –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

if __name__ == "__main__":
    main()
