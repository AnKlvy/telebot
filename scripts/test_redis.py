#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""
import asyncio
import sys
import os
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env.dev –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
load_dotenv('.env.dev')

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º REDIS_HOST –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
os.environ['REDIS_HOST'] = 'localhost'

from utils.redis_manager import RedisManager
from utils.config import REDIS_ENABLED, REDIS_HOST, REDIS_PORT


async def test_redis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    print(f"Redis –≤–∫–ª—é—á–µ–Ω: {REDIS_ENABLED}")
    print(f"Redis —Ö–æ—Å—Ç: {REDIS_HOST}:{REDIS_PORT}")
    
    if not REDIS_ENABLED:
        print("‚ùå Redis –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    redis_manager = RedisManager()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await redis_manager.connect()
        
        if not redis_manager.connected:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")
            return False
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
        test_key = "test_key"
        test_value = "test_value"
        
        success = await redis_manager.set(test_key, test_value, ttl=60)
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis")
            return False
        
        print("‚úÖ –ó–∞–ø–∏—Å—å –≤ Redis —É—Å–ø–µ—à–Ω–∞")
        
        retrieved_value = await redis_manager.get(test_key)
        if retrieved_value != test_value:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis. –û–∂–∏–¥–∞–ª–æ—Å—å: {test_value}, –ø–æ–ª—É—á–µ–Ω–æ: {retrieved_value}")
            return False
        
        print("‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ Redis —É—Å–ø–µ—à–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await redis_manager.delete(test_key)
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
        user_id = 12345
        chat_id = 67890
        test_state = "TestState:test"
        test_data = {"key": "value", "number": 42}
        
        success = await redis_manager.set_fsm_state(user_id, chat_id, test_state, test_data)
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            return False
        
        print("‚úÖ –ó–∞–ø–∏—Å—å FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        state, data = await redis_manager.get_fsm_state(user_id, chat_id)
        if state != test_state or data != test_data:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å {test_state}, –ø–æ–ª—É—á–µ–Ω–æ {state}")
            print(f"–î–∞–Ω–Ω—ã–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å {test_data}, –ø–æ–ª—É—á–µ–Ω–æ {data}")
            return False
        
        print("‚úÖ –ß—Ç–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ø–µ—à–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞ FSM –¥–∞–Ω–Ω—ã—Ö
        await redis_manager.clear_fsm_state(user_id, chat_id)
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ FSM –¥–∞–Ω–Ω—ã—Ö")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Redis –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Redis: {e}")
        return False
    
    finally:
        await redis_manager.disconnect()


if __name__ == "__main__":
    result = asyncio.run(test_redis())
    sys.exit(0 if result else 1)
