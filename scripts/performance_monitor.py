"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""
import asyncio
import json
import time
import psutil
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any
import redis.asyncio as redis
from os import getenv
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s'
)
logger = logging.getLogger(__name__)

class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.redis_client = None
        self.monitoring = False
        
    async def connect_redis(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            redis_host = getenv("REDIS_HOST", "redis")
            redis_port = int(getenv("REDIS_PORT", "6379"))
            redis_db = int(getenv("REDIS_DB", "0"))
            redis_password = getenv("REDIS_PASSWORD", None)
            
            self.redis_client = redis.from_url(
                f"redis://{redis_host}:{redis_port}/{redis_db}",
                password=redis_password,
                encoding="utf-8",
                decode_responses=True
            )
            
            await self.redis_client.ping()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            return False
    
    async def get_performance_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ Redis"""
        if not self.redis_client:
            return {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_data = await self.redis_client.get("performance_stats")
            if stats_data:
                stats = json.loads(stats_data)
            else:
                stats = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            current_time = datetime.now()
            five_minutes_ago = current_time - timedelta(minutes=5)
            
            recent_metrics = []
            pattern = "performance_metrics:*"
            keys = await self.redis_client.keys(pattern)
            
            for key in keys:
                try:
                    metric_data = await self.redis_client.get(key)
                    if metric_data:
                        metric = json.loads(metric_data)
                        metric_time = datetime.fromisoformat(metric['timestamp'])
                        if metric_time >= five_minutes_ago:
                            recent_metrics.append(metric)
                except Exception:
                    continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            if recent_metrics:
                response_times = [m['execution_time'] for m in recent_metrics]
                memory_usage = [m['memory_usage'] for m in recent_metrics]
                active_requests = [m['active_requests'] for m in recent_metrics]
                
                stats.update({
                    'recent_avg_response_time': sum(response_times) / len(response_times),
                    'recent_max_response_time': max(response_times),
                    'recent_min_response_time': min(response_times),
                    'recent_avg_memory': sum(memory_usage) / len(memory_usage),
                    'recent_max_active_requests': max(active_requests),
                    'recent_requests_count': len(recent_metrics)
                })
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def get_db_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.redis_client:
            return {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ë–î –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            current_time = datetime.now()
            five_minutes_ago = current_time - timedelta(minutes=5)
            
            db_metrics = []
            pattern = "db_metrics:*"
            keys = await self.redis_client.keys(pattern)
            
            for key in keys:
                try:
                    metric_data = await self.redis_client.get(key)
                    if metric_data:
                        metric = json.loads(metric_data)
                        metric_time = datetime.fromisoformat(metric['timestamp'])
                        if metric_time >= five_minutes_ago:
                            db_metrics.append(metric)
                except Exception:
                    continue
            
            if db_metrics:
                query_times = [m['execution_time'] for m in db_metrics]
                return {
                    'db_queries_count': len(db_metrics),
                    'db_avg_query_time': sum(query_times) / len(query_times),
                    'db_max_query_time': max(query_times),
                    'db_min_query_time': min(query_times),
                    'db_slow_queries': len([t for t in query_times if t > 0.5])
                }
            
            return {}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {}
    
    def get_system_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            # CPU –∏ –ø–∞–º—è—Ç—å
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            net_io = psutil.net_io_counters()
            
            return {
                'cpu_percent': cpu_percent,
                'memory_total_gb': memory.total / (1024**3),
                'memory_used_gb': memory.used / (1024**3),
                'memory_percent': memory.percent,
                'disk_total_gb': disk.total / (1024**3),
                'disk_used_gb': disk.used / (1024**3),
                'disk_percent': (disk.used / disk.total) * 100,
                'network_bytes_sent': net_io.bytes_sent,
                'network_bytes_recv': net_io.bytes_recv
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def format_stats_report(self, perf_stats: Dict, db_stats: Dict, sys_stats: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        report = []
        report.append("=" * 60)
        report.append(f"üìä –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("=" * 60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if perf_stats:
            report.append("\nüöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ë–û–¢–ê:")
            report.append(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {perf_stats.get('total_requests', 0)}")
            report.append(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {perf_stats.get('avg_time', 0):.3f}—Å")
            report.append(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {perf_stats.get('max_time', 0):.3f}—Å")
            report.append(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {perf_stats.get('min_time', 0):.3f}—Å")
            report.append(f"  ‚Ä¢ –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö: {perf_stats.get('max_concurrent', 0)}")
            
            if 'recent_requests_count' in perf_stats:
                report.append(f"\nüìà –ü–û–°–õ–ï–î–ù–ò–ï 5 –ú–ò–ù–£–¢:")
                report.append(f"  ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {perf_stats.get('recent_requests_count', 0)}")
                report.append(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {perf_stats.get('recent_avg_response_time', 0):.3f}—Å")
                report.append(f"  ‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {perf_stats.get('recent_max_response_time', 0):.3f}—Å")
                report.append(f"  ‚Ä¢ –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–Ω—ã—Ö: {perf_stats.get('recent_max_active_requests', 0)}")
                report.append(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å: {perf_stats.get('recent_avg_memory', 0):.1f}MB")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        if db_stats:
            report.append(f"\nüóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–• (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω):")
            report.append(f"  ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î: {db_stats.get('db_queries_count', 0)}")
            report.append(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {db_stats.get('db_avg_query_time', 0):.3f}—Å")
            report.append(f"  ‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {db_stats.get('db_max_query_time', 0):.3f}—Å")
            report.append(f"  ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {db_stats.get('db_slow_queries', 0)}")
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if sys_stats:
            report.append(f"\nüíª –°–ò–°–¢–ï–ú–ê:")
            report.append(f"  ‚Ä¢ CPU: {sys_stats.get('cpu_percent', 0):.1f}%")
            report.append(f"  ‚Ä¢ –ü–∞–º—è—Ç—å: {sys_stats.get('memory_used_gb', 0):.1f}GB / {sys_stats.get('memory_total_gb', 0):.1f}GB ({sys_stats.get('memory_percent', 0):.1f}%)")
            report.append(f"  ‚Ä¢ –î–∏—Å–∫: {sys_stats.get('disk_used_gb', 0):.1f}GB / {sys_stats.get('disk_total_gb', 0):.1f}GB ({sys_stats.get('disk_percent', 0):.1f}%)")
        
        report.append("=" * 60)
        return "\n".join(report)
    
    async def monitor_loop(self, interval: int = 30):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥")
        self.monitoring = True
        
        while self.monitoring:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                perf_stats = await self.get_performance_stats()
                db_stats = await self.get_db_stats()
                sys_stats = self.get_system_stats()
                
                # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
                report = self.format_stats_report(perf_stats, db_stats, sys_stats)
                print(report)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                await self.check_alerts(perf_stats, db_stats, sys_stats)
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await asyncio.sleep(interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(5)
    
    async def check_alerts(self, perf_stats: Dict, db_stats: Dict, sys_stats: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if perf_stats.get('recent_avg_response_time', 0) > 2.0:
            alerts.append("üö® –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        if sys_stats.get('memory_percent', 0) > 80:
            alerts.append("üö® –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU
        if sys_stats.get('cpu_percent', 0) > 80:
            alerts.append("üö® –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
        if db_stats.get('db_slow_queries', 0) > 5:
            alerts.append("üö® –ú–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î!")
        
        if alerts:
            logger.warning("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
            for alert in alerts:
                logger.warning(f"  {alert}")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring = False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = PerformanceMonitor()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
    if not await monitor.connect_redis():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await monitor.monitor_loop(interval=30)
    except KeyboardInterrupt:
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        if monitor.redis_client:
            await monitor.redis_client.close()


if __name__ == "__main__":
    asyncio.run(main())
