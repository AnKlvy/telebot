"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import StudentRepository, BonusTestRepository, StudentBonusTestRepository


async def buy_bonus_test_for_testing():
    """–ö—É–ø–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üõí –ü–æ–∫—É–ø–∫–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        from database.repositories.student_repository import StudentRepository as StudentRepo
        students = await StudentRepo.get_all()
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}")
        for i, s in enumerate(students[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
            user_name = s.user.name if s.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            telegram_id = s.user.telegram_id if s.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            print(f"   {i}. {user_name} (TG: {telegram_id})")

        # –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ê–Ω–¥—Ä–µ—è –ö–ª–∏–º–æ–≤–∞ (–ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ ID)
        student = None
        test_ids = [123456789, 987654321, 1234567890]

        for test_id in test_ids:
            student = await StudentRepository.get_by_telegram_id(test_id)
            if student:
                user_name = student.user.name if student.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç —Å ID {test_id}: {user_name}")
                break

        if not student and students:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = students[0]
            user_name = student.user.name if student.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            telegram_id = student.user.telegram_id if student.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: {user_name} (TG: {telegram_id})")

        if not student:
            print("‚ùå –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        user_name = student.user.name if student.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        print(f"üë§ –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {user_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
        balance = await StudentRepository.get_balance(student.id)
        print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance['coins']} –º–æ–Ω–µ—Ç, {balance['points']} –±–∞–ª–ª–æ–≤")
        
        # –ï—Å–ª–∏ –º–∞–ª–æ –º–æ–Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
        if balance['coins'] < 100:
            print("üí∞ –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏...")
            await StudentRepository.add_coins(student.id, 200)
            new_balance = await StudentRepository.get_balance(student.id)
            print(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance['coins']} –º–æ–Ω–µ—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = await BonusTestRepository.get_all()
        if not tests:
            print("‚ùå –ë–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # –ü–æ–∫—É–ø–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞)
        test = tests[0]  # –¢–µ—Å—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
        print(f"üß™ –ü–æ–∫—É–ø–∞–µ–º —Ç–µ—Å—Ç: {test.name} –∑–∞ {test.price} –º–æ–Ω–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ —É–∂–µ
        already_purchased = await StudentBonusTestRepository.has_purchased_test(student.id, test.id)
        if already_purchased:
            print("‚ö†Ô∏è –¢–µ—Å—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            purchases = await StudentBonusTestRepository.get_student_bonus_tests(student.id)
            print(f"üì¶ –ö—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(purchases)}")
            for i, purchase in enumerate(purchases, 1):
                print(f"   {i}. {purchase.bonus_test.name} - {purchase.price_paid} –º–æ–Ω–µ—Ç")
            return
        
        # –ü–æ–∫—É–ø–∞–µ–º —Ç–µ—Å—Ç
        success = await StudentRepository.spend_coins(student.id, test.price)
        if success:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
            purchase = await StudentBonusTestRepository.create_purchase(student.id, test.id, test.price)
            print(f"‚úÖ –¢–µ—Å—Ç –∫—É–ø–ª–µ–Ω! ID –ø–æ–∫—É–ø–∫–∏: {purchase.id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            final_balance = await StudentRepository.get_balance(student.id)
            print(f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {final_balance['coins']} –º–æ–Ω–µ—Ç")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å —Ç–µ—Å—Ç!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(buy_bonus_test_for_testing())
