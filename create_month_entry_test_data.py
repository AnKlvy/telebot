"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞
"""
import asyncio
from database import (
    MonthEntryTestResultRepository, StudentRepository, MonthTestRepository, 
    QuestionRepository, HomeworkRepository, LessonRepository
)


async def create_month_entry_test_results():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞"""
    try:
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        existing_results = await MonthEntryTestResultRepository.get_all()
        if existing_results:
            print("   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Ç–µ—Å—Ç—ã –º–µ—Å—è—Ü–∞
        students = await StudentRepository.get_all()
        month_tests = await MonthTestRepository.get_all()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã
        entry_tests = [mt for mt in month_tests if mt.test_type == 'entry']
        
        if not students or not entry_tests:
            print("   ‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç—ã –∏–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–µ—Å—è—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø –ú-1 –∏ PY-1
        test_data = [
            # –ì—Ä—É–ø–ø–∞ –ú-1 (–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞) - —Ç–µ—Å—Ç "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ"
            {
                "student_name": "–ê—Ä—É–∂–∞–Ω –ê—Ö–º–µ—Ç–æ–≤–∞",  # –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –ú-1
                "month_test_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ",
                "test_type": "entry",
                "correct_percentage": 85,  # 85% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            },
            {
                "student_name": "–ê—Ä—É–∂–∞–Ω –ê—Ö–º–µ—Ç–æ–≤–∞",  # –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –ú-1
                "month_test_name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–≥—É—Ä—ã",
                "test_type": "entry",
                "correct_percentage": 72,  # 72% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            },
            
            # –ì—Ä—É–ø–ø–∞ PY-1 (Python) - —Ç–µ—Å—Ç "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
            {
                "student_name": "–ú—É—Ö–∞–Ω–±–µ—Ç–∂–∞–Ω –û–ª–∂–∞—Å",  # –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã PY-1
                "month_test_name": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "test_type": "entry",
                "correct_percentage": 90,  # 90% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            },
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            {
                "student_name": "–ë–µ–∫–∑–∞—Ç –°–µ—Ä–∏–∫–æ–≤",  # –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã PY-2
                "month_test_name": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "test_type": "entry", 
                "correct_percentage": 65,  # 65% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            },
            {
                "student_name": "–ï—Ä–∞—Å—ã–ª –ú—É—Ö–∞–º–µ–¥–æ–≤",  # –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –ú-2
                "month_test_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ",
                "test_type": "entry",
                "correct_percentage": 78,  # 78% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            },
            {
                "student_name": "–ï—Ä–∞—Å—ã–ª –ú—É—Ö–∞–º–µ–¥–æ–≤",  # –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –ú-2
                "month_test_name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–≥—É—Ä—ã",
                "test_type": "entry",
                "correct_percentage": 55,  # 55% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            }
        ]

        created_count = 0
        
        for data in test_data:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = None
            for s in students:
                if s.user.name == data["student_name"]:
                    student = s
                    break
            
            if not student:
                print(f"   ‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç '{data['student_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue

            # –ù–∞—Ö–æ–¥–∏–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞
            month_test = None
            for mt in entry_tests:
                if mt.name == data["month_test_name"] and mt.test_type == data["test_type"]:
                    month_test = mt
                    break
            
            if not month_test:
                print(f"   ‚ö†Ô∏è –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞ '{data['month_test_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ —É–∂–µ —Å—Ç—É–¥–µ–Ω—Ç —ç—Ç–æ—Ç —Ç–µ—Å—Ç
            if await MonthEntryTestResultRepository.has_student_taken_test(student.id, month_test.id):
                print(f"   ‚ö†Ô∏è {student.user.name} —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç '{month_test.name}'")
                continue

            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –î–ó –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º —Ç–µ—Å—Ç–∞
            total_questions = 9  # 3 –º–∏–∫—Ä–æ—Ç–µ–º—ã * 3 –≤–æ–ø—Ä–æ—Å–∞
            target_correct = int(total_questions * data["correct_percentage"] / 100)
            
            question_results = []
            for i in range(total_questions):
                # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                microtopic_number = (i // 3) + 1  # –ú–∏–∫—Ä–æ—Ç–µ–º—ã 1, 2, 3
                is_correct = i < target_correct
                
                question_results.append({
                    'question_id': 1,  # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞
                    'selected_answer_id': 1,  # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π ID –æ—Ç–≤–µ—Ç–∞
                    'is_correct': is_correct,
                    'time_spent': 25,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                    'microtopic_number': microtopic_number
                })

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
            test_result = await MonthEntryTestResultRepository.create_test_result(
                student_id=student.id,
                month_test_id=month_test.id,
                question_results=question_results
            )

            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ —Å–æ–∑–¥–∞–Ω: {student.user.name} - {month_test.name} ({test_result.score_percentage}%)")
            created_count += 1

        print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ: {created_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await create_month_entry_test_results()


if __name__ == "__main__":
    asyncio.run(main())
