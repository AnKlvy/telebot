from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from keyboards import get_test_answers_kb, get_after_test_kb

# –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
TEST_QUESTIONS = {
    1: {
        "text": "–ö–∞–∫–æ–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–º–µ—Ä–æ–º –±—É—Ç–∞–Ω–∞?",
        "options": {
            "A": "–ü—Ä–æ–ø–∞–Ω",
            "B": "2-–º–µ—Ç–∏–ª–ø—Ä–æ–ø–∞–Ω",
            "C": "–ü–µ–Ω—Ç–∞–Ω",
            "D": "–≠—Ç–∞–Ω"
        },
        "correct": "B"
    },
    2: {
        "text": "–ö–∞–∫–æ–π —Ç–∏–ø –∏–∑–æ–º–µ—Ä–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ–Ω –¥–ª—è –∞–ª–∫–∞–Ω–æ–≤?",
        "options": {
            "A": "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è",
            "B": "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è",
            "C": "–û–ø—Ç–∏—á–µ—Å–∫–∞—è",
            "D": "–¢–∞—É—Ç–æ–º–µ—Ä–∏—è"
        },
        "correct": "B"
    },
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
}

async def start_test_process(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
    user_data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(
        test_started=True,
        total_questions=len(TEST_QUESTIONS),
        current_question=1,
        correct_answers=0,
        user_answers={}
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_question(callback, state, 1)

async def show_question(callback: CallbackQuery, state: FSMContext, question_number: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    if question_number not in TEST_QUESTIONS:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        await finish_test(callback, state)
        return
    
    question = TEST_QUESTIONS[question_number]
    options_text = "\n".join([f"{key}) {value}" for key, value in question["options"].items()])
    
    await callback.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å {question_number}/{len(TEST_QUESTIONS)}\n\n"
        f"{question['text']}\n\n"
        f"{options_text}",
        reply_markup=get_test_answers_kb()
    )

async def process_test_answer(callback: CallbackQuery, state: FSMContext, selected_answer: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    user_data = await state.get_data()
    current_question = user_data.get("current_question", 1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = selected_answer == TEST_QUESTIONS[current_question]["correct"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers = user_data.get("user_answers", {})
    user_answers[current_question] = {
        "selected": selected_answer,
        "correct": is_correct
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    correct_answers = user_data.get("correct_answers", 0)
    if is_correct:
        correct_answers += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    next_question = current_question + 1
    await state.update_data(
        current_question=next_question,
        correct_answers=correct_answers,
        user_answers=user_answers
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if next_question <= len(TEST_QUESTIONS):
        await show_question(callback, state, next_question)
    else:
        # –ò–Ω–∞—á–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        await finish_test(callback, state)

async def finish_test(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user_data = await state.get_data()
    total_questions = user_data.get("total_questions", len(TEST_QUESTIONS))
    correct_answers = user_data.get("correct_answers", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    success = correct_answers == total_questions
    
    if success:
        await callback.message.edit_text(
            "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
            f"–í–µ—Ä–Ω—ã—Ö: {correct_answers} / {total_questions}\n"
            "üéØ –ù–∞—á–∏—Å–ª–µ–Ω–æ: 45 –±–∞–ª–ª–æ–≤\n"
            "üìà –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_markup=get_after_test_kb()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
            f"–í–µ—Ä–Ω—ã—Ö: {correct_answers} / {total_questions}\n"
            "–ë–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã ‚Äî –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ 100%\n"
            "–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞!\n"
            "üìà –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_markup=get_after_test_kb()
        )