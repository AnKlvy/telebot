from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards import get_main_menu_kb, get_courses_kb, get_subjects_kb, get_lessons_kb, get_homeworks_kb, \
    get_confirm_kb

router = Router()

class HomeworkStates(StatesGroup):
    course = State()
    subject = State()
    lesson = State()
    homework = State()
    confirmation = State()

@router.message(CommandStart())
async def main_menu_command(message: Message):
    await show_main_menu(message)

@router.message(F.text.func(lambda text: text.lower() == "–º–µ–Ω—é"))
async def main_menu_text(message: Message):
    await show_main_menu(message)

async def show_main_menu(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –¥–æ–º–∞—à–∫–∏, –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Ç–µ–º—ã, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ù–¢.\n"
        "–ù–∏–∂–µ ‚Äî –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:",
        reply_markup=get_main_menu_kb()
    )

@router.callback_query(F.data == "homework")
async def choose_course(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=get_courses_kb()
    )
    await state.set_state(HomeworkStates.course)

@router.callback_query(HomeworkStates.course, F.data.startswith("course_"))
async def choose_subject(callback: CallbackQuery, state: FSMContext):
    await state.update_data(course=callback.data)
    await callback.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–µ–º—ã –∏ –∑–∞–¥–∞–Ω–∏—è üìö",
        reply_markup=get_subjects_kb()
    )
    await state.set_state(HomeworkStates.subject)

@router.callback_query(HomeworkStates.subject, F.data.startswith("sub_"))
async def choose_lesson(callback: CallbackQuery, state: FSMContext):
    await state.update_data(subject=callback.data)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüëá",
        reply_markup=get_lessons_kb()
    )
    await state.set_state(HomeworkStates.lesson)


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await show_main_menu(callback.message)
    await state.clear()

@router.callback_query(F.data == "back_to_course")
async def back_to_course(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=get_courses_kb()
    )
    await state.set_state(HomeworkStates.course)

@router.callback_query(F.data == "back_to_subject")
async def back_to_subject(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–µ–º—ã –∏ –∑–∞–¥–∞–Ω–∏—è üìö",
        reply_markup=get_subjects_kb()
    )
    await state.set_state(HomeworkStates.subject)

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
STATE_TRANSITIONS = {
    HomeworkStates.confirmation: HomeworkStates.homework,
    HomeworkStates.homework: HomeworkStates.lesson,
    HomeworkStates.lesson: HomeworkStates.subject,
    HomeworkStates.subject: HomeworkStates.course,
    HomeworkStates.course: None  # None –æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
}

# –°–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_HANDLERS = {
    HomeworkStates.course: choose_course,
    HomeworkStates.subject: choose_subject,
    HomeworkStates.lesson: choose_lesson,
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

@router.callback_query(F.data == "back")
async def go_back(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    
    if not current_state or current_state not in STATE_TRANSITIONS:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –Ω–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.delete()
        await show_main_menu(callback.message)
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    prev_state = STATE_TRANSITIONS[current_state]
    
    if prev_state is None:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.delete()
        await show_main_menu(callback.message)
        await state.clear()
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if prev_state in STATE_HANDLERS:
        await STATE_HANDLERS[prev_state](callback, state)
    else:
        # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.delete()
        await show_main_menu(callback.message)
        await state.clear()