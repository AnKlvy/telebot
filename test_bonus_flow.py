"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import (
    StudentRepository, BonusTestRepository, StudentBonusTestRepository,
    BonusQuestionRepository, BonusAnswerOptionRepository
)


async def test_full_bonus_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –∫—É–ø–ª–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–æ–º
        student = await StudentRepository.get_by_telegram_id(333444555)  # –ú—É—Ö–∞–Ω–±–µ—Ç–∂–∞–Ω –û–ª–∂–∞—Å
        if not student:
            print("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        print(f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {student.user.name}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        purchases = await StudentBonusTestRepository.get_student_bonus_tests(student.id)
        if not purchases:
            print("‚ùå –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"üì¶ –ö—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(purchases)}")
        
        # 3. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        purchase = purchases[0]
        bonus_test = purchase.bonus_test
        print(f"üß™ –¢–µ—Å—Ç: {bonus_test.name} (ID: {bonus_test.id})")
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        question_repo = BonusQuestionRepository()
        questions = await question_repo.get_by_bonus_test(bonus_test.id)
        print(f"üìù –í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {len(questions)}")
        
        if not questions:
            print("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ –≤ –±–æ—Ç–µ
        test_state_data = {
            'student_id': student.id,
            'user_id': student.user.telegram_id,
            'bonus_test_id': bonus_test.id,  # –ö–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ!
            'bonus_test_purchase_id': purchase.id,
            'bonus_test_name': bonus_test.name,
            'score': 0,
            'q_index': 0,
            'total_questions': len(questions),
            'question_results': [],
            'messages_to_delete': [],
            'questions': [{
                'id': q.id,
                'text': q.text,
                'photo_path': q.photo_path,
                'time_limit': q.time_limit,
                'microtopic_number': None  # –£ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç –º–∏–∫—Ä–æ—Ç–µ–º
            } for q in questions]
        }
        
        print(f"\nüìã –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
        print(f"   bonus_test_id: {test_state_data.get('bonus_test_id')}")
        print(f"   questions count: {len(test_state_data.get('questions', []))}")
        print(f"   q_index: {test_state_data.get('q_index')}")
        
        # 6. –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É send_next_question
        index = test_state_data.get("q_index", 0)
        questions_data = test_state_data.get("questions", [])
        
        if index >= len(questions_data):
            print("‚ùå –ò–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤!")
            return
        
        question_data = questions_data[index]
        question_id = question_data['id']
        
        print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ {index + 1}:")
        print(f"   ID: {question_id}")
        print(f"   –¢–µ–∫—Å—Ç: {question_data['text']}")
        print(f"   –í—Ä–µ–º—è: {question_data['time_limit']} —Å–µ–∫")
        
        # 7. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞
        is_bonus_test = test_state_data.get("bonus_test_id") is not None
        print(f"   is_bonus_test: {is_bonus_test}")
        
        if is_bonus_test:
            # 8. –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            answer_options = await BonusAnswerOptionRepository.get_by_bonus_question(question_id)
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {len(answer_options)}")
            
            if answer_options:
                print("   –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:")
                for i, opt in enumerate(answer_options, 1):
                    status = "‚úÖ" if opt.is_correct else "‚ùå"
                    print(f"      {i}. {opt.text} {status}")
                
                # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                correct_options = [opt for opt in answer_options if opt.is_correct]
                if len(correct_options) == 1:
                    print("‚úÖ –û–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω")
                elif len(correct_options) == 0:
                    print("‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                else:
                    print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(correct_options)}")
                
                print("‚úÖ –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã!")
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –±–æ–Ω—É—Å–Ω—ã–π!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_full_bonus_flow())
