
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import logging

from common.keyboards import get_main_menu_back_button, get_home_kb
from common.manager_tests.register_handlers import register_test_handlers
from .main import show_manager_main_menu

from aiogram.fsm.state import State, StatesGroup

class BonusTestStates(StatesGroup):
    main = State()
    select_course = State()
    select_subject = State()
    select_lesson = State()
    enter_test_name = State()
    add_question = State()
    select_topic = State()
    enter_question_text = State()
    add_question_photo = State()
    enter_answer_options = State()
    select_correct_answer = State()
    set_time_limit = State()
    confirm_test = State()
    enter_price = State()
    delete_test = State()
    select_test_to_delete = State()
    request_topic = State()
    process_topic = State()
    process_photo = State()
    skip_photo = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = Router()

def get_bonus_test_management_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç", callback_data="add_bonus_test")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç", callback_data="delete_bonus_test")],
        *get_main_menu_back_button()
    ])

def get_price_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã –≤ –º–æ–Ω–µ—Ç–∞—Ö"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="50 –º–æ–Ω–µ—Ç", callback_data="price_50")],
        [InlineKeyboardButton(text="100 –º–æ–Ω–µ—Ç", callback_data="price_100")],
        [InlineKeyboardButton(text="150 –º–æ–Ω–µ—Ç", callback_data="price_150")],
        [InlineKeyboardButton(text="200 –º–æ–Ω–µ—Ç", callback_data="price_200")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="price_custom")],
        *get_main_menu_back_button()
    ])

def get_confirm_bonus_test_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data="confirm_bonus_test")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_bonus_test")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_bonus_test")]
    ])

@router.callback_query(F.data == "manager_bonus_test")
async def show_bonus_test_management(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ show_bonus_test_management")

    await callback.message.edit_text(
        "üß™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏\n\n"
        "–ë–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ —É —É—á–µ–Ω–∏–∫–æ–≤ –∏ –ø–æ–∫—É–ø–∞—é—Ç—Å—è –∑–∞ –º–æ–Ω–µ—Ç—ã.",
        reply_markup=get_bonus_test_management_kb()
    )
    await state.set_state(BonusTestStates.main)

@router.callback_query(BonusTestStates.main, F.data == "add_bonus_test")
async def start_add_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–±—â–∏–π –º–æ–¥—É–ª—å"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start_add_bonus_test")
    
    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤ –æ–±—â–µ–º –º–æ–¥—É–ª–µ
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:",
        reply_markup=get_home_kb()
    )
    await state.set_state(BonusTestStates.enter_test_name)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
register_test_handlers(router, BonusTestStates, "bonus_test")

@router.callback_query(BonusTestStates.confirm_test, F.data == "confirm_test")
async def set_bonus_test_price(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã –≤ –º–æ–Ω–µ—Ç–∞—Ö –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±—â–µ–º –º–æ–¥—É–ª–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ set_bonus_test_price")
    
    user_data = await state.get_data()
    test_name = user_data.get("test_name", "")
    questions = user_data.get("questions", [])
    time_limit = user_data.get("time_limit", 0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    time_text = f"{time_limit} —Å–µ–∫."
    if time_limit >= 60:
        minutes = time_limit // 60
        seconds = time_limit % 60
        time_text = f"{minutes} –º–∏–Ω."
        if seconds > 0:
            time_text += f" {seconds} —Å–µ–∫."
    
    await callback.message.edit_text(
        f"üß™ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: {test_name}\n"
        f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
        f"‚è± –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {time_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:",
        reply_markup=get_price_kb()
    )
    await state.set_state(BonusTestStates.enter_price)

@router.callback_query(BonusTestStates.enter_price, F.data.startswith("price_"))
async def process_price_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_price_selection")
    
    price_data = callback.data.replace("price_", "")
    
    if price_data == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö (—á–∏—Å–ª–æ):",
            reply_markup=get_home_kb()
        )
        return
    
    price = int(price_data)
    await state.update_data(price=price)
    await show_bonus_test_confirmation(callback, state)

@router.message(BonusTestStates.enter_price)
async def process_custom_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–Ω—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_custom_price")
    
    try:
        price = int(message.text.strip())
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        await state.update_data(price=price)
        await show_bonus_test_confirmation(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")

async def show_bonus_test_confirmation(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    user_data = await state.get_data()
    test_name = user_data.get("test_name", "")
    questions = user_data.get("questions", [])
    time_limit = user_data.get("time_limit", 0)
    price = user_data.get("price", 0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    time_text = f"{time_limit} —Å–µ–∫."
    if time_limit >= 60:
        minutes = time_limit // 60
        seconds = time_limit % 60
        time_text = f"{minutes} –º–∏–Ω."
        if seconds > 0:
            time_text += f" {seconds} —Å–µ–∫."
    
    confirmation_text = (
        f"üß™ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é:\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test_name}\n"
        f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
        f"‚è± –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {time_text}\n"
        f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:"
    )
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.edit_text(
            confirmation_text,
            reply_markup=get_confirm_bonus_test_kb()
        )
    else:
        await message_or_callback.answer(
            confirmation_text,
            reply_markup=get_confirm_bonus_test_kb()
        )

@router.callback_query(BonusTestStates.enter_price, F.data == "confirm_bonus_test")
async def save_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_bonus_test")
    
    user_data = await state.get_data()
    test_name = user_data.get("test_name", "")
    price = user_data.get("price", 0)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # —Å –ø–æ–º–µ—Ç–∫–æ–π —á—Ç–æ —ç—Ç–æ –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    
    await callback.message.edit_text(
        f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç '{test_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n\n"
        "–¢–µ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–æ–Ω—É—Å–æ–≤ —É —É—á–µ–Ω–∏–∫–æ–≤.",
        reply_markup=get_bonus_test_management_kb()
    )
    await state.set_state(BonusTestStates.main)

@router.callback_query(BonusTestStates.enter_price, F.data == "edit_bonus_test")
async def edit_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_bonus_test")
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:",
        reply_markup=get_price_kb()
    )

@router.callback_query(BonusTestStates.enter_price, F.data == "cancel_bonus_test")
async def cancel_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cancel_bonus_test")
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_bonus_test_management_kb()
    )
    await state.set_state(BonusTestStates.main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
@router.callback_query(BonusTestStates.main, F.data == "delete_bonus_test")
async def show_bonus_tests_to_delete(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ show_bonus_tests_to_delete")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    tests_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –ø–æ –∞–ª–∫–∞–Ω–∞–º - 100 –º–æ–Ω–µ—Ç", callback_data="delete_bonus_1")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –ø–æ –∏–∑–æ–º–µ—Ä–∏–∏ - 150 –º–æ–Ω–µ—Ç", callback_data="delete_bonus_2")],
        *get_main_menu_back_button()
    ])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=tests_kb
    )
    await state.set_state(BonusTestStates.select_test_to_delete)

@router.callback_query(BonusTestStates.select_test_to_delete, F.data.startswith("delete_bonus_"))
async def confirm_delete_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_delete_bonus_test")
    
    test_id = callback.data.replace("delete_bonus_", "")
    await state.update_data(test_id=test_id)
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    test_name = "–¢–µ—Å—Ç –ø–æ –∞–ª–∫–∞–Ω–∞–º" if test_id == "1" else "–¢–µ—Å—Ç –ø–æ –∏–∑–æ–º–µ—Ä–∏–∏"
    
    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç '{test_name}'?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_bonus")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete_bonus")]
        ])
    )

@router.callback_query(F.data == "confirm_delete_bonus")
async def delete_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ delete_bonus_test")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    await callback.message.edit_text(
        "‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=get_bonus_test_management_kb()
    )
    await state.set_state(BonusTestStates.main)

@router.callback_query(F.data == "cancel_delete_bonus")
async def cancel_delete_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cancel_delete_bonus_test")
    
    await show_bonus_tests_to_delete(callback, state)
