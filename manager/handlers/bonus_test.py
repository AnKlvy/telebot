
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import logging

from common.keyboards import get_main_menu_back_button, get_home_kb
from common.manager_tests.register_handlers import register_test_handlers
from .main import show_manager_main_menu

from aiogram.fsm.state import State, StatesGroup

class BonusTestStates(StatesGroup):
    main = State()
    select_course = State()
    select_subject = State()
    select_lesson = State()
    enter_test_name = State()
    add_question = State()
    select_topic = State()
    enter_question_text = State()
    add_question_photo = State()
    enter_answer_options = State()
    select_correct_answer = State()
    set_time_limit = State()
    confirm_test = State()
    enter_price = State()
    delete_test = State()
    select_test_to_delete = State()
    request_topic = State()
    process_topic = State()
    process_photo = State()
    skip_photo = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = Router()

def get_bonus_test_management_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç", callback_data="add_bonus_test")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç", callback_data="delete_bonus_test")],
        *get_main_menu_back_button()
    ])

def get_price_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã –≤ –º–æ–Ω–µ—Ç–∞—Ö"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="50 –º–æ–Ω–µ—Ç", callback_data="price_50")],
        [InlineKeyboardButton(text="100 –º–æ–Ω–µ—Ç", callback_data="price_100")],
        [InlineKeyboardButton(text="150 –º–æ–Ω–µ—Ç", callback_data="price_150")],
        [InlineKeyboardButton(text="200 –º–æ–Ω–µ—Ç", callback_data="price_200")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="price_custom")],
        *get_main_menu_back_button()
    ])

def get_confirm_bonus_test_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data="confirm_bonus_test")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_bonus_test")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_bonus_test")]
    ])

async def get_bonus_tests_list_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    from database import BonusTestRepository

    try:
        bonus_tests = await BonusTestRepository.get_all()

        if not bonus_tests:
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ù–µ—Ç –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤", callback_data="no_tests")],
                *get_main_menu_back_button()
            ])

        keyboard = []
        for test in bonus_tests:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            question_count = len(test.questions) if test.questions else 0
            button_text = f"üß™ {test.name} - {test.price} –º–æ–Ω–µ—Ç ({question_count} –≤–æ–ø—Ä.)"
            keyboard.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"delete_bonus_{test.id}"
            )])

        keyboard.extend(get_main_menu_back_button())
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="error_loading")],
            *get_main_menu_back_button()
        ])

@router.callback_query(F.data == "manager_bonus_test")
async def show_bonus_test_management(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ show_bonus_test_management")

    await callback.message.edit_text(
        "üß™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏\n\n"
        "–ë–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ —É —É—á–µ–Ω–∏–∫–æ–≤ –∏ –ø–æ–∫—É–ø–∞—é—Ç—Å—è –∑–∞ –º–æ–Ω–µ—Ç—ã.",
        reply_markup=get_bonus_test_management_kb()
    )
    await state.set_state(BonusTestStates.main)

@router.callback_query(BonusTestStates.main, F.data == "add_bonus_test")
async def start_add_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–±—â–∏–π –º–æ–¥—É–ª—å"""
    logger.info("üöÄ –°–¢–ê–†–¢: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")

    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤ –æ–±—â–µ–º –º–æ–¥—É–ª–µ
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:",
        reply_markup=get_home_kb()
    )
    await state.set_state(BonusTestStates.enter_test_name)
    logger.info(f"üîÑ –°–û–°–¢–û–Ø–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {BonusTestStates.enter_test_name}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
logger.info("üîß –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å role='bonus_test'")
register_test_handlers(router, BonusTestStates, "bonus_test")

@router.callback_query(BonusTestStates.confirm_test, F.data == "confirm_test")
async def set_bonus_test_price(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã –≤ –º–æ–Ω–µ—Ç–∞—Ö –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±—â–µ–º –º–æ–¥—É–ª–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ set_bonus_test_price")
    
    user_data = await state.get_data()
    test_name = user_data.get("test_name", "")
    questions = user_data.get("questions", [])
    time_limit = user_data.get("time_limit", 0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    time_text = f"{time_limit} —Å–µ–∫."
    if time_limit >= 60:
        minutes = time_limit // 60
        seconds = time_limit % 60
        time_text = f"{minutes} –º–∏–Ω."
        if seconds > 0:
            time_text += f" {seconds} —Å–µ–∫."
    
    await callback.message.edit_text(
        f"üß™ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: {test_name}\n"
        f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:",
        reply_markup=get_price_kb()
    )
    await state.set_state(BonusTestStates.enter_price)

@router.callback_query(BonusTestStates.enter_price, F.data.startswith("price_"))
async def process_price_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_price_selection")
    
    price_data = callback.data.replace("price_", "")
    
    if price_data == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö (—á–∏—Å–ª–æ):",
            reply_markup=get_home_kb()
        )
        return
    
    price = int(price_data)
    await state.update_data(price=price)
    await show_bonus_test_confirmation(callback, state)

@router.message(BonusTestStates.enter_price)
async def process_custom_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–Ω—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_custom_price")
    
    try:
        price = int(message.text.strip())
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        await state.update_data(price=price)
        await show_bonus_test_confirmation(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")

async def show_bonus_test_confirmation(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    user_data = await state.get_data()
    test_name = user_data.get("test_name", "")
    questions = user_data.get("questions", [])
    time_limit = user_data.get("time_limit", 0)
    price = user_data.get("price", 0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    time_text = f"{time_limit} —Å–µ–∫."
    if time_limit >= 60:
        minutes = time_limit // 60
        seconds = time_limit % 60
        time_text = f"{minutes} –º–∏–Ω."
        if seconds > 0:
            time_text += f" {seconds} —Å–µ–∫."
    
    confirmation_text = (
        f"üß™ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é:\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test_name}\n"
        f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
        f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:"
    )
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.edit_text(
            confirmation_text,
            reply_markup=get_confirm_bonus_test_kb()
        )
    else:
        await message_or_callback.answer(
            confirmation_text,
            reply_markup=get_confirm_bonus_test_kb()
        )

@router.callback_query(BonusTestStates.enter_price, F.data == "confirm_bonus_test")
async def save_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_bonus_test")

    try:
        user_data = await state.get_data()
        test_name = user_data.get("test_name", "")
        price = user_data.get("price", 0)
        questions = user_data.get("questions", [])

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        from database import BonusTestRepository, BonusQuestionRepository, BonusAnswerOptionRepository

        # –°–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç
        bonus_test = await BonusTestRepository.create(name=test_name, price=price)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç: {bonus_test.id} - {bonus_test.name}")

        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        for question_data in questions:
            # –ü–æ–ª—É—á–∞–µ–º photo_path –∏–∑ photo_id (file_id –æ—Ç Telegram)
            photo_path = question_data.get("photo_id")

            # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
            bonus_question_repo = BonusQuestionRepository()
            question = await bonus_question_repo.create(
                bonus_test_id=bonus_test.id,
                text=question_data.get("text", ""),
                photo_path=photo_path,
                time_limit=question_data.get("time_limit", 30)
            )

            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            answer_options = []
            for letter, text in question_data.get("options", {}).items():
                is_correct = (letter == question_data.get("correct_answer"))
                answer_options.append({
                    'text': text,
                    'is_correct': is_correct
                })

            if answer_options:
                await BonusAnswerOptionRepository.create_multiple(question.id, answer_options)

        await callback.message.edit_text(
            f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç '{test_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n"
            f"üìã –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n\n"
            "–¢–µ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–æ–Ω—É—Å–æ–≤ —É —É—á–µ–Ω–∏–∫–æ–≤.",
            reply_markup=get_bonus_test_management_kb()
        )
        await state.set_state(BonusTestStates.main)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_bonus_test_management_kb()
        )
        await state.set_state(BonusTestStates.main)

@router.callback_query(BonusTestStates.enter_price, F.data == "edit_bonus_test")
async def edit_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_bonus_test")
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:",
        reply_markup=get_price_kb()
    )

@router.callback_query(BonusTestStates.enter_price, F.data == "cancel_bonus_test")
async def cancel_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cancel_bonus_test")
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_bonus_test_management_kb()
    )
    await state.set_state(BonusTestStates.main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
@router.callback_query(BonusTestStates.main, F.data == "delete_bonus_test")
async def show_bonus_tests_to_delete(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ show_bonus_tests_to_delete")

    try:
        tests_kb = await get_bonus_tests_list_kb()

        await callback.message.edit_text(
            "üóë –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=tests_kb
        )
        await state.set_state(BonusTestStates.select_test_to_delete)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.",
            reply_markup=get_bonus_test_management_kb()
        )

@router.callback_query(BonusTestStates.select_test_to_delete, F.data.startswith("delete_bonus_"))
async def confirm_delete_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_delete_bonus_test")

    try:
        test_id = int(callback.data.replace("delete_bonus_", ""))
        await state.update_data(bonus_test_id=test_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from database import BonusTestRepository
        bonus_test = await BonusTestRepository.get_by_id(test_id)

        if not bonus_test:
            await callback.message.edit_text(
                "‚ùå –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=await get_bonus_tests_list_kb()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_count = len(bonus_test.questions) if bonus_test.questions else 0

        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n"
            f"üß™ –ù–∞–∑–≤–∞–Ω–∏–µ: {bonus_test.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {bonus_test.price} –º–æ–Ω–µ—Ç\n"
            f"üìã –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç?\n"
            f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_bonus")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete_bonus")]
            ])
        )

    except ValueError:
        await callback.message.edit_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ—Å—Ç–∞.",
            reply_markup=await get_bonus_tests_list_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ.",
            reply_markup=await get_bonus_tests_list_kb()
        )

@router.callback_query(F.data == "confirm_delete_bonus")
async def delete_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ delete_bonus_test")

    try:
        user_data = await state.get_data()
        bonus_test_id = user_data.get("bonus_test_id")

        if not bonus_test_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: ID —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_bonus_test_management_kb()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        from database import BonusTestRepository
        bonus_test = await BonusTestRepository.get_by_id(bonus_test_id)
        test_name = bonus_test.name if bonus_test else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç"

        # –£–¥–∞–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤)
        success = await BonusTestRepository.delete(bonus_test_id)

        if success:
            await callback.message.edit_text(
                f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç '{test_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
                f"–¢–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —É—á–µ–Ω–∏–∫–∞–º –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–æ–Ω—É—Å–æ–≤.",
                reply_markup=get_bonus_test_management_kb()
            )
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç: {test_name} (ID: {bonus_test_id})")
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_bonus_test_management_kb()
            )

        await state.set_state(BonusTestStates.main)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.",
            reply_markup=get_bonus_test_management_kb()
        )
        await state.set_state(BonusTestStates.main)

@router.callback_query(F.data == "cancel_delete_bonus")
async def cancel_delete_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cancel_delete_bonus_test")

    await show_bonus_tests_to_delete(callback, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "no_tests")
async def no_tests_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ—Å—Ç–æ–≤"""
    await callback.answer("–ù–µ—Ç –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

@router.callback_query(F.data == "error_loading")
async def error_loading_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
    await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
