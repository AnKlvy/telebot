from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from manager.keyboards.topics import (
    get_subjects_kb, 
    get_topics_list_kb, 
    confirm_delete_topic_kb, 
    TopicCallback,
    TopicActions
)
from manager.keyboards.main import get_manager_main_menu_kb
from aiogram.fsm.state import State, StatesGroup

class ManagerTopicStates(StatesGroup):
    main = State()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∏–∫—Ä–æ—Ç–µ–º (–≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞)
    topics_list = State()  # –°–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
    adding_topic = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–∫—Ä–æ—Ç–µ–º—ã
    confirm_deletion = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    process_topic_name = State()
    delete_topic = State()
    cancel_delete = State()

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–∏–∫—Ä–æ—Ç–µ–º (–ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
topics_db = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": ["–î—Ä–æ–±–∏", "–ü—Ä–æ—Ü–µ–Ω—Ç—ã"],
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": ["–ü—Ä–∏—á–∞—Å—Ç–∏—è", "–ù–∞—Ä–µ—á–∏—è"],
    "–§–∏–∑–∏–∫–∞": ["–ú–µ—Ö–∞–Ω–∏–∫–∞", "–û–ø—Ç–∏–∫–∞"]
}

@router.callback_query(F.data == "manager_topics")
async def show_subjects(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    await state.set_state(ManagerTopicStates.main)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–∫—Ä–æ—Ç–µ–º–∞–º–∏:",
        reply_markup=get_subjects_kb()
    )

@router.callback_query(TopicCallback.filter(F.action == TopicActions.VIEW))
async def show_topics(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject = callback_data.subject
    topics = topics_db.get(subject, [])
    
    await state.set_state(ManagerTopicStates.topics_list)
    await state.update_data(current_subject=subject)
    
    await callback.message.edit_text(
        text=f"üìù –ú–∏–∫—Ä–æ—Ç–µ–º—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}:\n"
             f"–í—Å–µ–≥–æ –º–∏–∫—Ä–æ—Ç–µ–º: {len(topics)}",
        reply_markup=get_topics_list_kb(subject, topics)
    )

@router.callback_query(TopicCallback.filter(F.action == TopicActions.ADD))
async def start_add_topic(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    await state.set_state(ManagerTopicStates.adding_topic)
    await state.update_data(subject=callback_data.subject)
    
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–∫—Ä–æ—Ç–µ–º—ã:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(ManagerTopicStates.adding_topic))
async def process_topic_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    data = await state.get_data()
    subject = data['subject']
    new_topic = message.text.strip()
    
    if subject not in topics_db:
        topics_db[subject] = []
    topics_db[subject].append(new_topic)
    
    await state.set_state(ManagerTopicStates.topics_list)
    await message.answer(
        text=f"‚úÖ –ú–∏–∫—Ä–æ—Ç–µ–º–∞ \"{new_topic}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–µ–¥–º–µ—Ç {subject}",
        reply_markup=get_topics_list_kb(subject, topics_db[subject])
    )

@router.callback_query(TopicCallback.filter(F.action == TopicActions.DELETE))
async def confirm_delete(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    await state.set_state(ManagerTopicStates.confirm_deletion)
    await state.update_data(subject=callback_data.subject, topic=callback_data.topic)
    
    await callback.message.edit_text(
        text=f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∏–∫—Ä–æ—Ç–µ–º—É \"{callback_data.topic}\" –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ {callback_data.subject}?",
        reply_markup=confirm_delete_topic_kb(callback_data.subject, callback_data.topic)
    )

@router.callback_query(TopicCallback.filter(F.action == TopicActions.CONFIRM_DELETE))
async def delete_topic(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    subject = callback_data.subject
    topic = callback_data.topic
    
    if subject in topics_db and topic in topics_db[subject]:
        topics_db[subject].remove(topic)
    
    await state.set_state(ManagerTopicStates.topics_list)
    await callback.message.edit_text(
        text=f"‚úÖ –ú–∏–∫—Ä–æ—Ç–µ–º–∞ \"{topic}\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ {subject}",
        reply_markup=get_topics_list_kb(subject, topics_db[subject])
    )

@router.callback_query(TopicCallback.filter(F.action == TopicActions.CANCEL))
async def cancel_delete(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    await state.set_state(ManagerTopicStates.topics_list)
    await callback.message.edit_text(
        text=f"üìù –ú–∏–∫—Ä–æ—Ç–µ–º—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {callback_data.subject}:",
        reply_markup=get_topics_list_kb(callback_data.subject, topics_db[callback_data.subject])
    )
