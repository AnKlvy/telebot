from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from manager.keyboards.topics import (
    get_subjects_kb,
    get_topics_list_kb,
    TopicCallback,
    TopicActions
)
from manager.keyboards.main import get_manager_main_menu_kb
from aiogram.fsm.state import State, StatesGroup
from database import SubjectRepository, MicrotopicRepository
from common.keyboards import get_home_kb

class ManagerTopicStates(StatesGroup):
    main = State()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∏–∫—Ä–æ—Ç–µ–º (–≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞)
    topics_list = State()  # –°–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
    adding_topic = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–∫—Ä–æ—Ç–µ–º—ã
    delete_by_number = State()  # –£–¥–∞–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã –ø–æ –Ω–æ–º–µ—Ä—É

router = Router()

@router.callback_query(F.data == "manager_topics")
async def show_subjects(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    await state.set_state(ManagerTopicStates.main)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–∫—Ä–æ—Ç–µ–º–∞–º–∏:",
        reply_markup=await get_subjects_kb()
    )

@router.callback_query(StateFilter(ManagerTopicStates.main), TopicCallback.filter(F.action == TopicActions.VIEW))
async def show_topics(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject_id = int(callback_data.subject)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ –µ–≥–æ –º–∏–∫—Ä–æ—Ç–µ–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    subject = await SubjectRepository.get_by_id(subject_id)
    if not subject:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_manager_main_menu_kb()
        )
        return

    microtopics = await MicrotopicRepository.get_by_subject(subject_id)

    await state.set_state(ManagerTopicStates.topics_list)
    await state.update_data(current_subject_id=subject_id, current_subject_name=subject.name)

    await callback.message.edit_text(
        text=f"üìù –ú–∏–∫—Ä–æ—Ç–µ–º—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject.name}:\n"
             f"–í—Å–µ–≥–æ –º–∏–∫—Ä–æ—Ç–µ–º: {len(microtopics)}",
        reply_markup=await get_topics_list_kb(subject.name, microtopics)
    )

@router.callback_query(StateFilter(ManagerTopicStates.topics_list), TopicCallback.filter(F.action == TopicActions.ADD))
async def start_add_topic(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    subject_id = int(callback_data.subject)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    subject = await SubjectRepository.get_by_id(subject_id)
    if not subject:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_manager_main_menu_kb()
        )
        return

    await state.set_state(ManagerTopicStates.adding_topic)
    await state.update_data(subject_id=subject_id, subject_name=subject.name)

    await callback.message.edit_text(
        text=f"–ü—Ä–µ–¥–º–µ—Ç: {subject.name}\n\n"
             f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º:\n"
             f"‚Ä¢ –û–¥–Ω—É –º–∏–∫—Ä–æ—Ç–µ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É\n"
             f"‚Ä¢ –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–æ 200 –º–∏–∫—Ä–æ—Ç–µ–º –∑–∞ —Ä–∞–∑\n"
             f"‚Ä¢ –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã\n\n"
             f"–ü—Ä–∏–º–µ—Ä:\n"
             f"–ê–ª–∫–∞–Ω—ã\n"
             f"–ê–ª–∫–µ–Ω—ã\n"
             f"–ê–ª–∫–∏–Ω—ã",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(ManagerTopicStates.adding_topic))
async def process_topic_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –º–∏–∫—Ä–æ—Ç–µ–º (–æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ)"""
    data = await state.get_data()
    subject_id = data['subject_id']
    subject_name = data['subject_name']

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—É—Å—Ç—ã—Ö
    lines = [line.strip() for line in message.text.split('\n') if line.strip()]

    if not lines:
        await message.answer(
            text="‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã:",
            reply_markup=get_home_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 200 —Å—Ç—Ä–æ–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(lines) > 200:
        await message.answer(
            text=f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ç–µ–º –∑–∞ —Ä–∞–∑ (–º–∞–∫—Å–∏–º—É–º 200, –≤–≤–µ–¥–µ–Ω–æ {len(lines)}).\n"
                 f"–†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π:",
            reply_markup=get_home_kb()
        )
        return

    try:
        if len(lines) == 1:
            # –û–¥–Ω–∞ –º–∏–∫—Ä–æ—Ç–µ–º–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            microtopic = await MicrotopicRepository.create(lines[0], subject_id)
            created_count = 1
            result_text = f"‚úÖ –ú–∏–∫—Ä–æ—Ç–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–µ–¥–º–µ—Ç {subject_name}:\n{microtopic.number}. {microtopic.name}"
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ç–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            created_microtopics = await MicrotopicRepository.create_multiple(lines, subject_id)
            created_count = len(created_microtopics)

            if created_count == len(lines):
                result_text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {created_count} –º–∏–∫—Ä–æ—Ç–µ–º –≤ –ø—Ä–µ–¥–º–µ—Ç {subject_name}:\n"
                for mt in created_microtopics:
                    result_text += f"{mt.number}. {mt.name}\n"
            else:
                skipped = len(lines) - created_count
                result_text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {created_count} –º–∏–∫—Ä–æ—Ç–µ–º –≤ –ø—Ä–µ–¥–º–µ—Ç {subject_name}:\n"
                for mt in created_microtopics:
                    result_text += f"{mt.number}. {mt.name}\n"
                result_text += f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {skipped}"

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º
        microtopics = await MicrotopicRepository.get_by_subject(subject_id)

        await state.set_state(ManagerTopicStates.topics_list)
        await message.answer(
            text=result_text,
            reply_markup=await get_topics_list_kb(subject_name, microtopics)
        )

    except ValueError as e:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        await message.answer(
            text=f"‚ùå {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_home_kb()
        )

@router.callback_query(StateFilter(ManagerTopicStates.topics_list), TopicCallback.filter(F.action == TopicActions.DELETE_BY_NUMBER))
async def start_delete_by_number(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã –ø–æ –Ω–æ–º–µ—Ä—É"""
    subject_id = int(callback_data.subject)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    subject = await SubjectRepository.get_by_id(subject_id)
    if not subject:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_manager_main_menu_kb()
        )
        return

    await state.set_state(ManagerTopicStates.delete_by_number)
    await state.update_data(subject_id=subject_id, subject_name=subject.name)

    await callback.message.edit_text(
        text=f"–ü—Ä–µ–¥–º–µ—Ç: {subject.name}\n\n"
             f"‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(ManagerTopicStates.delete_by_number))
async def process_delete_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    subject_id = data['subject_id']
    subject_name = data['subject_name']

    try:
        number = int(message.text.strip())

        if number < 1:
            await message.answer(
                text="‚ùå –ù–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_home_kb()
            )
            return

        # –£–¥–∞–ª—è–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É –ø–æ –Ω–æ–º–µ—Ä—É
        success, deleted_name = await MicrotopicRepository.delete_by_number(subject_id, number)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º
            microtopics = await MicrotopicRepository.get_by_subject(subject_id)

            await state.set_state(ManagerTopicStates.topics_list)
            await message.answer(
                text=f"‚úÖ –ú–∏–∫—Ä–æ—Ç–µ–º–∞ ‚Ññ{number} \"{deleted_name}\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}",
                reply_markup=await get_topics_list_kb(subject_name, microtopics)
            )
        else:
            await message.answer(
                text=f"‚ùå –ú–∏–∫—Ä–æ—Ç–µ–º–∞ —Å –Ω–æ–º–µ—Ä–æ–º {number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–µ–¥–º–µ—Ç–µ {subject_name}.\n"
                     f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:",
                reply_markup=get_home_kb()
            )

    except ValueError:
        await message.answer(
            text="‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã (—á–∏—Å–ª–æ):",
            reply_markup=get_home_kb()
        )

@router.callback_query(StateFilter(ManagerTopicStates.topics_list), TopicCallback.filter(F.action == TopicActions.SHOW_LIST))
async def show_microtopics_list(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Ç–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
    subject_id = int(callback_data.subject)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ –µ–≥–æ –º–∏–∫—Ä–æ—Ç–µ–º—ã
    subject = await SubjectRepository.get_by_id(subject_id)
    if not subject:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_manager_main_menu_kb()
        )
        return

    microtopics = await MicrotopicRepository.get_by_subject(subject_id)

    if not microtopics:
        text = f"üìã –ú–∏–∫—Ä–æ—Ç–µ–º—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject.name}:\n\n‚ùå –ú–∏–∫—Ä–æ—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        text = f"üìã –ú–∏–∫—Ä–æ—Ç–µ–º—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject.name}:\n\n"
        for microtopic in microtopics:
            text += f"{microtopic.number}. {microtopic.name}\n"
        text += f"\n–í—Å–µ–≥–æ –º–∏–∫—Ä–æ—Ç–µ–º: {len(microtopics)}"

    await callback.message.edit_text(
        text=text,
        reply_markup=await get_topics_list_kb(subject.name, microtopics)
    )
