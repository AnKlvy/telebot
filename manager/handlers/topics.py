from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from manager.keyboards.topics import (
    get_subjects_kb,
    get_topics_list_kb,
    confirm_delete_topic_kb,
    TopicCallback,
    TopicActions
)
from manager.keyboards.main import get_manager_main_menu_kb
from aiogram.fsm.state import State, StatesGroup
from database import SubjectRepository, MicrotopicRepository
from common.keyboards import get_home_kb

class ManagerTopicStates(StatesGroup):
    main = State()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∏–∫—Ä–æ—Ç–µ–º (–≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞)
    topics_list = State()  # –°–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
    adding_topic = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–∫—Ä–æ—Ç–µ–º—ã
    confirm_deletion = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    process_topic_name = State()
    delete_topic = State()
    cancel_delete = State()

router = Router()

@router.callback_query(F.data == "manager_topics")
async def show_subjects(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    await state.set_state(ManagerTopicStates.main)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–∫—Ä–æ—Ç–µ–º–∞–º–∏:",
        reply_markup=await get_subjects_kb()
    )

@router.callback_query(StateFilter(ManagerTopicStates.main), TopicCallback.filter(F.action == TopicActions.VIEW))
async def show_topics(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject_id = int(callback_data.subject)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ –µ–≥–æ –º–∏–∫—Ä–æ—Ç–µ–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    subject = await SubjectRepository.get_by_id(subject_id)
    if not subject:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_manager_main_menu_kb()
        )
        return

    microtopics = await MicrotopicRepository.get_by_subject(subject_id)

    await state.set_state(ManagerTopicStates.topics_list)
    await state.update_data(current_subject_id=subject_id, current_subject_name=subject.name)

    await callback.message.edit_text(
        text=f"üìù –ú–∏–∫—Ä–æ—Ç–µ–º—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject.name}:\n"
             f"–í—Å–µ–≥–æ –º–∏–∫—Ä–æ—Ç–µ–º: {len(microtopics)}",
        reply_markup=await get_topics_list_kb(subject.name, microtopics)
    )

@router.callback_query(StateFilter(ManagerTopicStates.topics_list), TopicCallback.filter(F.action == TopicActions.ADD))
async def start_add_topic(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    subject_id = int(callback_data.subject)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    subject = await SubjectRepository.get_by_id(subject_id)
    if not subject:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_manager_main_menu_kb()
        )
        return

    await state.set_state(ManagerTopicStates.adding_topic)
    await state.update_data(subject_id=subject_id, subject_name=subject.name)

    await callback.message.edit_text(
        text=f"–ü—Ä–µ–¥–º–µ—Ç: {subject.name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–∫—Ä–æ—Ç–µ–º—ã:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(ManagerTopicStates.adding_topic))
async def process_topic_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    data = await state.get_data()
    subject_id = data['subject_id']
    subject_name = data['subject_name']
    new_topic = message.text.strip()

    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        microtopic = await MicrotopicRepository.create(new_topic, subject_id)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º
        microtopics = await MicrotopicRepository.get_by_subject(subject_id)

        await state.set_state(ManagerTopicStates.topics_list)
        await message.answer(
            text=f"‚úÖ –ú–∏–∫—Ä–æ—Ç–µ–º–∞ \"{new_topic}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–µ–¥–º–µ—Ç {subject_name}",
            reply_markup=await get_topics_list_kb(subject_name, microtopics)
        )
    except ValueError as e:
        # –ú–∏–∫—Ä–æ—Ç–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await message.answer(
            text=f"‚ùå {str(e)}\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_home_kb()
        )

@router.callback_query(StateFilter(ManagerTopicStates.topics_list), TopicCallback.filter(F.action == TopicActions.DELETE))
async def confirm_delete(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    microtopic_id = int(callback_data.topic)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ç–µ–º–µ
    microtopic = await MicrotopicRepository.get_by_id(microtopic_id)
    if not microtopic:
        await callback.message.edit_text(
            text="‚ùå –ú–∏–∫—Ä–æ—Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
            reply_markup=get_manager_main_menu_kb()
        )
        return

    await state.set_state(ManagerTopicStates.confirm_deletion)
    await state.update_data(
        microtopic_id=microtopic_id,
        microtopic_name=microtopic.name,
        subject_id=microtopic.subject_id,
        subject_name=microtopic.subject.name
    )

    await callback.message.edit_text(
        text=f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∏–∫—Ä–æ—Ç–µ–º—É \"{microtopic.name}\" –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ {microtopic.subject.name}?",
        reply_markup=confirm_delete_topic_kb(str(microtopic.subject_id), str(microtopic_id))
    )

@router.callback_query(StateFilter(ManagerTopicStates.confirm_deletion), TopicCallback.filter(F.action == TopicActions.CONFIRM_DELETE))
async def delete_topic(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    microtopic_id = data['microtopic_id']
    microtopic_name = data['microtopic_name']
    subject_id = data['subject_id']
    subject_name = data['subject_name']

    # –£–¥–∞–ª—è–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = await MicrotopicRepository.delete(microtopic_id)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º
        microtopics = await MicrotopicRepository.get_by_subject(subject_id)

        await state.set_state(ManagerTopicStates.topics_list)
        await callback.message.edit_text(
            text=f"‚úÖ –ú–∏–∫—Ä–æ—Ç–µ–º–∞ \"{microtopic_name}\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}",
            reply_markup=await get_topics_list_kb(subject_name, microtopics)
        )
    else:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∏–∫—Ä–æ—Ç–µ–º—ã \"{microtopic_name}\"",
            reply_markup=get_manager_main_menu_kb()
        )

@router.callback_query(StateFilter(ManagerTopicStates.confirm_deletion), TopicCallback.filter(F.action == TopicActions.CANCEL))
async def cancel_delete(callback: CallbackQuery, callback_data: TopicCallback, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    data = await state.get_data()
    subject_id = data['subject_id']
    subject_name = data['subject_name']

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º
    microtopics = await MicrotopicRepository.get_by_subject(subject_id)

    await state.set_state(ManagerTopicStates.topics_list)
    await callback.message.edit_text(
        text=f"üìù –ú–∏–∫—Ä–æ—Ç–µ–º—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}:",
        reply_markup=await get_topics_list_kb(subject_name, microtopics)
    )
