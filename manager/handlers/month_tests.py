from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from manager.keyboards.month_tests import (
    get_month_tests_menu_kb,
    get_courses_for_tests_kb,
    get_subjects_for_tests_kb,
    get_microtopics_input_kb,
    get_confirm_test_creation_kb,
    get_tests_list_kb,
    get_confirm_delete_test_kb,
    get_delete_tests_list_kb
)
from manager.keyboards.main import get_manager_main_menu_kb

router = Router()

class ManagerMonthTestsStates(StatesGroup):
    main = State()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞
    select_course = State()  # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
    select_subject = State()  # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    enter_month_name = State()  # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    enter_microtopics = State()  # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–≤ –º–∏–∫—Ä–æ—Ç–µ–º
    confirm_creation = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    tests_list = State()  # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    confirm_deletion = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
courses_db = {
    1: "–ï–ù–¢",
    2: "IT"
}

subjects_db = {
    1: ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è"],
    2: ["Python", "JavaScript", "Java"]
}

created_tests = {}

@router.callback_query(F.data == "manager_month_tests")
async def show_month_tests_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞"""
    await state.set_state(ManagerMonthTestsStates.main)
    await callback.message.edit_text(
        text="üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –º–µ—Å—è—Ü–∞",
        reply_markup=get_month_tests_menu_kb()
    )

@router.callback_query(F.data == "create_month_test")
async def start_create_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    await state.set_state(ManagerMonthTestsStates.select_course)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:",
        reply_markup=get_courses_for_tests_kb()
    )

@router.callback_query(ManagerMonthTestsStates.select_course, F.data.startswith("course_"))
async def select_course(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞"""
    course_id = int(callback.data.replace("course_", ""))
    course_name = courses_db.get(course_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å")
    
    await state.update_data(course_id=course_id, course_name=course_name)
    await state.set_state(ManagerMonthTestsStates.select_subject)
    
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=get_subjects_for_tests_kb(course_id)
    )

@router.callback_query(ManagerMonthTestsStates.select_subject, F.data.startswith("subject_"))
async def select_subject(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject_name = callback.data.replace("subject_", "")
    
    data = await state.get_data()
    course_name = data.get("course_name", "")
    
    await state.update_data(subject_name=subject_name)
    await state.set_state(ManagerMonthTestsStates.enter_month_name)
    
    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
             f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(ManagerMonthTestsStates.enter_month_name))
async def process_month_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞"""
    month_name = message.text.strip()
    
    data = await state.get_data()
    course_name = data.get("course_name", "")
    subject_name = data.get("subject_name", "")
    
    await state.update_data(month_name=month_name)
    await state.set_state(ManagerMonthTestsStates.enter_microtopics)

    await message.answer(
        text=f"–ö—É—Ä—Å: {course_name}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
             f"–ú–µ—Å—è—Ü: {month_name}\n\n"
             f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 3 4):",
        reply_markup=get_microtopics_input_kb()
    )

@router.message(StateFilter(ManagerMonthTestsStates.enter_microtopics))
async def process_microtopics(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–≤ –º–∏–∫—Ä–æ—Ç–µ–º"""
    microtopics_input = message.text.strip()

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    microtopic_numbers = [num.strip() for num in microtopics_input.split() if num.strip()]

    data = await state.get_data()
    course_name = data.get("course_name", "")
    subject_name = data.get("subject_name", "")
    month_name = data.get("month_name", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    valid_numbers = []
    invalid_numbers = []

    for num_str in microtopic_numbers:
        try:
            num = int(num_str)
            if num not in valid_numbers:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                valid_numbers.append(num)
        except ValueError:
            invalid_numbers.append(num_str)

    if invalid_numbers:
        await message.answer(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º: {', '.join(invalid_numbers)}\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            reply_markup=get_microtopics_input_kb()
        )
        return

    if not valid_numbers:
        await message.answer(
            f"‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            reply_markup=get_microtopics_input_kb()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    numbers_text = ", ".join([str(num) for num in sorted(valid_numbers)])

    await state.update_data(selected_microtopic_numbers=valid_numbers)
    await state.set_state(ManagerMonthTestsStates.confirm_creation)

    await message.answer(
        text=f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:\n\n"
             f"–ö—É—Ä—Å: {course_name}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
             f"–ú–µ—Å—è—Ü: {month_name}\n\n"
             f"–ù–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º: {numbers_text}\n\n"
             f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è –û–î–ù–û–ì–û —Ç–µ—Å—Ç–∞ —Å –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏:\n"
             f"‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n"
             f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n\n"
             f"–ü—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –î–ó –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–∏–∫—Ä–æ—Ç–µ–º–∞–º",
        reply_markup=get_confirm_test_creation_kb()
    )

@router.callback_query(F.data == "confirm_create_test")
async def confirm_create_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—ã –∫ –ø—Ä–µ–¥–º–µ—Ç—É"""
    data = await state.get_data()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
    import time
    test_id = f"test_{int(time.time())}"

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–µ—Å—Ç–µ (–ø—Ä–∏–≤—è–∑–∫–∞ –º–∏–∫—Ä–æ—Ç–µ–º –∫ –ø—Ä–µ–¥–º–µ—Ç—É –∏ –∫—É—Ä—Å—É)
    test_data = {
        "id": test_id,
        "course_id": data.get("course_id"),
        "course_name": data.get("course_name"),
        "subject_name": data.get("subject_name"),
        "month_name": data.get("month_name"),
        "microtopic_numbers": data.get("selected_microtopic_numbers", []),
        "created_at": time.time()
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    created_tests[test_id] = test_data

    numbers_text = ", ".join([str(num) for num in sorted(test_data["microtopic_numbers"])])

    await callback.message.edit_text(
        text=f"‚úÖ –¢–µ—Å—Ç –º–µ—Å—è—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
             f"üìã –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n"
             f"–ö—É—Ä—Å: {test_data['course_name']}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {test_data['subject_name']}\n"
             f"–ú–µ—Å—è—Ü: {test_data['month_name']}\n"
             f"–ú–∏–∫—Ä–æ—Ç–µ–º—ã: {numbers_text}\n\n"
             f"–¢–µ–ø–µ—Ä—å —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å:\n"
             f"‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n"
             f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n\n"
             f"–í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ –î–ó –ø–æ —ç—Ç–∏–º –º–∏–∫—Ä–æ—Ç–µ–º–∞–º",
        reply_markup=get_month_tests_menu_kb()
    )
    await state.set_state(ManagerMonthTestsStates.main)

@router.callback_query(F.data == "cancel_create_test")
async def cancel_create_test(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    await callback.message.edit_text(
        text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_month_tests_menu_kb()
    )
    await state.set_state(ManagerMonthTestsStates.main)

@router.callback_query(F.data == "list_month_tests")
async def list_month_tests(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    tests_list = list(created_tests.values())

    await state.set_state(ManagerMonthTestsStates.tests_list)

    if not tests_list:
        await callback.message.edit_text(
            text="üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ –ø—É—Å—Ç\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç!",
            reply_markup=get_month_tests_menu_kb()
        )
    else:
        tests_text = f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–µ—Å—è—Ü–∞ ({len(tests_list)}):\n\n"
        for i, test in enumerate(tests_list, 1):
            numbers_text = ", ".join([str(num) for num in sorted(test["microtopic_numbers"])])
            tests_text += f"{i}. {test['course_name']} - {test['subject_name']}\n"
            tests_text += f"   –ú–µ—Å—è—Ü: {test['month_name']}\n"
            tests_text += f"   –ú–∏–∫—Ä–æ—Ç–µ–º—ã: {numbers_text}\n\n"

        await callback.message.edit_text(
            text=tests_text,
            reply_markup=get_month_tests_menu_kb()
        )

@router.callback_query(F.data == "delete_month_test")
async def start_delete_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    tests_list = list(created_tests.values())

    await state.set_state(ManagerMonthTestsStates.confirm_deletion)

    if not tests_list:
        await callback.message.edit_text(
            text="üóë –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=get_month_tests_menu_kb()
        )
    else:
        await callback.message.edit_text(
            text="üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=get_delete_tests_list_kb(tests_list)
        )

@router.callback_query(F.data.startswith("delete_test_"))
async def confirm_delete_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = callback.data.replace("delete_test_", "")
    test = created_tests.get(test_id)

    if not test:
        await callback.message.edit_text(
            text="‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_month_tests_menu_kb()
        )
        return

    numbers_text = ", ".join([str(num) for num in sorted(test["microtopic_numbers"])])

    await callback.message.edit_text(
        text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:\n\n"
             f"–ö—É—Ä—Å: {test['course_name']}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {test['subject_name']}\n"
             f"–ú–µ—Å—è—Ü: {test['month_name']}\n"
             f"–ú–∏–∫—Ä–æ—Ç–µ–º—ã: {numbers_text}\n\n"
             f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirm_delete_test_kb(test_id)
    )

@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_test(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç"""
    test_id = callback.data.replace("confirm_delete_", "")
    test = created_tests.get(test_id)

    if test:
        del created_tests[test_id]
        await callback.message.edit_text(
            text=f"‚úÖ –¢–µ—Å—Ç '{test['course_name']} - {test['subject_name']} - {test['month_name']}' —É–¥–∞–ª–µ–Ω",
            reply_markup=get_month_tests_menu_kb()
        )
    else:
        await callback.message.edit_text(
            text="‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_month_tests_menu_kb()
        )

    await state.set_state(ManagerMonthTestsStates.main)

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ"""
    await callback.message.edit_text(
        text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_month_tests_menu_kb()
    )
    await state.set_state(ManagerMonthTestsStates.main)
