from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from manager.keyboards.month_tests import (
    get_month_tests_menu_kb,
    get_courses_for_tests_kb,
    get_subjects_for_tests_kb,
    get_microtopics_input_kb,
    get_confirm_test_creation_kb,
    get_tests_list_kb,
    get_confirm_delete_test_kb,
    get_delete_tests_list_kb
)
from manager.keyboards.main import get_manager_main_menu_kb
from common.keyboards import get_home_kb
from database.repositories.month_test_repository import MonthTestRepository
from database.repositories.month_test_microtopic_repository import MonthTestMicrotopicRepository
from database.repositories.course_repository import CourseRepository
from database.repositories.subject_repository import SubjectRepository
from database.repositories.microtopic_repository import MicrotopicRepository

router = Router()

class ManagerMonthTestsStates(StatesGroup):
    main = State()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞
    select_course = State()  # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
    select_subject = State()  # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    enter_month_name = State()  # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    enter_microtopics = State()  # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–≤ –º–∏–∫—Ä–æ—Ç–µ–º
    confirm_creation = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    tests_list = State()  # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    confirm_deletion = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è



@router.callback_query(F.data == "manager_month_tests")
async def show_month_tests_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞"""
    await state.set_state(ManagerMonthTestsStates.main)
    await callback.message.edit_text(
        text="üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –º–µ—Å—è—Ü–∞",
        reply_markup=get_month_tests_menu_kb()
    )

@router.callback_query(F.data == "create_month_test")
async def start_create_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    await state.set_state(ManagerMonthTestsStates.select_course)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:",
        reply_markup=await get_courses_for_tests_kb()
    )

@router.callback_query(StateFilter(ManagerMonthTestsStates.select_course), F.data.startswith("course_"))
async def select_course(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞"""
    course_id = int(callback.data.replace("course_", ""))
    course = await CourseRepository.get_by_id(course_id)

    if not course:
        await callback.message.edit_text(
            text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_month_tests_menu_kb()
        )
        await state.set_state(ManagerMonthTestsStates.main)
        return

    await state.update_data(course_id=course_id, course_name=course.name)
    await state.set_state(ManagerMonthTestsStates.select_subject)

    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=await get_subjects_for_tests_kb(course_id)
    )

@router.callback_query(StateFilter(ManagerMonthTestsStates.select_subject), F.data.startswith("subject_"))
async def select_subject(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject_id = int(callback.data.replace("subject_", ""))
    subject = await SubjectRepository.get_by_id(subject_id)

    if not subject:
        await callback.message.edit_text(
            text="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_month_tests_menu_kb()
        )
        await state.set_state(ManagerMonthTestsStates.main)
        return

    data = await state.get_data()
    course_name = data.get("course_name", "")

    await state.update_data(subject_id=subject_id, subject_name=subject.name)
    await state.set_state(ManagerMonthTestsStates.enter_month_name)

    await callback.message.edit_text(
        text=f"–ö—É—Ä—Å: {course_name}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject.name}\n\n"
             f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(ManagerMonthTestsStates.enter_month_name))
async def process_month_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞"""
    month_name = message.text.strip()

    data = await state.get_data()
    course_name = data.get("course_name", "")
    subject_name = data.get("subject_name", "")

    await state.update_data(month_name=month_name)
    await state.set_state(ManagerMonthTestsStates.enter_microtopics)

    await message.answer(
        text=f"–ö—É—Ä—Å: {course_name}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
             f"–ú–µ—Å—è—Ü: {month_name}\n\n"
             f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 3 4):",
        reply_markup=get_microtopics_input_kb()
    )

@router.message(StateFilter(ManagerMonthTestsStates.enter_microtopics))
async def process_microtopics(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–≤ –º–∏–∫—Ä–æ—Ç–µ–º"""
    microtopics_input = message.text.strip()

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    microtopic_numbers = [num.strip() for num in microtopics_input.split() if num.strip()]

    data = await state.get_data()
    course_name = data.get("course_name", "")
    subject_name = data.get("subject_name", "")
    subject_id = data.get("subject_id")
    month_name = data.get("month_name", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    valid_numbers = []
    invalid_numbers = []

    for num_str in microtopic_numbers:
        try:
            num = int(num_str)
            if num > 0 and num not in valid_numbers:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                valid_numbers.append(num)
            elif num <= 0:
                invalid_numbers.append(f"{num_str} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0)")
        except ValueError:
            invalid_numbers.append(num_str)

    if invalid_numbers:
        await message.answer(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º: {', '.join(invalid_numbers)}\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            reply_markup=get_microtopics_input_kb()
        )
        return

    if not valid_numbers:
        await message.answer(
            f"‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            reply_markup=get_microtopics_input_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        existing_numbers = []
        non_existing_numbers = []

        for number in valid_numbers:
            exists = await MicrotopicRepository.exists_by_number(subject_id, number)
            if exists:
                existing_numbers.append(number)
            else:
                non_existing_numbers.append(number)

        if non_existing_numbers:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∏–∫—Ä–æ—Ç–µ–º –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
            existing_microtopics = await MicrotopicRepository.get_by_subject(subject_id)
            if existing_microtopics:
                available_numbers = [str(mt.number) for mt in existing_microtopics]
                available_text = f"\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º: {', '.join(available_numbers)}"
            else:
                available_text = "\n\n‚ùó –í –¥–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∏–∫—Ä–æ—Ç–µ–º. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã."

            await message.answer(
                f"‚ùå –ú–∏–∫—Ä–æ—Ç–µ–º—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ {', '.join(map(str, non_existing_numbers))} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}'.{available_text}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º:",
                reply_markup=get_microtopics_input_kb()
            )
            return

        if not existing_numbers:
            await message.answer(
                f"‚ùå –ù–∏ –æ–¥–Ω–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º:",
                reply_markup=get_microtopics_input_kb()
            )
            return

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–∫—Ä–æ—Ç–µ–º: {str(e)}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_microtopics_input_kb()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    numbers_text = ", ".join([str(num) for num in sorted(existing_numbers)])

    await state.update_data(selected_microtopic_numbers=existing_numbers)
    await state.set_state(ManagerMonthTestsStates.confirm_creation)

    await message.answer(
        text=f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:\n\n"
             f"–ö—É—Ä—Å: {course_name}\n"
             f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
             f"–ú–µ—Å—è—Ü: {month_name}\n\n"
             f"–ù–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º: {numbers_text}\n\n"
             f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è –û–î–ù–û–ì–û —Ç–µ—Å—Ç–∞ —Å –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏:\n"
             f"‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n"
             f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n\n"
             f"–ü—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –î–ó –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–∏–∫—Ä–æ—Ç–µ–º–∞–º",
        reply_markup=get_confirm_test_creation_kb()
    )

@router.callback_query(StateFilter(ManagerMonthTestsStates.confirm_creation), F.data == "confirm_create_test")
async def confirm_create_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—ã –∫ –ø—Ä–µ–¥–º–µ—Ç—É"""
    try:
        data = await state.get_data()
        course_id = data.get("course_id")
        subject_id = data.get("subject_id")
        month_name = data.get("month_name")
        microtopic_numbers = data.get("selected_microtopic_numbers", [])

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        month_test = await MonthTestRepository.create(
            name=month_name,
            course_id=course_id,
            subject_id=subject_id
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –º–∏–∫—Ä–æ—Ç–µ–º–∞–º–∏
        for microtopic_number in microtopic_numbers:
            await MonthTestMicrotopicRepository.create(
                month_test_id=month_test.id,
                microtopic_number=microtopic_number
            )

        numbers_text = ", ".join([str(num) for num in sorted(microtopic_numbers)])

        await callback.message.edit_text(
            text=f"‚úÖ –¢–µ—Å—Ç –º–µ—Å—è—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                 f"üìã –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n"
                 f"–ö—É—Ä—Å: {data.get('course_name')}\n"
                 f"–ü—Ä–µ–¥–º–µ—Ç: {data.get('subject_name')}\n"
                 f"–ú–µ—Å—è—Ü: {month_name}\n"
                 f"–ú–∏–∫—Ä–æ—Ç–µ–º—ã: {numbers_text}\n\n"
                 f"–¢–µ–ø–µ—Ä—å —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å:\n"
                 f"‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n"
                 f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n\n"
                 f"–í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ –î–ó –ø–æ —ç—Ç–∏–º –º–∏–∫—Ä–æ—Ç–µ–º–∞–º",
            reply_markup=get_month_tests_menu_kb()
        )
        await state.set_state(ManagerMonthTestsStates.main)

    except Exception as e:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {str(e)}",
            reply_markup=get_month_tests_menu_kb()
        )
        await state.set_state(ManagerMonthTestsStates.main)

@router.callback_query(StateFilter(ManagerMonthTestsStates.confirm_creation), F.data == "cancel_create_test")
async def cancel_create_test(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    await callback.message.edit_text(
        text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_month_tests_menu_kb()
    )
    await state.set_state(ManagerMonthTestsStates.main)

@router.callback_query(F.data == "list_month_tests")
async def list_month_tests(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    try:
        tests_list = await MonthTestRepository.get_all()
        await state.set_state(ManagerMonthTestsStates.tests_list)

        if not tests_list:
            await callback.message.edit_text(
                text="üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ –ø—É—Å—Ç\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç!",
                reply_markup=get_month_tests_menu_kb()
            )
        else:
            tests_text = f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–µ—Å—è—Ü–∞ ({len(tests_list)}):\n\n"
            for i, test in enumerate(tests_list, 1):
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
                microtopic_numbers = [mt.microtopic_number for mt in test.microtopics]
                numbers_text = ", ".join([str(num) for num in sorted(microtopic_numbers)])

                tests_text += f"{i}. {test.course.name} - {test.subject.name}\n"
                tests_text += f"   –ú–µ—Å—è—Ü: {test.name}\n"
                tests_text += f"   –ú–∏–∫—Ä–æ—Ç–µ–º—ã: {numbers_text}\n\n"

            await callback.message.edit_text(
                text=tests_text,
                reply_markup=get_month_tests_menu_kb()
            )
    except Exception as e:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {str(e)}",
            reply_markup=get_month_tests_menu_kb()
        )
        await state.set_state(ManagerMonthTestsStates.main)

@router.callback_query(F.data == "delete_month_test")
async def start_delete_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    try:
        tests_list = await MonthTestRepository.get_all()

        if not tests_list:
            await callback.message.edit_text(
                text="üóë –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=get_month_tests_menu_kb()
            )
            await state.set_state(ManagerMonthTestsStates.main)
        else:
            await state.set_state(ManagerMonthTestsStates.confirm_deletion)
            await callback.message.edit_text(
                text="üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=await get_delete_tests_list_kb(tests_list)
            )
    except Exception as e:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {str(e)}",
            reply_markup=get_month_tests_menu_kb()
        )
        await state.set_state(ManagerMonthTestsStates.main)

@router.callback_query(StateFilter(ManagerMonthTestsStates.confirm_deletion), F.data.startswith("delete_test_"))
async def confirm_delete_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        test_id = int(callback.data.replace("delete_test_", ""))
        test = await MonthTestRepository.get_by_id(test_id)

        if not test:
            await callback.message.edit_text(
                text="‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_month_tests_menu_kb()
            )
            await state.set_state(ManagerMonthTestsStates.main)
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        microtopic_numbers = [mt.microtopic_number for mt in test.microtopics]
        numbers_text = ", ".join([str(num) for num in sorted(microtopic_numbers)])

        await callback.message.edit_text(
            text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:\n\n"
                 f"–ö—É—Ä—Å: {test.course.name}\n"
                 f"–ü—Ä–µ–¥–º–µ—Ç: {test.subject.name}\n"
                 f"–ú–µ—Å—è—Ü: {test.name}\n"
                 f"–ú–∏–∫—Ä–æ—Ç–µ–º—ã: {numbers_text}\n\n"
                 f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=get_confirm_delete_test_kb(test_id)
        )
    except Exception as e:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {str(e)}",
            reply_markup=get_month_tests_menu_kb()
        )
        await state.set_state(ManagerMonthTestsStates.main)

@router.callback_query(StateFilter(ManagerMonthTestsStates.confirm_deletion), F.data.startswith("confirm_delete_"))
async def delete_test(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç"""
    try:
        test_id = int(callback.data.replace("confirm_delete_", ""))
        test = await MonthTestRepository.get_by_id(test_id)

        if test:
            await MonthTestRepository.delete(test_id)
            await callback.message.edit_text(
                text=f"‚úÖ –¢–µ—Å—Ç '{test.course.name} - {test.subject.name} - {test.name}' —É–¥–∞–ª–µ–Ω",
                reply_markup=get_month_tests_menu_kb()
            )
        else:
            await callback.message.edit_text(
                text="‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_month_tests_menu_kb()
            )
    except Exception as e:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {str(e)}",
            reply_markup=get_month_tests_menu_kb()
        )

    await state.set_state(ManagerMonthTestsStates.main)

@router.callback_query(StateFilter(ManagerMonthTestsStates.confirm_deletion), F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ"""
    await callback.message.edit_text(
        text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_month_tests_menu_kb()
    )
    await state.set_state(ManagerMonthTestsStates.main)
