from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import logging

from common.keyboards import get_main_menu_back_button, get_home_kb
from .main import show_manager_main_menu
from database import ShopItemRepository

from aiogram.fsm.state import State, StatesGroup

class BonusTaskStates(StatesGroup):
    main = State()
    enter_task_name = State()
    enter_task_description = State()
    enter_price = State()
    confirm_task = State()
    delete_task = State()
    select_task_to_delete = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = Router()

def get_bonus_task_management_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_bonus_task")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="delete_bonus_task")],
        *get_main_menu_back_button()
    ])

def get_task_price_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã –≤ –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="30 –º–æ–Ω–µ—Ç", callback_data="task_price_30")],
        [InlineKeyboardButton(text="50 –º–æ–Ω–µ—Ç", callback_data="task_price_50")],
        [InlineKeyboardButton(text="80 –º–æ–Ω–µ—Ç", callback_data="task_price_80")],
        [InlineKeyboardButton(text="100 –º–æ–Ω–µ—Ç", callback_data="task_price_100")],
        [InlineKeyboardButton(text="150 –º–æ–Ω–µ—Ç", callback_data="task_price_150")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="task_price_custom")],
        *get_main_menu_back_button()
    ])

def get_confirm_bonus_task_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="confirm_bonus_task")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_bonus_task")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_bonus_task")],
        *get_main_menu_back_button()
    ])

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
from manager.handlers.main import ManagerMainStates

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@router.callback_query(F.data == "manager_bonus_tasks")
async def manager_bonus_tasks_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω callback —Å data: {callback.data}")
    logger.info(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω callback —Å data: {callback.data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    print(f"üîç DEBUG: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    logger.info(f"üîç DEBUG: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    await show_bonus_task_management(callback, state)

# –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
@router.callback_query(F.data == "manager_bonus_tasks")
async def debug_bonus_tasks_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    print(f"üîç DEBUG UNIVERSAL: –ü–æ–ª—É—á–µ–Ω callback —Å data: {callback.data}")
    logger.info(f"üîç DEBUG UNIVERSAL: –ü–æ–ª—É—á–µ–Ω callback —Å data: {callback.data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    print(f"üîç DEBUG UNIVERSAL: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    logger.info(f"üîç DEBUG UNIVERSAL: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    await show_bonus_task_management(callback, state)

async def show_bonus_task_management(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    logger.info("üéØ –í–´–ó–í–ê–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö show_bonus_task_management")
    print("üéØ –í–´–ó–í–ê–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö show_bonus_task_management")  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await callback.answer()

        await callback.message.edit_text(
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n\n"
            "–ë–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–æ–Ω—É—Å–æ–≤ —É —É—á–µ–Ω–∏–∫–æ–≤ –∏ –ø–æ–∫—É–ø–∞—é—Ç—Å—è –∑–∞ –º–æ–Ω–µ—Ç—ã.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—é –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å —É—á–µ–Ω–∏–∫.",
            reply_markup=get_bonus_task_management_kb()
        )
        await state.set_state(BonusTaskStates.main)
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ show_bonus_task_management –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ show_bonus_task_management –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_bonus_task_management: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_bonus_task_management: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(BonusTaskStates.main, F.data == "add_bonus_task")
async def start_add_bonus_task(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start_add_bonus_task")
    
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=get_home_kb()
    )
    await state.set_state(BonusTaskStates.enter_task_name)

@router.message(BonusTaskStates.enter_task_name)
async def process_task_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_task_name")
    
    task_name = message.text.strip()
    
    if not task_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
        return
    
    await state.update_data(task_name=task_name)
    
    await message.answer(
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å —É—á–µ–Ω–∏–∫):",
        reply_markup=get_home_kb()
    )
    await state.set_state(BonusTaskStates.enter_task_description)

@router.message(BonusTaskStates.enter_task_description)
async def process_task_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_task_description")
    
    task_description = message.text.strip()
    
    if not task_description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
        return
    
    await state.update_data(task_description=task_description)
    
    user_data = await state.get_data()
    task_name = user_data.get("task_name", "")
    
    await message.answer(
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task_name}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {task_description[:100]}{'...' if len(task_description) > 100 else ''}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=get_task_price_kb()
    )
    await state.set_state(BonusTaskStates.enter_price)

@router.callback_query(BonusTaskStates.enter_price, F.data.startswith("task_price_"))
async def process_price_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_price_selection")
    
    price_data = callback.data.replace("task_price_", "")
    
    if price_data == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö (—á–∏—Å–ª–æ):",
            reply_markup=get_home_kb()
        )
        return
    
    price = int(price_data)
    await state.update_data(price=price)
    await show_bonus_task_confirmation(callback, state)

@router.message(BonusTaskStates.enter_price)
async def process_custom_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–Ω—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_custom_price")
    
    try:
        price = int(message.text.strip())
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        await state.update_data(price=price)
        await show_bonus_task_confirmation(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")

async def show_bonus_task_confirmation(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    user_data = await state.get_data()
    task_name = user_data.get("task_name", "")
    task_description = user_data.get("task_description", "")
    price = user_data.get("price", 0)
    
    # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_description = task_description[:200] + "..." if len(task_description) > 200 else task_description
    
    confirmation_text = (
        f"üìù –ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Å–æ–∑–¥–∞–Ω–∏—é:\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {task_name}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {preview_description}\n"
        f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:"
    )
    
    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.edit_text(
            confirmation_text,
            reply_markup=get_confirm_bonus_task_kb()
        )
    else:
        await message_or_callback.answer(
            confirmation_text,
            reply_markup=get_confirm_bonus_task_kb()
        )
    
    await state.set_state(BonusTaskStates.confirm_task)

@router.callback_query(BonusTaskStates.confirm_task, F.data == "confirm_bonus_task")
async def save_bonus_task(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_bonus_task")

    user_data = await state.get_data()
    task_name = user_data.get("task_name", "")
    task_description = user_data.get("task_description", "")
    price = user_data.get("price", 0)

    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Ç–æ–≤–∞—Ä –º–∞–≥–∞–∑–∏–Ω–∞
        shop_item = await ShopItemRepository.create_bonus_task(
            name=task_name,
            description=task_description,
            price=price
        )

        await callback.message.edit_text(
            f"‚úÖ –ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ '{task_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n\n"
            "–ó–∞–¥–∞–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–æ–Ω—É—Å–æ–≤ —É —É—á–µ–Ω–∏–∫–æ–≤.",
            reply_markup=get_bonus_task_management_kb()
        )
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {task_name} (ID: {shop_item.id})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_bonus_task_management_kb()
        )

    await state.set_state(BonusTaskStates.main)

@router.callback_query(BonusTaskStates.confirm_task, F.data == "edit_bonus_task")
async def edit_bonus_task(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–µ–Ω—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_bonus_task")
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=get_task_price_kb()
    )
    await state.set_state(BonusTaskStates.enter_price)

@router.callback_query(BonusTaskStates.confirm_task, F.data == "cancel_bonus_task")
async def cancel_bonus_task(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cancel_bonus_task")

    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_bonus_task_management_kb()
    )
    await state.set_state(BonusTaskStates.main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
@router.callback_query(BonusTaskStates.main, F.data == "delete_bonus_task")
async def show_bonus_tasks_to_delete(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ show_bonus_tasks_to_delete")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bonus_tasks = await ShopItemRepository.get_by_type("bonus_task")

        if not bonus_tasks:
            await callback.message.edit_text(
                "üìù –ë–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!",
                reply_markup=get_bonus_task_management_kb()
            )
            await state.set_state(BonusTaskStates.main)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
        buttons = []
        for task in bonus_tasks:
            button_text = f"üìù {task.name} - {task.price} –º–æ–Ω–µ—Ç"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"delete_task_{task.id}"
            )])

        buttons.extend(get_main_menu_back_button())
        tasks_kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=tasks_kb
        )
        await state.set_state(BonusTaskStates.select_task_to_delete)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π.",
            reply_markup=get_bonus_task_management_kb()
        )
        await state.set_state(BonusTaskStates.main)

@router.callback_query(BonusTaskStates.select_task_to_delete, F.data.startswith("delete_task_"))
async def confirm_delete_bonus_task(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_delete_bonus_task")

    task_id = int(callback.data.replace("delete_task_", ""))
    await state.update_data(task_id=task_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        task = await ShopItemRepository.get_by_id(task_id)

        if not task:
            await callback.message.edit_text(
                "‚ùå –ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_bonus_task_management_kb()
            )
            await state.set_state(BonusTaskStates.main)
            return

        await callback.message.edit_text(
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ '{task.name}'?\n\n"
            "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_task")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete_task")]
            ])
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏.",
            reply_markup=get_bonus_task_management_kb()
        )
        await state.set_state(BonusTaskStates.main)

@router.callback_query(F.data == "confirm_delete_task")
async def delete_bonus_task(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ delete_bonus_task")

    user_data = await state.get_data()
    task_id = user_data.get("task_id")

    if not task_id:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_bonus_task_management_kb()
        )
        await state.set_state(BonusTaskStates.main)
        return

    try:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await ShopItemRepository.deactivate(task_id)

        if success:
            await callback.message.edit_text(
                "‚úÖ –ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!\n\n"
                "–ó–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–æ–Ω—É—Å–æ–≤ —É —É—á–µ–Ω–∏–∫–æ–≤.",
                reply_markup=get_bonus_task_management_kb()
            )
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å ID: {task_id}")
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.",
                reply_markup=get_bonus_task_management_kb()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.",
            reply_markup=get_bonus_task_management_kb()
        )

    await state.set_state(BonusTaskStates.main)

@router.callback_query(F.data == "cancel_delete_task")
async def cancel_delete_bonus_task(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cancel_delete_bonus_task")

    await show_bonus_tasks_to_delete(callback, state)
