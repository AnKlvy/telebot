from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from manager.keyboards.lessons import (
    get_lessons_menu_kb,
    get_courses_list_kb,
    get_subjects_list_kb,
    get_lessons_list_kb,
    confirm_delete_lesson_kb,
    LessonCallback,
    LessonActions
)
from common.keyboards import get_home_kb
from database.repositories.lesson_repository import LessonRepository
from database.repositories.subject_repository import SubjectRepository
from database.repositories.course_repository import CourseRepository

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

class ManagerLessonStates(StatesGroup):
    main = State()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ä–æ–∫–æ–≤ (–≤—ã–±–æ—Ä –∫—É—Ä—Å–∞)
    select_subject = State()  # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    lessons_list = State()  # –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–∞
    adding_lesson = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
    confirm_deletion = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è

@router.callback_query(F.data == "manager_lessons")
async def show_courses(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –∏–∑ –ë–î
    courses = await CourseRepository.get_all()
    
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–∫–∞–º–∏:",
        reply_markup=await get_courses_list_kb(courses)
    )
    await state.set_state(ManagerLessonStates.main)

@router.callback_query(LessonCallback.filter(F.action == LessonActions.VIEW), StateFilter(ManagerLessonStates.main, ManagerLessonStates.select_subject))
async def process_view_action(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º course_id –∏ subject_id –∏–∑ callback_data –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    course_id = None
    subject_id = None

    if hasattr(callback_data, 'course_id') and callback_data.course_id is not None:
        course_id = callback_data.course_id
    else:
        # –ï—Å–ª–∏ callback_data –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç course_id, –±–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        course_id = user_data.get('course_id')

    if hasattr(callback_data, 'subject_id') and callback_data.subject_id is not None:
        subject_id = callback_data.subject_id
    else:
        # –ï—Å–ª–∏ callback_data –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç subject_id, –±–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        subject_id = user_data.get('subject_id')

    if course_id is not None and subject_id is None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫—É—Ä—Å–∞
        course = await CourseRepository.get_by_id(course_id)
        if not course:
            await callback.message.edit_text(
                text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_home_kb()
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫—É—Ä—Å–∞
        subjects = await SubjectRepository.get_by_course(course_id)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
        await state.update_data(course_id=course_id, course_name=course.name, subject_id=None, subject_name=None)
        await state.set_state(ManagerLessonStates.select_subject)
        await callback.message.edit_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫—É—Ä—Å–∞ {course.name}:",
            reply_markup=await get_subjects_list_kb(subjects, course_id)
        )
    elif subject_id is not None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
        subject = await SubjectRepository.get_by_id(subject_id)
        if not subject:
            await callback.message.edit_text(
                text="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_home_kb()
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞
        lessons = await LessonRepository.get_by_subject_and_course(subject_id, course_id)
        
        await state.update_data(
            subject_id=subject_id,
            subject_name=subject.name
        )
        await state.set_state(ManagerLessonStates.lessons_list)
        await callback.message.edit_text(
            text=f"üìù –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject.name}:\n"
                 f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}",
            reply_markup=await get_lessons_list_kb(
                lessons,
                course_id=course_id,
                subject_id=subject_id
            )
        )

# –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
async def back_to_select_subject(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞"""
    user_data = await state.get_data()
    course_id = user_data.get('course_id')
    course_name = user_data.get('course_name')

    if course_id:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫—É—Ä—Å–∞
        subjects = await SubjectRepository.get_by_course(course_id)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞
        await state.update_data(subject_id=None, subject_name=None)
        await state.set_state(ManagerLessonStates.select_subject)
        await callback.message.edit_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫—É—Ä—Å–∞ {course_name}:",
            reply_markup=await get_subjects_list_kb(subjects, course_id)
        )

async def back_to_lessons_list(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤"""
    user_data = await state.get_data()
    course_id = user_data.get('course_id')
    subject_id = user_data.get('subject_id')
    subject_name = user_data.get('subject_name')

    if course_id and subject_id and subject_name:
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
        lessons = await LessonRepository.get_by_subject(subject_id)
        
        await state.set_state(ManagerLessonStates.lessons_list)
        await callback.message.edit_text(
            text=f"üìù –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}:\n"
                 f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}",
            reply_markup=await get_lessons_list_kb(
                lessons,
                course_id=course_id,
                subject_id=subject_id
            )
        )

@router.callback_query(LessonCallback.filter(F.action == LessonActions.ADD), StateFilter(ManagerLessonStates.lessons_list))
async def start_add_lesson(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    subject_name = data.get('subject_name')
    
    await state.set_state(ManagerLessonStates.adding_lesson)
    await callback.message.edit_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(ManagerLessonStates.adding_lesson))
async def process_lesson_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    subject_id = data['subject_id']
    subject_name = data['subject_name']
    new_lesson_name = message.text.strip()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        lesson = await LessonRepository.create(new_lesson_name, subject_id, data['course_id'])

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
        lessons = await LessonRepository.get_by_subject_and_course(subject_id, data['course_id'])
        
        await state.set_state(ManagerLessonStates.lessons_list)
        await message.answer(
            text=f"‚úÖ –£—Ä–æ–∫ \"{new_lesson_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–¥–º–µ—Ç {subject_name}\n"
                 f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}",
            reply_markup=await get_lessons_list_kb(
                lessons,
                course_id=data['course_id'],
                subject_id=subject_id
            )
        )
    except ValueError as e:
        # –£—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        await message.answer(
            text=f"‚ùå {str(e)}\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_home_kb()
        )

@router.callback_query(LessonCallback.filter(F.action == LessonActions.DELETE), StateFilter(ManagerLessonStates.lessons_list))
async def confirm_delete(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    lesson_id = callback_data.lesson_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
    lesson = await LessonRepository.get_by_id(lesson_id)
    if not lesson:
        await callback.message.edit_text(
            text="‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_home_kb()
        )
        return
    
    data = await state.get_data()
    subject_name = data['subject_name']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(lesson_id=lesson_id, lesson_name=lesson.name)
    
    await state.set_state(ManagerLessonStates.confirm_deletion)
    await callback.message.edit_text(
        text=f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ \"{lesson.name}\" –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}?",
        reply_markup=confirm_delete_lesson_kb(lesson_id)
    )

@router.callback_query(LessonCallback.filter(F.action == LessonActions.CONFIRM_DELETE), StateFilter(ManagerLessonStates.confirm_deletion))
async def process_delete_lesson(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    lesson_id = data['lesson_id']
    lesson_name = data['lesson_name']
    subject_id = data['subject_id']
    subject_name = data['subject_name']
    
    # –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = await LessonRepository.delete(lesson_id)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
        lessons = await LessonRepository.get_by_subject_and_course(subject_id, data['course_id'])
        
        await state.set_state(ManagerLessonStates.lessons_list)
        await callback.message.edit_text(
            text=f"‚úÖ –£—Ä–æ–∫ \"{lesson_name}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}\n"
                 f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}",
            reply_markup=await get_lessons_list_kb(
                lessons,
                course_id=data['course_id'],
                subject_id=subject_id
            )
        )
    else:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞ \"{lesson_name}\"",
            reply_markup=get_home_kb()
        )

@router.callback_query(LessonCallback.filter(F.action == LessonActions.CANCEL), StateFilter(ManagerLessonStates.confirm_deletion))
async def cancel_action(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await back_to_lessons_list(callback, state)