from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from manager.keyboards.lessons import (
    get_lessons_menu_kb,
    get_courses_list_kb,
    get_subjects_list_kb,
    get_lessons_list_kb,
    confirm_delete_lesson_kb,
    LessonCallback,
    LessonActions
)

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
courses_db = {
    1: "–ï–ù–¢",
    2: "IT"
}

subjects_db = {
    1: ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"],
    2: ["Python", "JavaScript", "Java"]
}

lessons_db = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": ["–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è", "–ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è", "–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è"],
    "–§–∏–∑–∏–∫–∞": ["–ú–µ—Ö–∞–Ω–∏–∫–∞", "–û–ø—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ"],
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": ["–ê–ª–≥–æ—Ä–∏—Ç–º—ã", "–ú–∞—Å—Å–∏–≤—ã", "–¶–∏–∫–ª—ã"],
    "Python": ["–û—Å–Ω–æ–≤—ã", "–û–û–ü", "Flask"],
    "JavaScript": ["DOM", "React", "Node.js"],
    "Java": ["Core", "Spring", "Android"]
}

class ManagerLessonStates(StatesGroup):
    main = State()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ä–æ–∫–æ–≤ (–≤—ã–±–æ—Ä –∫—É—Ä—Å–∞)
    select_subject = State()  # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    lessons_list = State()  # –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–∞
    adding_lesson = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
    confirm_deletion = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è

@router.callback_query(F.data == "manager_lessons")
async def show_courses(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"""
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–∫–∞–º–∏:",
        reply_markup=get_courses_list_kb(courses_db)
    )
    await state.set_state(ManagerLessonStates.main)

@router.callback_query(LessonCallback.filter(F.action == LessonActions.VIEW))
async def process_view_action(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–æ–≤"""
    if callback_data.course_id is not None and callback_data.subject_id is None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫—É—Ä—Å–∞
        subjects = subjects_db.get(callback_data.course_id, [])
        await state.update_data(course_id=callback_data.course_id)
        await state.set_state(ManagerLessonStates.select_subject)
        await callback.message.edit_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫—É—Ä—Å–∞ {courses_db[callback_data.course_id]}:",
            reply_markup=get_subjects_list_kb(subjects, callback_data.course_id)
        )
    elif callback_data.subject_id is not None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_name = subjects_db[callback_data.course_id][callback_data.subject_id]
        lessons = lessons_db.get(subject_name, [])
        await state.update_data(
            subject_id=callback_data.subject_id,
            subject_name=subject_name
        )
        await state.set_state(ManagerLessonStates.lessons_list)
        await callback.message.edit_text(
            text=f"üìù –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}:\n"
                 f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}",
            reply_markup=get_lessons_list_kb(
                lessons,
                course_id=callback_data.course_id,
                subject_id=callback_data.subject_id
            )
        )

@router.callback_query(LessonCallback.filter(F.action == LessonActions.ADD))
async def start_add_lesson(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    subject_name = data.get('subject_name')
    
    await state.set_state(ManagerLessonStates.adding_lesson)
    await callback.message.edit_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}:",
        reply_markup=get_home_kb()
    )

@router.message(StateFilter(ManagerLessonStates.adding_lesson))
async def process_lesson_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    subject_name = data['subject_name']
    new_lesson_name = message.text.strip()
    
    if subject_name not in lessons_db:
        lessons_db[subject_name] = []
    lessons_db[subject_name].append(new_lesson_name)
    
    await state.set_state(ManagerLessonStates.lessons_list)
    await message.answer(
        text=f"‚úÖ –£—Ä–æ–∫ \"{new_lesson_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–¥–º–µ—Ç {subject_name}\n"
             f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons_db[subject_name])}",
        reply_markup=get_lessons_list_kb(
            lessons_db[subject_name],
            course_id=data['course_id'],
            subject_id=data['subject_id']
        )
    )

@router.callback_query(LessonCallback.filter(F.action == LessonActions.DELETE))
async def confirm_delete(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    subject_name = data['subject_name']
    lesson_to_delete = lessons_db[subject_name][callback_data.lesson_id]
    
    await state.set_state(ManagerLessonStates.confirm_deletion)
    await callback.message.edit_text(
        text=f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ \"{lesson_to_delete}\" –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}?",
        reply_markup=confirm_delete_lesson_kb(callback_data.lesson_id)
    )

@router.callback_query(LessonCallback.filter(F.action == LessonActions.CONFIRM_DELETE))
async def process_delete_lesson(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    subject_name = data['subject_name']
    lesson_to_delete = lessons_db[subject_name].pop(callback_data.lesson_id)
    
    await state.set_state(ManagerLessonStates.lessons_list)
    await callback.message.edit_text(
        text=f"‚úÖ –£—Ä–æ–∫ \"{lesson_to_delete}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}\n"
             f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons_db[subject_name])}",
        reply_markup=get_lessons_list_kb(
            lessons_db[subject_name],
            course_id=data['course_id'],
            subject_id=data['subject_id']
        )
    )

@router.callback_query(LessonCallback.filter(F.action == LessonActions.CANCEL))
async def cancel_action(callback: CallbackQuery, callback_data: LessonCallback, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    data = await state.get_data()
    subject_name = data['subject_name']
    
    await state.set_state(ManagerLessonStates.lessons_list)
    await callback.message.edit_text(
        text=f"üìù –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}:\n"
             f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons_db[subject_name])}",
        reply_markup=get_lessons_list_kb(
            lessons_db[subject_name],
            course_id=data['course_id'],
            subject_id=data['subject_id']
        )
    )