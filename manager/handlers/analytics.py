from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from common.analytics.handlers import (
    select_group_for_student_analytics,
    select_student_for_analytics, select_group_for_group_analytics,
    show_subject_microtopics_detailed, show_subject_microtopics_summary
)
from ..keyboards.analytics import (
    get_manager_analytics_menu_kb, get_curators_kb, get_subjects_kb
)
from common.analytics.keyboards import get_back_to_analytics_kb
from common.statistics import (
    get_subject_stats, format_subject_stats, get_general_stats, format_general_stats, show_student_analytics,
    show_group_analytics
)
from common.utils import check_if_id_in_callback_data
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –†–∞—Å—à–∏—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
class ManagerAnalyticsStates(StatesGroup):
    main = State()
    select_group_for_student = State()
    select_student = State()
    select_group_for_group = State()
    select_curator_for_student = State()
    select_curator_for_group = State()
    select_subject = State()
    subject_stats = State()
    student_stats = State()
    group_stats = State()
    general_stats = State()

router = Router()

@router.callback_query(F.data == "manager_analytics")
async def show_manager_analytics_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ show_manager_analytics_menu")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=get_manager_analytics_menu_kb()
    )
    await state.set_state(ManagerAnalyticsStates.main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫—É
@router.callback_query(ManagerAnalyticsStates.main, F.data == "manager_student_analytics")
async def manager_select_curator_for_student(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_select_curator_for_student")
    curators_kb = await get_curators_kb()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=curators_kb
    )
    await state.set_state(ManagerAnalyticsStates.select_curator_for_student)

@router.callback_query(ManagerAnalyticsStates.select_curator_for_student, F.data.startswith("manager_curator_"))
async def manager_select_group_for_student(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_select_group_for_student")
    curator_id = await check_if_id_in_callback_data("manager_curator_", callback, state, "curator")
    logger.debug(f"–í—ã–±—Ä–∞–Ω –∫—É—Ä–∞—Ç–æ—Ä —Å ID: {curator_id}")
    await state.update_data(selected_curator=curator_id)
    await select_group_for_student_analytics(callback, state, "manager")
    await state.set_state(ManagerAnalyticsStates.select_group_for_student)

@router.callback_query(ManagerAnalyticsStates.select_group_for_student, F.data.startswith("analytics_group_"))
async def manager_select_student_for_analytics(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_select_student_for_analytics")
    await select_student_for_analytics(callback, state, "manager")
    await state.set_state(ManagerAnalyticsStates.select_student)

@router.callback_query(ManagerAnalyticsStates.select_student, F.data.startswith("analytics_student_"))
async def manager_show_student_analytics(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—á–µ–Ω–∏–∫—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_show_student_analytics")
    await show_student_analytics(callback, state, "manager")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ
@router.callback_query(ManagerAnalyticsStates.main, F.data == "manager_group_analytics")
async def manager_select_curator_for_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_select_curator_for_group")
    curators_kb = await get_curators_kb()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=curators_kb
    )
    await state.set_state(ManagerAnalyticsStates.select_curator_for_group)

@router.callback_query(ManagerAnalyticsStates.select_curator_for_group, F.data.startswith("manager_curator_"))
async def manager_select_group_for_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_select_group_for_group")
    curator_id = callback.data.replace("manager_curator_", "")
    logger.debug(f"–í—ã–±—Ä–∞–Ω –∫—É—Ä–∞—Ç–æ—Ä —Å ID: {curator_id}")
    await state.update_data(selected_curator=curator_id)
    
    await select_group_for_group_analytics(callback, state, "manager")
    await state.set_state(ManagerAnalyticsStates.select_group_for_group)

@router.callback_query(ManagerAnalyticsStates.select_group_for_group, F.data.startswith("analytics_group_"))
async def manager_show_group_analytics(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_show_group_analytics")
    await show_group_analytics(callback, state, "manager")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
@router.callback_query(ManagerAnalyticsStates.main, F.data == "manager_subject_analytics")
async def manager_select_subject(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_select_subject")
    subjects_kb = await get_subjects_kb()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=subjects_kb
    )
    await state.set_state(ManagerAnalyticsStates.select_subject)

@router.callback_query(ManagerAnalyticsStates.select_subject, F.data.startswith("manager_subject_"))
async def manager_show_subject_analytics(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_show_subject_analytics")
    subject_id = callback.data.replace("manager_subject_", "")
    logger.debug(f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç —Å ID: {subject_id}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    subject_data = await get_subject_stats(subject_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ (–∫–∞–∫ –≤ –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏)
    result_text = f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_data['name']}\n\n"
    result_text += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {len(subject_data['groups'])}\n"

    if subject_data['groups']:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó
        avg_homework = sum(group['homework_completion'] for group in subject_data['groups']) / len(subject_data['groups'])
        result_text += f"üìä –°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó: {avg_homework:.1f}%\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        result_text += "üìã –ì—Ä—É–ø–ø—ã:\n"
        for group in subject_data['groups']:
            result_text += f"‚Ä¢ {group['name']} - {group['homework_completion']}%\n"
    else:
        result_text += "‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

    result_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:"

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from common.analytics.keyboards import get_subject_microtopics_kb

    await callback.message.edit_text(
        result_text,
        reply_markup=get_subject_microtopics_kb(int(subject_id))
    )
    await state.set_state(ManagerAnalyticsStates.subject_stats)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.callback_query(ManagerAnalyticsStates.main, F.data == "general_analytics")
async def manager_show_general_analytics(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_show_general_analytics")
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    general_data = await get_general_stats()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—Å—Ç
    result_text = format_general_stats(general_data)

    await callback.message.edit_text(
        result_text,
        reply_markup=get_back_to_analytics_kb()
    )
    await state.set_state(ManagerAnalyticsStates.general_stats)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º –ø—Ä–µ–¥–º–µ—Ç–∞
@router.callback_query(F.data.startswith("subject_microtopics_detailed_"))
async def manager_show_subject_microtopics_detailed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º –ø—Ä–µ–¥–º–µ—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_show_subject_microtopics_detailed")
    await show_subject_microtopics_detailed(callback, state)

@router.callback_query(F.data.startswith("subject_microtopics_summary_"))
async def manager_show_subject_microtopics_summary(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–∏–ª—å–Ω—ã–º –∏ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º –ø—Ä–µ–¥–º–µ—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manager_show_subject_microtopics_summary")
    await show_subject_microtopics_summary(callback, state)