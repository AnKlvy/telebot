from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from common.keyboards import get_main_menu_back_button
from database.repositories.course_repository import CourseRepository
from database.repositories.subject_repository import SubjectRepository

def get_month_tests_menu_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data="create_month_test")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", callback_data="list_month_tests")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç", callback_data="delete_month_test")],
        *get_main_menu_back_button()
    ])

async def get_courses_for_tests_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    try:
        courses = await CourseRepository.get_all()
        buttons = []

        for course in courses:
            buttons.append([
                InlineKeyboardButton(
                    text=course.name,
                    callback_data=f"course_{course.id}"
                )
            ])

        buttons.extend(get_main_menu_back_button())
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    except Exception:
        # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        buttons = [
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤", callback_data="error")]
        ]
        buttons.extend(get_main_menu_back_button())
        return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_subjects_for_tests_kb(course_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    try:
        subjects = await SubjectRepository.get_by_course(course_id)
        buttons = []

        for subject in subjects:
            buttons.append([
                InlineKeyboardButton(
                    text=subject.name,
                    callback_data=f"subject_{subject.id}"
                )
            ])

        buttons.extend(get_main_menu_back_button())
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    except Exception:
        # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        buttons = [
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data="error")]
        ]
        buttons.extend(get_main_menu_back_button())
        return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_microtopics_input_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –º–∏–∫—Ä–æ—Ç–µ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def get_confirm_test_creation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data="confirm_create_test")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_create_test")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def get_tests_list_kb(tests_list: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    buttons = []
    
    if not tests_list:
        buttons.append([
            InlineKeyboardButton(text="üìù –¢–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç", callback_data="no_tests")
        ])
    else:
        for test in tests_list:
            test_name = f"{test['course_name']} - {test['subject_name']} - {test['month_name']}"
            buttons.append([
                InlineKeyboardButton(
                    text=test_name,
                    callback_data=f"view_test_{test['id']}"
                )
            ])
    
    buttons.extend(get_main_menu_back_button())
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_delete_test_kb(test_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{test_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

async def get_delete_tests_list_kb(tests_list: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    buttons = []

    if not tests_list:
        buttons.append([
            InlineKeyboardButton(text="üìù –¢–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç", callback_data="no_tests")
        ])
    else:
        for test in tests_list:
            test_name = f"{test.course.name} - {test.subject.name} - {test.name}"
            buttons.append([
                InlineKeyboardButton(
                    text=f"üóë {test_name}",
                    callback_data=f"delete_test_{test.id}"
                )
            ])

    buttons.extend(get_main_menu_back_button())
    return InlineKeyboardMarkup(inline_keyboard=buttons)
