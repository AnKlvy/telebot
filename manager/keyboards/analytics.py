from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from common.keyboards import get_main_menu_back_button
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ database
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from database import CuratorRepository, SubjectRepository

def get_manager_analytics_menu_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–µ–Ω–∏–∫—É", callback_data="manager_student_analytics")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ", callback_data="manager_group_analytics")],
        [InlineKeyboardButton(text="üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É", callback_data="manager_subject_analytics")],
        [InlineKeyboardButton(text="üìã –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="general_analytics")],
        *get_main_menu_back_button()
    ])

async def get_curators_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        all_curators = await CuratorRepository.get_all()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        all_curators = []

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ user_id, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    unique_curators = {}
    for curator in all_curators:
        user_id = curator.user_id
        if user_id not in unique_curators:
            unique_curators[user_id] = curator

    buttons = []
    for curator in unique_curators.values():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –≥—Ä—É–ø–ø
        # –ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ, –≥—Ä—É–ø–ø—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        curator_info = f"{curator.user.name}"
        if curator.subject:
            curator_info += f" ({curator.subject.name})"

        buttons.append([
            InlineKeyboardButton(
                text=curator_info,
                callback_data=f"manager_curator_{curator.id}"
            )
        ])

    if not buttons:
        buttons.append([
            InlineKeyboardButton(
                text="‚ùå –ö—É—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                callback_data="no_curators"
            )
        ])

    buttons.extend(get_main_menu_back_button())

    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_subjects_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        subjects = await SubjectRepository.get_all()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
        subjects = []

    buttons = []
    for subject in subjects:
        buttons.append([
            InlineKeyboardButton(
                text=subject.name,
                callback_data=f"manager_subject_{subject.id}"
            )
        ])

    if not buttons:
        buttons.append([
            InlineKeyboardButton(
                text="‚ùå –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                callback_data="no_subjects"
            )
        ])

    buttons.extend(get_main_menu_back_button())

    return InlineKeyboardMarkup(inline_keyboard=buttons)