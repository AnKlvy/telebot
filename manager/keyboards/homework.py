from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from common.keyboards import get_main_menu_back_button, get_universal_back_button


def get_homework_management_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data="manager_add_homework")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –î–ó", callback_data="manager_delete_homework")],
        *get_main_menu_back_button()
    ])

def get_courses_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    courses = [
        {"id": "course_geo", "name": "–ò–Ω—Ç–µ–Ω—Å–∏–≤. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è"},
        {"id": "course_math", "name": "–ò–Ω—Ç–µ–Ω—Å–∏–≤. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"}
    ]
    
    buttons = []
    for course in courses:
        buttons.append([
            InlineKeyboardButton(
                text=course["name"], 
                callback_data=course["id"]
            )
        ])
    
    buttons.extend(get_main_menu_back_button())
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subjects_kb(course_id: str = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    subjects = [
        {"id": "sub_kz", "name": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞"},
        {"id": "sub_mathlit", "name": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"},
        {"id": "sub_math", "name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"},
        {"id": "sub_geo", "name": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"},
        {"id": "sub_bio", "name": "–ë–∏–æ–ª–æ–≥–∏—è"},
        {"id": "sub_chem", "name": "–•–∏–º–∏—è"},
        {"id": "sub_inf", "name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"}
    ]
    
    buttons = []
    for subject in subjects:
        buttons.append([
            InlineKeyboardButton(
                text=subject["name"], 
                callback_data=subject["id"]
            )
        ])
    
    buttons.extend(get_main_menu_back_button())
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_lessons_kb(subject_id: str = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    lessons = [
        {"id": "lesson_alkanes", "name": "1. –ê–ª–∫–∞–Ω—ã"},
        {"id": "lesson_isomeria", "name": "2. –ò–∑–æ–º–µ—Ä–∏—è"},
        {"id": "lesson_acids", "name": "3. –ö–∏—Å–ª–æ—Ç—ã"}
    ]
    
    buttons = []
    for lesson in lessons:
        buttons.append([
            InlineKeyboardButton(
                text=lesson["name"], 
                callback_data=lesson["id"]
            )
        ])
    
    buttons.append([
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫", 
            callback_data="add_new_lesson"
        )
    ])
    
    buttons.extend(get_main_menu_back_button())
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_time_limit_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–≤–µ—Ç"""
    time_options = [10, 20, 30, 60, 120, 180, 240, 300]
    
    buttons = []
    for time in time_options:
        text = f"{time} —Å–µ–∫."
        if time >= 60:
            minutes = time // 60
            seconds = time % 60
            text = f"{minutes} –º–∏–Ω."
            if seconds > 0:
                text += f" {seconds} —Å–µ–∫."
        
        buttons.append([
            InlineKeyboardButton(
                text=text, 
                callback_data=f"time_{time}"
            )
        ])
    
    buttons.extend(get_main_menu_back_button())
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_correct_answer_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    buttons = []
    for letter in ["A", "B", "C", "D", "E"]:
        buttons.append([
            InlineKeyboardButton(
                text=f"–í–∞—Ä–∏–∞–Ω—Ç {letter}", 
                callback_data=f"correct_{letter}"
            )
        ])
    
    buttons.extend(get_main_menu_back_button())
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_add_question_kb(question_count: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", 
                callback_data="add_more_question"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å ({question_count} –≤–æ–ø—Ä–æ—Å–æ–≤)", 
                callback_data="finish_adding_questions"
            )
        ],
        *get_main_menu_back_button()
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_homework_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –î–ó"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                callback_data="confirm_homework"
            )
        ],
        # [
        #     InlineKeyboardButton(
        #         text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å",
        #         callback_data="edit_homework"
        #     )
        # ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data="cancel_homework"
            )
        ],
        *get_main_menu_back_button()
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_homeworks_list_kb(lesson_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –î–ó –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    homeworks = [
        {"id": "hw_1", "name": "–ë–∞–∑–æ–≤–æ–µ –î–ó –ø–æ –∞–ª–∫–∞–Ω–∞–º"},
        {"id": "hw_2", "name": "–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –î–ó –ø–æ –∞–ª–∫–∞–Ω–∞–º"},
        {"id": "hw_3", "name": "–î–ó –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"}
    ]
    
    buttons = []
    for hw in homeworks:
        buttons.append([
            InlineKeyboardButton(
                text=hw["name"], 
                callback_data=f"delete_hw_{hw['id']}"
            )
        ])
    
    buttons.extend(get_main_menu_back_button())
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_photo_skip_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ —Ñ–æ—Ç–æ)",
                callback_data="skip_photo"
            )
        ],
        *get_main_menu_back_button()
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_photo_edit_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    buttons = [
        [
            InlineKeyboardButton(
                text="üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ",
                callback_data="edit_photo"
            )
        ],
        [
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ",
                callback_data="remove_photo"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                callback_data="continue_without_edit"
            )
        ],
        *get_main_menu_back_button()
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_step_edit_kb(step: str, has_data: bool = True) -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ"""
    buttons = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞
    edit_texts = {
        "test_name": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
        "question_text": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
        "photo": "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ" if has_data else "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
        "answer_options": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",
        "correct_answer": "‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
        "time_limit": "‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",
        "topic": "üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–∫—Ä–æ—Ç–µ–º—É",
        "summary": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    }

    continue_texts = {
        "test_name": "‚û°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
        "question_text": "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
        "photo": "üè∑ –í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–µ–º—É",
        "answer_options": "‚úÖ –í—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
        "correct_answer": "‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è",
        "time_limit": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
        "topic": "üìù –í–≤–µ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",
        "summary": "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    }

    edit_text = edit_texts.get(step, "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    continue_text = continue_texts.get(step, "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

    if has_data or step == "photo":
        buttons.append([
            InlineKeyboardButton(
                text=edit_text,
                callback_data=f"edit_{step}"
            )
        ])

    buttons.append([
        InlineKeyboardButton(
            text=continue_text,
            callback_data=f"continue_{step}"
        )
    ])

    buttons.extend(get_main_menu_back_button())

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_question_edit_kb(question_num: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
                callback_data=f"edit_question_text_{question_num}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ",
                callback_data=f"edit_question_photo_{question_num}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",
                callback_data=f"edit_answer_options_{question_num}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                callback_data=f"edit_correct_answer_{question_num}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",
                callback_data=f"edit_time_limit_{question_num}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–∫—Ä–æ—Ç–µ–º—É",
                callback_data=f"edit_topic_{question_num}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=f"delete_question_{question_num}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                callback_data="continue_editing"
            )
        ],
        *get_main_menu_back_button()
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)