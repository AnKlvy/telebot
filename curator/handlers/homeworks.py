from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from common.utils import check_if_id_in_callback_data
from ..keyboards.main import get_curator_main_menu_kb
from common.keyboards import get_courses_kb, get_subjects_kb, get_lessons_kb, get_main_menu_back_button
from ..keyboards.homeworks import get_homework_menu_kb, get_groups_kb, get_students_by_homework_kb
from common.analytics.keyboards import get_groups_for_analytics_kb
from database import (CuratorRepository, UserRepository, GroupRepository, StudentRepository,
                     CourseRepository, LessonRepository, HomeworkRepository, HomeworkResultRepository)

class CuratorHomeworkStates(StatesGroup):
    homework_menu = State()
    student_stats_course = State()
    student_stats_group = State()
    student_stats_lesson = State()
    student_stats_list = State()
    group_stats_group = State()
    group_stats_result = State()


router = Router()

@router.callback_query(F.data == "curator_homeworks")
async def show_homework_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_homework_menu_kb()
    )
    await state.set_state(CuratorHomeworkStates.homework_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫—É
@router.callback_query(CuratorHomeworkStates.homework_menu, F.data == "hw_student_stats")
async def select_student_stats_course(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫—É—Ä—Å–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        courses = await CourseRepository.get_all()

        if not courses:
            await callback.message.edit_text(
                "‚ùå –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    *get_main_menu_back_button()
                ])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏
        buttons = []
        for course in courses:
            buttons.append([
                InlineKeyboardButton(
                    text=course.name,
                    callback_data=f"course_{course.id}"
                )
            ])

        buttons.extend(get_main_menu_back_button())

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(CuratorHomeworkStates.student_stats_course)

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                *get_main_menu_back_button()
            ])
        )
        print(f"–û—à–∏–±–∫–∞ –≤ select_student_stats_course: {e}")

@router.callback_query(CuratorHomeworkStates.student_stats_course, F.data.startswith("course_"))
async def select_student_stats_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫—É"""
    course_id = int(await check_if_id_in_callback_data("course_", callback, state, "course"))
    await state.update_data(selected_course=course_id)

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    groups_kb = await get_groups_for_analytics_kb("curator", callback.from_user.id)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=groups_kb
    )
    await state.set_state(CuratorHomeworkStates.student_stats_group)

@router.callback_query(CuratorHomeworkStates.student_stats_group, F.data.startswith("analytics_group_"))
async def select_student_stats_lesson(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —É—Ä–æ–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫—É"""
    group_id = int(await check_if_id_in_callback_data("analytics_group_", callback, state, "group"))
    await state.update_data(selected_group=group_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫—É—Ä—Å–µ –∏ –≥—Ä—É–ø–ø–µ
        user_data = await state.get_data()
        course_id = user_data.get("selected_course")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = await GroupRepository.get_by_id(group_id)
        if not group:
            await callback.message.edit_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    *get_main_menu_back_button()
                ])
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≥—Ä—É–ø–ø—ã
        lessons = await LessonRepository.get_by_subject_and_course(group.subject_id, course_id)

        if not lessons:
            await callback.message.edit_text(
                f"‚ùå –£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫—É—Ä—Å–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≥—Ä—É–ø–ø—ã {group.name}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    *get_main_menu_back_button()
                ])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Ä–æ–∫–∞–º–∏
        buttons = []
        for lesson in lessons:
            buttons.append([
                InlineKeyboardButton(
                    text=lesson.name,
                    callback_data=f"lesson_{lesson.id}"
                )
            ])

        buttons.extend(get_main_menu_back_button())

        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.name} ({group.subject.name}):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(CuratorHomeworkStates.student_stats_lesson)

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                *get_main_menu_back_button()
            ])
        )
        print(f"–û—à–∏–±–∫–∞ –≤ select_student_stats_group: {e}")



@router.callback_query(CuratorHomeworkStates.student_stats_lesson, F.data.startswith("lesson_"))
async def show_student_stats_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –î–ó"""
    lesson_id = int(callback.data.replace("lesson_", ""))
    await state.update_data(selected_lesson=lesson_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        user_data = await state.get_data()
        course_id = user_data.get("selected_course")
        group_id = user_data.get("selected_group")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        course = await CourseRepository.get_by_id(course_id)
        group = await GroupRepository.get_by_id(group_id)
        lesson = await LessonRepository.get_by_id(lesson_id)

        if not course or not group or not lesson:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ, –≥—Ä—É–ø–ø–µ –∏–ª–∏ —É—Ä–æ–∫–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    *get_main_menu_back_button()
                ])
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
        students = await StudentRepository.get_by_group(group_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó
        completed_students = []
        not_completed_students = []

        for student in students:
            # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            if student.id % 2 == 0:  # –ó–∞–≥–ª—É—à–∫–∞: —á–µ—Ç–Ω—ã–µ ID –≤—ã–ø–æ–ª–Ω–∏–ª–∏
                completed_students.append(student)
            else:
                not_completed_students.append(student)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö
        if completed_students:
            buttons.append([InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª–∏:", callback_data="completed_header")])
            for student in completed_students:
                buttons.append([
                    InlineKeyboardButton(
                        text=student.user.name,
                        callback_data=f"student_completed_{student.id}"
                    )
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö
        if not_completed_students:
            buttons.append([InlineKeyboardButton(text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏:", callback_data="not_completed_header")])
            for student in not_completed_students:
                # –î–ª—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram
                buttons.append([
                    InlineKeyboardButton(
                        text=student.user.name,
                        url=f"tg://user?id={student.user.telegram_id}"
                    )
                ])

        buttons.extend(get_main_menu_back_button())

        await callback.message.edit_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group.name} ({group.subject.name})\n"
            f"üìö –ö—É—Ä—Å: {course.name}\n"
            f"üìñ –£—Ä–æ–∫: {lesson.name}\n\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {len(completed_students)}\n"
            f"‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏: {len(not_completed_students)}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —Å–≤—è–∑–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(CuratorHomeworkStates.student_stats_list)

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                *get_main_menu_back_button()
            ])
        )
        print(f"–û—à–∏–±–∫–∞ –≤ show_student_stats_list: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ
@router.callback_query(CuratorHomeworkStates.homework_menu, F.data == "hw_group_stats")
async def select_group_stats_group(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    groups_kb = await get_groups_for_analytics_kb("curator", callback.from_user.id)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=groups_kb
    )
    await state.set_state(CuratorHomeworkStates.group_stats_group)

@router.callback_query(CuratorHomeworkStates.group_stats_group, F.data.startswith("analytics_group_"))
async def show_group_stats(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–µ"""
    group_id = int(callback.data.replace("analytics_group_", ""))
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ
    group_data = {
        "group1": {
            "name": "–ò–Ω—Ç–µ–Ω—Å–∏–≤. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
            "subject": "–•–∏–º–∏—è",
            "homework_completion": 75,
            "topics": {
                "–ê–ª–∫–∞–Ω—ã": 82,
                "–ò–∑–æ–º–µ—Ä–∏—è": 37,
                "–ö–∏—Å–ª–æ—Ç—ã": 66
            },
            "rating": [
                {"name": "–ê—Ä—É–∂–∞–Ω", "points": 870},
                {"name": "–î–∏–∞–Ω–∞", "points": 800},
                {"name": "–ú–∞–¥–∏—è—Ä", "points": 780}
            ]
        },
        "group2": {
            "name": "–ò–Ω—Ç–µ–Ω—Å–∏–≤. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "subject": "–•–∏–º–∏—è",
            "homework_completion": 80,
            "topics": {
                "–ê–ª–∫–∞–Ω—ã": 78,
                "–ò–∑–æ–º–µ—Ä–∏—è": 42,
                "–ö–∏—Å–ª–æ—Ç—ã": 70
            },
            "rating": [
                {"name": "–ê—Ä–º–∞–Ω", "points": 850},
                {"name": "–ê–ª–∏—è", "points": 820},
                {"name": "–î–∏–∞—Å", "points": 790}
            ]
        }
    }
    
    stats = group_data.get(group_id, {
        "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
        "subject": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç",
        "homework_completion": 0,
        "topics": {},
        "rating": []
    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    rating_text = ""
    if stats["rating"]:
        rating_text = "üìã –†–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º:\n"
        for i, student in enumerate(stats["rating"], 1):
            rating_text += f"{i}. {student['name']} ‚Äî {student['points']} –±–∞–ª–ª–æ–≤\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–º–∞–º–∏ —Å –µ–¥–∏–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    topics_text = "üìà –°—Ä–µ–¥–Ω–∏–π % –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º:\n"
    for topic, percentage in stats["topics"].items():
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        status = "‚úÖ" if percentage >= 80 else "‚ùå" if percentage <= 40 else "‚ö†Ô∏è"
        topics_text += f"‚Ä¢ {topic} ‚Äî {percentage}% {status}\n"
    
    await callback.message.edit_text(
        f"üìó {stats['subject']}\n"
        f"üìä –°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó: {stats['homework_completion']}%\n"
        f"{topics_text}\n"
        f"{rating_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            *get_main_menu_back_button()
        ])
    )
    await state.set_state(CuratorHomeworkStates.group_stats_result)

