from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from ..keyboards.groups import get_curator_groups_kb, get_group_students_kb, get_student_profile_kb
from ..keyboards.main import get_curator_main_menu_kb

router = Router()

class CuratorGroupStates(StatesGroup):
    select_group = State()
    select_student = State()
    student_profile = State()

@router.callback_query(F.data == "curator_my_group")
async def show_curator_groups(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_curator_groups_kb()
    )
    await state.set_state(CuratorGroupStates.select_group)

@router.callback_query(CuratorGroupStates.select_group, F.data.startswith("group_"))
async def show_group_students(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
    group_id = callback.data.replace("group_", "")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    group_names = {
        "chem_premium": "–•–∏–º–∏—è ‚Äî –ü—Ä–µ–º–∏—É–º",
        "bio_intensive": "–ë–∏–æ–ª–æ–≥–∏—è ‚Äî –ò–Ω—Ç–µ–Ω—Å–∏–≤",
        "history_basic": "–ò—Å—Ç–æ—Ä–∏—è ‚Äî –ë–∞–∑–æ–≤—ã–π"
    }
    group_name = group_names.get(group_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")
    
    await state.update_data(current_group_id=group_id, current_group_name=group_name)
    
    await callback.message.edit_text(
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_group_students_kb(group_id)
    )
    await state.set_state(CuratorGroupStates.select_student)

@router.callback_query(CuratorGroupStates.select_student, F.data.startswith("student_"))
async def show_student_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ callback_data
    student_id = callback.data.replace("student_", "")
    
    # –•–∞—Ä–¥–∫–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    if student_id == "1":
        student = {
            "name": "–ê—Ä—É–∂–∞–Ω –ê—Ö–º–µ—Ç–æ–≤–∞",
            "telegram": "@aruzhan_chem",
            "subject": "–•–∏–º–∏—è",
            "points": 870,
            "level": "üß™ –ü—Ä–∞–∫—Ç–∏–∫",
            "homeworks_completed": 28,
            "last_homework_date": "14.05.2025",
            "completion_percentage": 30
        }
    elif student_id == "2":
        student = {
            "name": "–ú–∞–¥–∏—è—Ä –°–∞–ø–∞—Ä–æ–≤",
            "telegram": "@madiyar_bio",
            "subject": "–ë–∏–æ–ª–æ–≥–∏—è",
            "points": 920,
            "level": "üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            "homeworks_completed": 32,
            "last_homework_date": "15.05.2025",
            "completion_percentage": 35
        }
    elif student_id == "3":
        student = {
            "name": "–î–∏–∞–Ω–∞ –ï—Ä–∂–∞–Ω–æ–≤–∞",
            "telegram": "@diana_history",
            "subject": "–ò—Å—Ç–æ—Ä–∏—è",
            "points": 750,
            "level": "üìö –¢–µ–æ—Ä–µ—Ç–∏–∫",
            "homeworks_completed": 25,
            "last_homework_date": "12.05.2025",
            "completion_percentage": 28
        }
    else:
        student = {
            "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫",
            "telegram": "–ù–µ —É–∫–∞–∑–∞–Ω",
            "subject": "–ù–µ —É–∫–∞–∑–∞–Ω",
            "points": 0,
            "level": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
            "homeworks_completed": 0,
            "last_homework_date": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "completion_percentage": 0
        }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_student_id=student_id, current_student=student)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"üë§ {student['name']}\n"
        f"üìû Telegram: {student['telegram']}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student['subject']}\n"
        f"üéØ –ë–∞–ª–ª—ã: {student['points']}\n"
        f"üìà –£—Ä–æ–≤–µ–Ω—å: {student['level']}\n"
        f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –î–ó: {student['homeworks_completed']} (—Å —É—á–µ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö)\n"
        f"üïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –î–ó: {student['last_homework_date']}\n"
        f"üïì% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó: {student['completion_percentage']}%",
        reply_markup=get_student_profile_kb()
    )
    await state.set_state(CuratorGroupStates.student_profile)

@router.callback_query(F.data == "back_to_curator_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_curator_main_menu_kb()
    )
    await state.clear()

@router.callback_query(F.data == "back_to_groups")
async def back_to_groups_list(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø"""
    await show_curator_groups(callback, state)

@router.callback_query(F.data == "back_to_students")
async def back_to_students_list(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—á–µ–Ω–∏–∫–æ–≤"""
    user_data = await state.get_data()
    group_id = user_data.get("current_group_id")
    group_name = user_data.get("current_group_name", "–ì—Ä—É–ø–ø–∞")
    
    await callback.message.edit_text(
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_group_students_kb(group_id)
    )
    await state.set_state(CuratorGroupStates.select_student)