from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from common.keyboards import get_main_menu_back_button
from typing import List
from datetime import datetime


def format_date_russian(date: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    months = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    return f"{date.day} {months[date.month]}"

def get_shop_menu_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã", callback_data="exchange_points")],
        [InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥ –±–æ–Ω—É—Å–æ–≤", callback_data="bonus_catalog")],
        [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –±–æ–Ω—É—Å—ã", callback_data="my_bonuses")],
        *get_main_menu_back_button()
    ])

async def get_exchange_points_kb(available_points: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—ã"""
    buttons = []

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–ª–ª–æ–≤
    exchange_options = [50, 70, 100, 150, 200]

    for amount in exchange_options:
        if available_points >= amount:
            buttons.append([InlineKeyboardButton(
                text=f"{amount} –±–∞–ª–ª–æ–≤ ‚Üí {amount} –º–æ–Ω–µ—Ç",
                callback_data=f"exchange_{amount}"
            )])

    if not buttons:
        buttons.append([InlineKeyboardButton(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤",
            callback_data="no_points"
        )])

    buttons.extend(get_main_menu_back_button())
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_bonus_catalog_kb(items: List, user_coins: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –±–æ–Ω—É—Å–æ–≤"""
    buttons = []

    for item in items:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        emoji = {
            'bonus_test': 'üß™',
            'bonus_task': 'üéØ',
            'pdf': 'üìò',
            'money': 'üí∞',
            'other': 'üéÅ'
        }.get(item['item_type'], 'üéÅ')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        if item['type'] == 'bonus_test':
            callback_prefix = "buy_bonus_"
        else:
            callback_prefix = "buy_item_"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –º–æ–Ω–µ—Ç
        if user_coins >= item['price']:
            button_text = f"{emoji} {item['name']} ‚Äî {item['price']} –º–æ–Ω–µ—Ç"
            callback_data = f"{callback_prefix}{item['id']}"
        else:
            button_text = f"‚ùå {emoji} {item['name']} ‚Äî {item['price']} –º–æ–Ω–µ—Ç"
            callback_data = f"no_coins_{item['id']}"

        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=callback_data
        )])

    buttons.extend(get_main_menu_back_button())
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_my_bonuses_kb(purchases: List, bonus_test_purchases: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏'"""
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è)
    for purchase in purchases:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        emoji = {
            'bonus_task': 'üéØ',
            'pdf': 'üìò',
            'money': 'üí∞',
            'other': 'üéÅ'
        }.get(purchase.item.item_type, 'üéÅ')

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_str = format_date_russian(purchase.purchased_at)

        button_text = f"{emoji} {purchase.item.name} ‚Äî {purchase.price_paid} –º–æ–Ω–µ—Ç ‚Äî {date_str}"
        callback_data = f"use_bonus_{purchase.id}"

        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=callback_data
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    for purchase in bonus_test_purchases:
        question_count = len(purchase.bonus_test.questions) if purchase.bonus_test.questions else 0
        date_str = format_date_russian(purchase.purchased_at)

        button_text = f"üß™ {purchase.bonus_test.name} ‚Äî {purchase.price_paid} –º–æ–Ω–µ—Ç ‚Äî {date_str}"
        callback_data = f"use_bonus_test_{purchase.id}"

        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=callback_data
        )])

    buttons.extend(get_main_menu_back_button())
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_shop_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        *get_main_menu_back_button(),
    ])

def get_purchase_confirmation_kb(item_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"confirm_purchase_bonus_{item_id}")],
        [InlineKeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="bonus_catalog")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_purchase")],
        *get_main_menu_back_button()
    ])

def get_item_purchase_confirmation_kb(item_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è)"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"confirm_purchase_item_{item_id}")],
        [InlineKeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="bonus_catalog")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_purchase")],
        *get_main_menu_back_button()
    ])

def get_purchase_confirmation_kb(test_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"confirm_purchase_bonus_{test_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_purchase")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="bonus_catalog")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])