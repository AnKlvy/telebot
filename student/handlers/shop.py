from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from ..keyboards.shop import get_shop_menu_kb, get_exchange_points_kb, get_back_to_shop_kb, get_bonus_catalog_kb, get_my_bonuses_kb
from database import StudentRepository, ShopItemRepository, StudentPurchaseRepository, BonusTestRepository, StudentBonusTestRepository
from common.navigation import log

router = Router()

class ShopStates(StatesGroup):
    main = State()
    exchange = State()
    catalog = State()
    my_bonuses = State()

@router.callback_query(F.data == "shop")
async def show_shop_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    await log("show_shop_menu", "student", state)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ telegram_id
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
    balance = await StudentRepository.get_balance(student.id)
    points = balance["points"]
    coins = balance["coins"]

    await callback.message.edit_text(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –º–æ–Ω–µ—Ç—ã –∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ –±–æ–Ω—É—Å—ã.\n"
        "üí∞ –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å:\n"
        f"–ë–∞–ª–ª—ã: {points}\n"
        f"–ú–æ–Ω–µ—Ç—ã: {coins}",
        reply_markup=get_shop_menu_kb()
    )
    await state.set_state(ShopStates.main)

@router.callback_query(ShopStates.main, F.data == "exchange_points")
async def show_exchange_options(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—ã"""
    await log("show_exchange_options", "student", state)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    balance = await StudentRepository.get_balance(student.id)
    points = balance["points"]

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –º–æ–Ω–µ—Ç—ã:\n"
        f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤: {points}",
        reply_markup=await get_exchange_points_kb(points)
    )
    await state.set_state(ShopStates.exchange)

@router.callback_query(ShopStates.exchange, F.data.startswith("exchange_"))
async def process_exchange(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—ã"""
    await log("process_exchange", "student", state)

    exchange_amount = int(callback.data.replace("exchange_", ""))

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
    success = await StudentRepository.exchange_points_to_coins(student.id, exchange_amount)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        balance = await StudentRepository.get_balance(student.id)
        new_points = balance["points"]
        new_coins = balance["coins"]

        await callback.message.edit_text(
            "‚úÖ –£—Å–ø–µ—à–Ω–æ!\n"
            f"–°–ø–∏—Å–∞–Ω–æ: {exchange_amount} –±–∞–ª–ª–æ–≤\n"
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {exchange_amount} –º–æ–Ω–µ—Ç\n"
            f"üíº –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_points} –±–∞–ª–ª–æ–≤ | {new_coins} –º–æ–Ω–µ—Ç",
            reply_markup=get_back_to_shop_kb()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!",
            reply_markup=get_back_to_shop_kb()
        )

@router.callback_query(ShopStates.main, F.data == "bonus_catalog")
async def show_bonus_catalog(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –±–æ–Ω—É—Å–æ–≤"""
    await log("show_bonus_catalog", "student", state)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    balance = await StudentRepository.get_balance(student.id)
    coins = balance["coins"]

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
    shop_items = await ShopItemRepository.get_all_active()

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    bonus_tests = await BonusTestRepository.get_all()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏ –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    all_items = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–∫—Ä–æ–º–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ "–ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç")
    for item in shop_items:
        if item.item_type != "bonus_test":
            all_items.append({
                'type': 'shop_item',
                'id': item.id,
                'name': item.name,
                'price': item.price,
                'item_type': item.item_type
            })

    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã
    for test in bonus_tests:
        question_count = len(test.questions) if test.questions else 0
        all_items.append({
            'type': 'bonus_test',
            'id': test.id,
            'name': f"{test.name} ({question_count} –≤–æ–ø—Ä.)",
            'price': test.price,
            'item_type': 'bonus_test'
        })

    if not all_items:
        await callback.message.edit_text(
            "üõí –ö–∞—Ç–∞–ª–æ–≥ –±–æ–Ω—É—Å–æ–≤\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=get_back_to_shop_kb()
        )
    else:
        await callback.message.edit_text(
            f"üõí –ö–∞—Ç–∞–ª–æ–≥ –±–æ–Ω—É—Å–æ–≤\n"
            f"üí∞ –£ —Ç–µ–±—è: {coins} –º–æ–Ω–µ—Ç\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=await get_bonus_catalog_kb(all_items, coins)
        )
    await state.set_state(ShopStates.catalog)

@router.callback_query(ShopStates.main, F.data == "my_bonuses")
async def show_my_bonuses(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –±–æ–Ω—É—Å—ã"""
    await log("show_my_bonuses", "student", state)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    purchases = await StudentPurchaseRepository.get_student_purchases(student.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    bonus_test_purchases = await StudentBonusTestRepository.get_student_bonus_tests(student.id)

    if not purchases and not bonus_test_purchases:
        await callback.message.edit_text(
            "üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.",
            reply_markup=get_back_to_shop_kb()
        )
    else:
        await callback.message.edit_text(
            "üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\n"
            "–í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
            reply_markup=await get_my_bonuses_kb(purchases, bonus_test_purchases)
        )
    await state.set_state(ShopStates.my_bonuses)

@router.callback_query(ShopStates.catalog, F.data.startswith("buy_item_"))
async def process_shop_item_purchase(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫—É–ø–∫—É –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"""
    await log("process_shop_item_purchase", "student", state)

    item_id = int(callback.data.replace("buy_item_", ""))

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    item = await ShopItemRepository.get_by_id(item_id)
    if not item or not item.is_active:
        await callback.message.edit_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = await StudentRepository.get_balance(student.id)
    if balance["coins"] < item.price:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n"
            f"–ù—É–∂–Ω–æ: {item.price} –º–æ–Ω–µ—Ç\n"
            f"–£ —Ç–µ–±—è: {balance['coins']} –º–æ–Ω–µ—Ç",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    success = await StudentRepository.spend_coins(student.id, item.price)
    if success:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
        await StudentPurchaseRepository.create_purchase(student.id, item.id, item.price)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = await StudentRepository.get_balance(student.id)

        await callback.message.edit_text(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n"
            f"–ö—É–ø–ª–µ–Ω–æ: {item.name}\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {item.price} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {new_balance['coins']}",
            reply_markup=get_back_to_shop_kb()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_shop_kb()
        )

@router.callback_query(ShopStates.catalog, F.data.startswith("buy_bonus_"))
async def process_bonus_test_purchase(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫—É–ø–∫—É –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    await log("process_bonus_test_purchase", "student", state)

    test_id = int(callback.data.replace("buy_bonus_", ""))

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç
    bonus_test = await BonusTestRepository.get_by_id(test_id)
    if not bonus_test:
        await callback.message.edit_text(
            "‚ùå –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = await StudentRepository.get_balance(student.id)
    if balance["coins"] < bonus_test.price:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n"
            f"–ù—É–∂–Ω–æ: {bonus_test.price} –º–æ–Ω–µ—Ç\n"
            f"–£ —Ç–µ–±—è: {balance['coins']} –º–æ–Ω–µ—Ç",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
    already_purchased = await StudentBonusTestRepository.has_purchased_test(student.id, bonus_test.id)
    if already_purchased:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª —ç—Ç–æ—Ç –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç!\n"
            f"–ü—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –±–æ–Ω—É—Å—ã'.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    success = await StudentRepository.spend_coins(student.id, bonus_test.price)
    if success:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        await StudentBonusTestRepository.create_purchase(student.id, bonus_test.id, bonus_test.price)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = await StudentRepository.get_balance(student.id)

        question_count = len(bonus_test.questions) if bonus_test.questions else 0

        await callback.message.edit_text(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n"
            f"–ö—É–ø–ª–µ–Ω–æ: {bonus_test.name}\n"
            f"–í–æ–ø—Ä–æ—Å–æ–≤: {question_count}\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {bonus_test.price} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {new_balance['coins']}\n\n"
            f"üéØ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±–æ–Ω—É—Å—ã'",
            reply_markup=get_back_to_shop_kb()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_shop_kb()
        )

@router.callback_query(F.data.startswith("no_coins_"))
async def handle_insufficient_coins(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –º–æ–Ω–µ—Ç"""
    await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)

@router.callback_query(F.data == "no_points")
async def handle_no_points(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–∞–ª–ª–æ–≤"""
    await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!", show_alert=True)

@router.callback_query(F.data.startswith("use_bonus_"))
async def use_bonus_item(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ)"""
    await log("use_bonus_item", "student", state)

    purchase_id = int(callback.data.replace("use_bonus_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫—É
    purchase = await StudentPurchaseRepository.get_purchase_by_id(purchase_id)
    if not purchase:
        await callback.message.edit_text(
            "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student or purchase.student_id != student.id:
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–æ–∫—É–ø–∫–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if purchase.item.item_type == "pdf":
        content = f"üìò {purchase.item.name}\n\n"
        content += f"üìù {purchase.item.description}\n\n"
        content += "üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ PDF:\n"
        content += "‚Ä¢ –†–∞–∑–±–æ—Ä —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫\n"
        content += "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n"
        content += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ\n"
        content += "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
        content += "üí° –ò–∑—É—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏!"

    elif purchase.item.item_type == "money":
        content = f"üí∞ {purchase.item.name}\n\n"
        content += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –¥–µ–Ω–µ–∂–Ω—ã–π –ø—Ä–∏–∑!\n\n"
        content += f"üíµ –°—É–º–º–∞: 5000 —Ç–µ–Ω–≥–µ\n"
        content += f"üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        content += f"üì± Telegram: @admin\n\n"
        content += f"‚úÖ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: BONUS{purchase.id}"

    elif purchase.item.item_type == "other":
        content = f"üéÅ {purchase.item.name}\n\n"
        content += f"üë®‚Äçüè´ {purchase.item.description}\n\n"
        content += f"üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:\n"
        content += f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        content += f"‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞—Ä–∞–Ω–µ–µ\n"
        content += f"‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–Ω–ª–∞–π–Ω\n\n"
        content += f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º: @teacher\n"
        content += f"üé´ –í–∞—à –∫–æ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: CONS{purchase.id}"

    else:
        content = f"üéÅ {purchase.item.name}\n\n{purchase.item.description}"

    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await StudentPurchaseRepository.mark_as_used(purchase.id)

    await callback.message.edit_text(
        content,
        reply_markup=get_back_to_shop_kb()
    )

@router.callback_query(F.data.startswith("use_bonus_test_"))
async def use_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)"""
    await log("use_bonus_test", "student", state)

    purchase_id = int(callback.data.replace("use_bonus_test_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫—É –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    purchase = await StudentBonusTestRepository.get_purchase_by_id(purchase_id)
    if not purchase:
        await callback.message.edit_text(
            "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student or purchase.student_id != student.id:
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–æ–∫—É–ø–∫–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ (–ø–æ–∑–∂–µ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞)
    question_count = len(purchase.bonus_test.questions) if purchase.bonus_test.questions else 0

    await callback.message.edit_text(
        f"üß™ {purchase.bonus_test.name}\n\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {question_count}\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: 30 —Å–µ–∫—É–Ω–¥\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {purchase.price_paid} –º–æ–Ω–µ—Ç\n\n"
        f"üöß –ó–∞–ø—É—Å–∫ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ.\n"
        f"–ü–æ–∫–∞ —á—Ç–æ —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
        reply_markup=get_back_to_shop_kb()
    )

@router.callback_query(F.data == "back_to_shop")
async def back_to_shop(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    await show_shop_menu(callback, state)