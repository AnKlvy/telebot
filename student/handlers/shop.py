from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from common.utils import check_if_id_in_callback_data
from ..keyboards.shop import get_shop_menu_kb, get_exchange_points_kb, get_back_to_shop_kb, get_bonus_catalog_kb, get_my_bonuses_kb, get_purchase_confirmation_kb, get_item_purchase_confirmation_kb
from database import StudentRepository, ShopItemRepository, StudentPurchaseRepository, BonusTestRepository, StudentBonusTestRepository, BonusQuestionRepository, BonusAnswerOptionRepository
from common.navigation import log
from common.quiz_registrator import register_quiz_handlers, send_next_question, cleanup_test_messages
import logging
import asyncio

class ShopStates(StatesGroup):
    main = State()
    exchange = State()
    catalog = State()
    my_bonuses = State()
    purchase_confirmation = State()  # –î–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    item_purchase_confirmation = State()  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π)
    bonus_test_confirmation = State()
    bonus_test_in_progress = State()

router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ quiz –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
register_quiz_handlers(
    router=router,
    test_state=ShopStates.bonus_test_in_progress,
    poll_answer_handler=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    timeout_handler=None,      # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    finish_handler=None        # –ë—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ send_next_question
)

@router.callback_query(F.data == "shop")
async def show_shop_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    await log("show_shop_menu", "student", state)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ telegram_id
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
    balance = await StudentRepository.get_balance(student.id)
    points = balance["points"]
    coins = balance["coins"]

    await callback.message.edit_text(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –º–æ–Ω–µ—Ç—ã –∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ –±–æ–Ω—É—Å—ã.\n"
        "üí∞ –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å:\n"
        f"–ë–∞–ª–ª—ã: {points}\n"
        f"–ú–æ–Ω–µ—Ç—ã: {coins}",
        reply_markup=get_shop_menu_kb()
    )
    await state.set_state(ShopStates.main)

@router.callback_query(ShopStates.main, F.data == "exchange_points")
async def show_exchange_options(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—ã"""
    await log("show_exchange_options", "student", state)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    balance = await StudentRepository.get_balance(student.id)
    points = balance["points"]

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –º–æ–Ω–µ—Ç—ã:\n"
        f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤: {points}",
        reply_markup=await get_exchange_points_kb(points)
    )
    await state.set_state(ShopStates.exchange)

@router.callback_query(ShopStates.exchange, F.data.startswith("exchange_"))
async def process_exchange(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—ã"""
    await log("process_exchange", "student", state)

    exchange_amount = int(callback.data.replace("exchange_", ""))

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
    success = await StudentRepository.exchange_points_to_coins(student.id, exchange_amount)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        balance = await StudentRepository.get_balance(student.id)
        new_points = balance["points"]
        new_coins = balance["coins"]

        await callback.message.edit_text(
            "‚úÖ –£—Å–ø–µ—à–Ω–æ!\n"
            f"–°–ø–∏—Å–∞–Ω–æ: {exchange_amount} –±–∞–ª–ª–æ–≤\n"
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {exchange_amount} –º–æ–Ω–µ—Ç\n"
            f"üíº –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_points} –±–∞–ª–ª–æ–≤ | {new_coins} –º–æ–Ω–µ—Ç",
            reply_markup=get_back_to_shop_kb()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!",
            reply_markup=get_back_to_shop_kb()
        )

@router.callback_query(ShopStates.main, F.data == "bonus_catalog")
async def show_bonus_catalog(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –±–æ–Ω—É—Å–æ–≤"""
    await log("show_bonus_catalog", "student", state)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    balance = await StudentRepository.get_balance(student.id)
    coins = balance["coins"]

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
    shop_items = await ShopItemRepository.get_all_active()

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    bonus_tests = await BonusTestRepository.get_all()

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: {len(shop_items)}")
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(bonus_tests)}")

    for item in shop_items:
        logging.info(f"–¢–æ–≤–∞—Ä: {item.name}, —Ç–∏–ø: {item.item_type}, –∞–∫—Ç–∏–≤–µ–Ω: {item.is_active}")

    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
    purchased_items = await StudentPurchaseRepository.get_student_purchases(student.id)
    purchased_item_ids = {purchase.item_id for purchase in purchased_items}

    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
    purchased_bonus_tests = await StudentBonusTestRepository.get_student_bonus_tests(student.id)
    purchased_bonus_test_ids = {purchase.bonus_test_id for purchase in purchased_bonus_tests}

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏ –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    all_items = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–∫—Ä–æ–º–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ "–ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç" –∏ —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö)
    for item in shop_items:
        if item.item_type != "bonus_test" and item.id not in purchased_item_ids:
            all_items.append({
                'type': 'shop_item',
                'id': item.id,
                'name': item.name,
                'price': item.price,
                'item_type': item.item_type
            })
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥: {item.name}")

    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ)
    for test in bonus_tests:
        if test.id not in purchased_bonus_test_ids:
            question_count = len(test.questions) if test.questions else 0
            all_items.append({
                'type': 'bonus_test',
                'id': test.id,
                'name': f"{test.name} ({question_count} –≤–æ–ø—Ä.)",
                'price': test.price,
                'item_type': 'bonus_test'
            })
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥: {test.name}")

    logging.info(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {len(all_items)}")

    if not all_items:
        await callback.message.edit_text(
            "üõí –ö–∞—Ç–∞–ª–æ–≥ –±–æ–Ω—É—Å–æ–≤\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=get_back_to_shop_kb()
        )
    else:
        await callback.message.edit_text(
            f"üõí –ö–∞—Ç–∞–ª–æ–≥ –±–æ–Ω—É—Å–æ–≤\n"
            f"üí∞ –£ —Ç–µ–±—è: {coins} –º–æ–Ω–µ—Ç\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=await get_bonus_catalog_kb(all_items, coins)
        )
    await state.set_state(ShopStates.catalog)

@router.callback_query(ShopStates.main, F.data == "my_bonuses")
async def show_my_bonuses(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –±–æ–Ω—É—Å—ã"""
    await log("show_my_bonuses", "student", state)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    purchases = await StudentPurchaseRepository.get_student_purchases(student.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    bonus_test_purchases = await StudentBonusTestRepository.get_student_bonus_tests(student.id)

    if not purchases and not bonus_test_purchases:
        await callback.message.edit_text(
            "üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.",
            reply_markup=get_back_to_shop_kb()
        )
    else:
        await callback.message.edit_text(
            "üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\n"
            "–í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
            reply_markup=await get_my_bonuses_kb(purchases, bonus_test_purchases)
        )
    await state.set_state(ShopStates.my_bonuses)

@router.callback_query(ShopStates.catalog, F.data.startswith("buy_item_"))
async def show_item_purchase_confirmation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è)"""
    await log("show_item_purchase_confirmation", "student", state)

    item_id = int(callback.data.replace("buy_item_", ""))

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    item = await ShopItemRepository.get_by_id(item_id)
    if not item or not item.is_active:
        await callback.message.edit_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = await StudentRepository.get_balance(student.id)
    if balance["coins"] < item.price:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n"
            f"–ù—É–∂–Ω–æ: {item.price} –º–æ–Ω–µ—Ç\n"
            f"–£ —Ç–µ–±—è: {balance['coins']} –º–æ–Ω–µ—Ç",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
    existing_purchase = await StudentPurchaseRepository.has_purchased_item(student.id, item.id)
    if existing_purchase:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª —ç—Ç–æ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n"
            f"–ü—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –±–æ–Ω—É—Å—ã'.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    await callback.message.edit_text(
        f"üí≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n\n"
        f"üéÅ {item.name}\n"
        f"üìù {item.description[:100]}{'...' if len(item.description or '') > 100 else ''}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item.price} –º–æ–Ω–µ—Ç\n\n"
        f"üíº –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance['coins']} –º–æ–Ω–µ—Ç\n"
        f"üí∏ –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è: {balance['coins'] - item.price} –º–æ–Ω–µ—Ç\n\n"
        f"‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?",
        reply_markup=get_item_purchase_confirmation_kb(item_id)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(
        item_to_purchase_id=item_id,
        item_to_purchase_name=item.name,
        item_to_purchase_price=item.price
    )
    await state.set_state(ShopStates.item_purchase_confirmation)

@router.callback_query(ShopStates.item_purchase_confirmation, F.data.startswith("confirm_purchase_item_"))
async def confirm_item_purchase(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è)"""
    await log("confirm_item_purchase", "student", state)

    item_id = int(callback.data.replace("confirm_purchase_item_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    stored_item_id = data.get("item_to_purchase_id")
    item_name = data.get("item_to_purchase_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
    item_price = data.get("item_to_purchase_price", 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID
    if stored_item_id != item_id:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    item = await ShopItemRepository.get_by_id(item_id)
    if not item or not item.is_active:
        await callback.message.edit_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    balance = await StudentRepository.get_balance(student.id)
    if balance["coins"] < item.price:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n"
            f"–ù—É–∂–Ω–æ: {item.price} –º–æ–Ω–µ—Ç\n"
            f"–£ —Ç–µ–±—è: {balance['coins']} –º–æ–Ω–µ—Ç",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
    existing_purchase = await StudentPurchaseRepository.has_purchased_item(student.id, item.id)
    if existing_purchase:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª —ç—Ç–æ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n"
            f"–ü—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –±–æ–Ω—É—Å—ã'.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    success = await StudentRepository.spend_coins(student.id, item.price)
    if success:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
        await StudentPurchaseRepository.create_purchase(student.id, item.id, item.price)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = await StudentRepository.get_balance(student.id)

        await callback.message.edit_text(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n"
            f"–ö—É–ø–ª–µ–Ω–æ: {item.name}\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {item.price} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {new_balance['coins']}\n\n"
            f"üéØ –ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±–æ–Ω—É—Å—ã'",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="bonus_catalog")],
                [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –±–æ–Ω—É—Å—ã", callback_data="my_bonuses")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_shop_kb()
        )

@router.callback_query(ShopStates.catalog, F.data.startswith("buy_bonus_"))
async def show_bonus_test_purchase_confirmation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    await log("show_bonus_test_purchase_confirmation", "student", state)

    test_id = int(callback.data.replace("buy_bonus_", ""))

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç
    bonus_test = await BonusTestRepository.get_by_id(test_id)
    if not bonus_test:
        await callback.message.edit_text(
            "‚ùå –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = await StudentRepository.get_balance(student.id)
    if balance["coins"] < bonus_test.price:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n"
            f"–ù—É–∂–Ω–æ: {bonus_test.price} –º–æ–Ω–µ—Ç\n"
            f"–£ —Ç–µ–±—è: {balance['coins']} –º–æ–Ω–µ—Ç",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
    already_purchased = await StudentBonusTestRepository.has_purchased_test(student.id, bonus_test.id)
    if already_purchased:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª —ç—Ç–æ—Ç –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç!\n"
            f"–ü—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –±–æ–Ω—É—Å—ã'.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    question_count = len(bonus_test.questions) if bonus_test.questions else 0

    await callback.message.edit_text(
        f"üí≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n\n"
        f"üß™ {bonus_test.name}\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {question_count}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {bonus_test.price} –º–æ–Ω–µ—Ç\n\n"
        f"üíº –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance['coins']} –º–æ–Ω–µ—Ç\n"
        f"üí∏ –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è: {balance['coins'] - bonus_test.price} –º–æ–Ω–µ—Ç\n\n"
        f"‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?",
        reply_markup=get_purchase_confirmation_kb(test_id)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(
        test_to_purchase_id=test_id,
        test_to_purchase_name=bonus_test.name,
        test_to_purchase_price=bonus_test.price
    )
    await state.set_state(ShopStates.purchase_confirmation)

@router.callback_query(ShopStates.purchase_confirmation, F.data.startswith("confirm_purchase_bonus_"))
async def confirm_bonus_test_purchase(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    await log("confirm_bonus_test_purchase", "student", state)

    test_id = int(callback.data.replace("confirm_purchase_bonus_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    stored_test_id = data.get("test_to_purchase_id")
    test_name = data.get("test_to_purchase_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç")
    test_price = data.get("test_to_purchase_price", 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID
    if stored_test_id != test_id:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç
    bonus_test = await BonusTestRepository.get_by_id(test_id)
    if not bonus_test:
        await callback.message.edit_text(
            "‚ùå –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    balance = await StudentRepository.get_balance(student.id)
    if balance["coins"] < bonus_test.price:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n"
            f"–ù—É–∂–Ω–æ: {bonus_test.price} –º–æ–Ω–µ—Ç\n"
            f"–£ —Ç–µ–±—è: {balance['coins']} –º–æ–Ω–µ—Ç",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
    already_purchased = await StudentBonusTestRepository.has_purchased_test(student.id, bonus_test.id)
    if already_purchased:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª —ç—Ç–æ—Ç –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç!\n"
            f"–ü—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –±–æ–Ω—É—Å—ã'.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    success = await StudentRepository.spend_coins(student.id, bonus_test.price)
    if success:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        await StudentBonusTestRepository.create_purchase(student.id, bonus_test.id, bonus_test.price)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = await StudentRepository.get_balance(student.id)

        question_count = len(bonus_test.questions) if bonus_test.questions else 0

        await callback.message.edit_text(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n"
            f"–ö—É–ø–ª–µ–Ω–æ: {bonus_test.name}\n"
            f"–í–æ–ø—Ä–æ—Å–æ–≤: {question_count}\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {bonus_test.price} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {new_balance['coins']}\n\n"
            f"üéØ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±–æ–Ω—É—Å—ã'",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="bonus_catalog")],
                [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –±–æ–Ω—É—Å—ã", callback_data="my_bonuses")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_shop_kb()
        )

@router.callback_query(ShopStates.purchase_confirmation, F.data == "cancel_purchase")
async def cancel_bonus_test_purchase(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    await log("cancel_bonus_test_purchase", "student", state)

    await callback.message.edit_text(
        "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_back_to_shop_kb()
    )
    await state.set_state(ShopStates.main)

@router.callback_query(ShopStates.item_purchase_confirmation, F.data == "cancel_purchase")
async def cancel_item_purchase(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await log("cancel_item_purchase", "student", state)

    await callback.message.edit_text(
        "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_back_to_shop_kb()
    )
    await state.set_state(ShopStates.main)

@router.callback_query(F.data.startswith("no_coins_"))
async def handle_insufficient_coins(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –º–æ–Ω–µ—Ç"""
    await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)

@router.callback_query(F.data == "no_points")
async def handle_no_points(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–∞–ª–ª–æ–≤"""
    await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!", show_alert=True)

@router.callback_query(F.data.startswith("use_bonus_") & ~F.data.startswith("use_bonus_test_"))
async def use_bonus_item(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ)"""
    await log("use_bonus_item", "student", state)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç
    if callback.data.startswith("use_bonus_test_"):
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    try:
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ callback_data
        purchase_id = int(callback.data.replace("use_bonus_", ""))
    except (ValueError, TypeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: '{callback.data}', –æ—à–∏–±–∫–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–∫—É–ø–∫–∏.\nCallback data: {callback.data}",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫—É
    purchase = await StudentPurchaseRepository.get_purchase_by_id(purchase_id)
    if not purchase:
        await callback.message.edit_text(
            "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student or purchase.student_id != student.id:
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–æ–∫—É–ø–∫–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    content = f"üéÅ {purchase.item.name}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if purchase.item.description:
        content += f"üìù {purchase.item.description}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if purchase.item.content:
        content += f"{purchase.item.content}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if purchase.item.file_path:
        content += f"üìé –§–∞–π–ª: {purchase.item.file_path}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if purchase.item.contact_info:
        content += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n{purchase.item.contact_info}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if purchase.item.item_type in ["money", "other"]:
        content += f"üé´ –í–∞—à –∫–æ–¥: {purchase.item.item_type.upper()}{purchase.id}"

    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await StudentPurchaseRepository.mark_as_used(purchase.id)

    await callback.message.edit_text(
        content,
        reply_markup=get_back_to_shop_kb()
    )

@router.callback_query(F.data.startswith("use_bonus_test_"))
async def use_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç"""
    await log("use_bonus_test", "student", state)

    try:
        purchase_id = int(callback.data.replace("use_bonus_test_", ""))
    except (ValueError, TypeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: '{callback.data}', –æ—à–∏–±–∫–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–∫—É–ø–∫–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.\nCallback data: {callback.data}",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫—É –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    purchase = await StudentBonusTestRepository.get_purchase_by_id(purchase_id)
    if not purchase:
        await callback.message.edit_text(
            "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student or purchase.student_id != student.id:
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–æ–∫—É–ø–∫–∞.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
    bonus_test = purchase.bonus_test
    questions = await BonusQuestionRepository().get_by_bonus_test(bonus_test.id)

    if not questions:
        await callback.message.edit_text(
            f"‚ùå –í —Ç–µ—Å—Ç–µ '{bonus_test.name}' –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=get_back_to_shop_kb()
        )
        return

    question_count = len(questions)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"start_bonus_test_{purchase_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –±–æ–Ω—É—Å–∞–º", callback_data="my_bonuses")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    time_limits = [q.time_limit for q in questions]
    min_time = min(time_limits)
    max_time = max(time_limits)

    if min_time == max_time:
        time_info = f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {min_time} —Å–µ–∫—É–Ω–¥"
    else:
        time_info = f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {min_time}-{max_time} —Å–µ–∫—É–Ω–¥"

    await callback.message.edit_text(
        f"üß™ {bonus_test.name}\n\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {question_count}\n"
        f"{time_info}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {purchase.price_paid} –º–æ–Ω–µ—Ç\n\n"
        f"üéØ –≠—Ç–æ –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Ä–∞–∑!",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
    await state.update_data(
        bonus_test_purchase_id=purchase_id,
        bonus_test_id=bonus_test.id,
        bonus_test_name=bonus_test.name
    )
    await state.set_state(ShopStates.bonus_test_confirmation)

@router.callback_query(ShopStates.bonus_test_confirmation, F.data.startswith("start_bonus_test_"))
async def start_bonus_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    await log("start_bonus_test", "student", state)

    purchase_id = int(callback.data.replace("start_bonus_test_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    bonus_test_id = data.get("bonus_test_id")

    if not bonus_test_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
    questions = await BonusQuestionRepository().get_by_bonus_test(bonus_test_id)

    if not questions:
        await callback.answer("‚ùå –í —Ç–µ—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    test_data = {
        'student_id': student.id,
        'user_id': callback.from_user.id,
        'bonus_test_id': bonus_test_id,  # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        'score': 0,
        'q_index': 0,
        'total_questions': len(questions),
        'question_results': [],
        'messages_to_delete': [],  # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        'questions': [{
            'id': q.id,
            'text': q.text,
            'photo_path': q.photo_path,
            'time_limit': q.time_limit,
            'microtopic_number': None  # –£ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç –º–∏–∫—Ä–æ—Ç–µ–º
        } for q in questions]
    }

    await state.update_data(**test_data)
    await state.set_state(ShopStates.bonus_test_in_progress)
    await callback.answer()
    await send_next_question(callback.message.chat.id, state, callback.bot, finish_bonus_test)


async def finish_bonus_test(chat_id, state: FSMContext, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)"""
    await log("finish_bonus_test", "student", state)

    data = await state.get_data()
    score = data.get("score", 0)
    total_questions = data.get("total_questions", 0)
    bonus_test_name = data.get("bonus_test_name", "–ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    percentage = round((score / total_questions) * 100, 1) if total_questions > 0 else 0

    if score == total_questions:
        result_emoji = "üéâ"
        result_text = "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!"
    elif percentage >= 80:
        result_emoji = "üëè"
        result_text = "–•–æ—Ä–æ—à–æ! –ü–æ—á—Ç–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
    elif percentage >= 60:
        result_emoji = "üëç"
        result_text = "–ù–µ–ø–ª–æ—Ö–æ! –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å"
    else:
        result_emoji = "üìö"
        result_text = "–°—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"

    message = (
        f"{result_emoji} –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üß™ {bonus_test_name}\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total_questions} ({percentage}%)\n"
        f"{result_text}\n\n"
        f"üí° –ú–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è!"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data=f"use_bonus_test_{data.get('bonus_test_purchase_id')}")],
        [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –±–æ–Ω—É—Å—ã", callback_data="my_bonuses")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    await bot.send_message(chat_id, message, reply_markup=keyboard)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    await asyncio.sleep(1)
    await cleanup_test_messages(chat_id, data, bot)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    await state.set_state(ShopStates.my_bonuses)


@router.callback_query(ShopStates.purchase_confirmation, F.data == "bonus_catalog")
async def back_to_catalog_from_confirmation(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    await show_bonus_catalog(callback, state)

@router.callback_query(ShopStates.item_purchase_confirmation, F.data == "bonus_catalog")
async def back_to_catalog_from_item_confirmation(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    await show_bonus_catalog(callback, state)

@router.callback_query(F.data == "my_bonuses")
async def handle_my_bonuses_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –±–æ–Ω—É—Å—ã'"""
    await show_my_bonuses(callback, state)


@router.callback_query(F.data == "back_to_shop")
async def back_to_shop(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    await show_shop_menu(callback, state)

@router.callback_query(F.data == "bonus_catalog")
async def back_to_catalog_universal(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É"""
    await show_bonus_catalog(callback, state)