from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from ..keyboards.curator_contact import get_curator_subjects_kb, get_back_to_curator_kb
from database import StudentRepository, CuratorRepository, SubjectRepository
from common.navigation import log

router = Router()

class CuratorStates(StatesGroup):
    main = State()
    curator_info = State()

@router.callback_query(F.data == "curator")
async def show_curator_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º"""
    await log("show_curator_menu", "student", state)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ telegram_id
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_to_curator_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—ã
    subjects_with_curators = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    for group in student.groups:
        if group.subject:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä–∞—Ç–æ—Ä—ã –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            curators = await CuratorRepository.get_curators_for_student_subject(student.id, group.subject.id)
            if curators and group.subject not in subjects_with_curators:
                subjects_with_curators.append(group.subject)

    if not subjects_with_curators:
        await callback.message.edit_text(
            "‚ùå –ü–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –∫—É—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_to_curator_kb()
        )
        return

    await callback.message.edit_text(
        "üìû –°–≤—è–∑—å —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º\n\n"
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç ‚Äî —è –ø–æ–∫–∞–∂—É, –∫—Ç–æ —Ç–≤–æ–π –∫—É—Ä–∞—Ç–æ—Ä –∏ –∫–∞–∫ —Å –Ω–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è:",
        reply_markup=await get_curator_subjects_kb(subjects_with_curators)
    )
    await state.set_state(CuratorStates.main)

@router.callback_query(CuratorStates.main, F.data.startswith("curator_"))
async def show_curator_info(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä–∞—Ç–æ—Ä–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É"""
    await log("show_curator_info", "student", state)

    subject_id = int(callback.data.replace("curator_", ""))

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_curator_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    subject = await SubjectRepository.get_by_id(subject_id)
    if not subject:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_curator_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
    curators = await CuratorRepository.get_curators_for_student_subject(student.id, subject_id)

    if not curators:
        await callback.message.edit_text(
            f"‚ùå –ö—É—Ä–∞—Ç–æ—Ä—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject.name} –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_to_curator_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    student_groups_for_subject = [group for group in student.groups if group.subject_id == subject_id]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä–∞—Ç–æ—Ä–∞—Ö
    if len(curators) == 1:
        curator = curators[0]

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞
        telegram_info = f"tg://user?id={curator.user.telegram_id}" if curator.user else "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –∫—É—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –≥—Ä—É–ø–ø–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        curator_groups_for_student = []
        curator_group_ids = [g.id for g in curator.groups]
        for group in student_groups_for_subject:
            if group.id in curator_group_ids:
                curator_groups_for_student.append(group)

        groups_text = ", ".join([group.name for group in curator_groups_for_student]) if curator_groups_for_student else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        message_text = (
            f"üìû –ö—É—Ä–∞—Ç–æ—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject.name}:\n\n"
            f"üë§ {curator.user.name}\n"
            f"üìö –ì—Ä—É–ø–ø–∞: {groups_text}\n"
            f"üì© –ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É: [–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç]({telegram_info})"
        )
    else:
        message_text = f"üìû –ö—É—Ä–∞—Ç–æ—Ä—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject.name}:\n\n"
        for i, curator in enumerate(curators, 1):
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram —á–∞—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞
            telegram_info = f"tg://user?id={curator.user.telegram_id}" if curator.user else "–ù–µ —É–∫–∞–∑–∞–Ω"

            # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –∫—É—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –≥—Ä—É–ø–ø–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
            curator_groups_for_student = []
            curator_group_ids = [g.id for g in curator.groups]
            for group in student_groups_for_subject:
                if group.id in curator_group_ids:
                    curator_groups_for_student.append(group)

            groups_text = ", ".join([group.name for group in curator_groups_for_student]) if curator_groups_for_student else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            message_text += (
                f"{i}. üë§ {curator.user.name}\n"
                f"   üìö –ì—Ä—É–ø–ø–∞: {groups_text}\n"
                f"   üì© –ù–∞–ø–∏—Å–∞—Ç—å: [–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç]({telegram_info})\n\n"
            )

    await callback.message.edit_text(
        message_text,
        reply_markup=get_back_to_curator_kb(),
        parse_mode="Markdown"
    )
    await state.set_state(CuratorStates.curator_info)