from aiogram import Router, F, Bot
from aiogram.types import Poll, PollAnswer, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta
import logging
import asyncio
import uuid
from typing import Dict, Set

from common.keyboards import get_main_menu_back_button
from common.utils import check_if_id_in_callback_data
from database import (
    HomeworkRepository, QuestionRepository, AnswerOptionRepository,
    HomeworkResultRepository, QuestionResultRepository, StudentRepository
)
from common.navigation import log
from student.handlers.homework import HomeworkStates

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {question_uuid: {"chat_id": int, "state": FSMContext, "bot": Bot, "answered": bool}}
active_questions: Dict[str, Dict] = {}

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
completed_questions: Set[str] = set()

router = Router()


async def handle_test_back_navigation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è test_in_progress"""
    current_state = await state.get_state()
    logging.info(f"üîÑ –§–£–ù–ö–¶–ò–Ø: handle_test_back_navigation | –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï: {current_state}")

    await log("handle_test_back_navigation", "student", state)

    # –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –æ—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    logging.info(f"üîÑ –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    homework_id = data.get("homework_id")

    logging.info(f"üìä –î–ê–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø: homework_id={homework_id}, –∫–ª—é—á–∏={list(data.keys())}")

    if not homework_id:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
        logging.info("‚ùå –ù–µ—Ç homework_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ choose_homework")
        from student.handlers.homework import choose_homework
        await choose_homework(callback, state)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏
    homework = await HomeworkRepository.get_by_id(homework_id)
    if not homework:
        logging.error(f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å ID {homework_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await callback.answer("‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    questions = await QuestionRepository.get_by_homework(homework_id)
    if not questions:
        await callback.answer("‚ùå –í —ç—Ç–æ–º –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        return

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    avg_time = sum(q.time_limit for q in questions) // len(questions)

    text = (
        f"üîé –£—Ä–æ–∫: {homework.lesson.name}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {homework.subject.name}\n"
        f"üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {homework.name}\n"
        f"üìã –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
        f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {avg_time} —Å–µ–∫—É–Ω–¥\n"
        f"  ‚ö†Ô∏è –ë–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞ 100% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–¢—ã –≥–æ—Ç–æ–≤?"
    )

    confirmation_message = await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_quiz")],
            *get_main_menu_back_button()
        ]
    ))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(
        homework_id=homework_id,
        confirmation_message_id=confirmation_message.message_id
    )
    await state.set_state(HomeworkStates.confirmation)


@router.callback_query(HomeworkStates.repeat_test, F.data.startswith("homework_"))
async def repeat_homework_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await log("repeat_homework_test", "student", state)
    logging.info(f"üîÑ –ü–û–í–¢–û–†–ù–û–ï –ü–†–û–•–û–ñ–î–ï–ù–ò–ï: callback_data: {callback.data}")

    data = await state.get_data()
    last_homework_id = data.get("last_homework_id")

    if last_homework_id:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        homework_id = last_homework_id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        homework = await HomeworkRepository.get_by_id(homework_id)
        if homework:
            await state.update_data(
                course_id=data.get("last_course_id"),
                subject_id=data.get("last_subject_id"),
                lesson_id=data.get("last_lesson_id"),
                homework_id=homework_id
            )
        else:
            await callback.answer("‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
    else:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    logging.info(f"–°—Ç—É–¥–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å ID: {homework_id}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞
    await show_homework_confirmation(callback, state, homework_id)


@router.callback_query(HomeworkStates.homework, F.data.startswith("homework_"))
async def confirm_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await log("confirm_test", "student", state)
    logging.info(f"üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö confirm_test –≤—ã–∑–≤–∞–Ω —Å callback_data: {callback.data}")

    homework_id = int(await check_if_id_in_callback_data("homework_", callback, state, "homework"))
    logging.info(f"–°—Ç—É–¥–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å ID: {homework_id}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞
    await show_homework_confirmation(callback, state, homework_id)


async def show_homework_confirmation(callback: CallbackQuery, state: FSMContext, homework_id: int):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏
    homework = await HomeworkRepository.get_by_id(homework_id)
    if not homework:
        logging.error(f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å ID {homework_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await callback.answer("‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {homework.name} (ID: {homework.id})")

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    questions = await QuestionRepository.get_by_homework(homework_id)

    if not questions:
        await callback.answer("‚ùå –í —ç—Ç–æ–º –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ ID –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π)
    question_ids = [q.id for q in questions]
    await state.update_data(
        homework_id=homework_id,
        question_ids=question_ids
    )

    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: homework_id={homework_id}, question_ids={question_ids}")

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    avg_time = sum(q.time_limit for q in questions) // len(questions)

    text = (
        f"üîé –£—Ä–æ–∫: {homework.lesson.name}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {homework.subject.name}\n"
        f"üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {homework.name}\n"
        f"üìã –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
        f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {avg_time} —Å–µ–∫—É–Ω–¥\n"
        f"  ‚ö†Ô∏è –ë–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞ 100% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–¢—ã –≥–æ—Ç–æ–≤?"
    )

    confirmation_message = await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_quiz")],
            *get_main_menu_back_button()
        ]
    ))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(confirmation_message_id=confirmation_message.message_id)
    await state.set_state(HomeworkStates.confirmation)

@router.callback_query(HomeworkStates.confirmation, F.data == "start_quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await log("start_quiz", "student", state)

    data = await state.get_data()
    homework_id = data.get("homework_id")
    question_ids = data.get("question_ids", [])

    logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: homework_id={homework_id}, question_ids={question_ids}")
    logging.info(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {list(data.keys())}")

    if not homework_id or not question_ids:
        logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: homework_id={homework_id}, question_ids={question_ids}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –±–∞–∑—ã
    homework = await HomeworkRepository.get_by_id(homework_id)
    questions = await QuestionRepository.get_by_homework(homework_id)

    if not homework or not questions:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: homework={homework is not None}, questions={len(questions) if questions else 0}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
    if not student:
        await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ —ç—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    existing_attempts = await HomeworkResultRepository.get_student_homework_attempts(student.id, homework_id)
    is_first_attempt = len(existing_attempts) == 0

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    confirmation_message_id = data.get("confirmation_message_id")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    messages_to_delete = []
    if confirmation_message_id:
        messages_to_delete.append(confirmation_message_id)

    await state.update_data(
        student_id=student.id,
        user_id=callback.from_user.id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–æ—Å–∞
        score=0,
        q_index=0,
        total_questions=len(questions),
        is_first_attempt=is_first_attempt,
        question_results=[],
        start_time=datetime.now().isoformat(),
        messages_to_delete=messages_to_delete,  # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        questions=[{
            'id': q.id,
            'text': q.text,
            'photo_path': q.photo_path,
            'time_limit': q.time_limit,
            'microtopic_number': q.microtopic_number
        } for q in questions],
        homework={
            'id': homework.id,
            'name': homework.name,
            'subject_name': homework.subject.name,
            'lesson_name': homework.lesson.name
        }
    )

    await state.set_state(HomeworkStates.test_in_progress)
    await callback.answer()
    await send_next_question(callback.message.chat.id, state, callback.bot)


async def send_next_question(chat_id, state: FSMContext, bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    index = data.get("q_index", 0)
    questions = data.get("questions", [])

    if index >= len(questions):
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        await finish_test(chat_id, state, bot)
        return

    question_data = questions[index]
    question_id = question_data['id']

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    answer_options = await AnswerOptionRepository.get_by_question(question_id)
    if not answer_options:
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
    answer_options.sort(key=lambda x: x.order_number)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    options = []
    correct_option_id = None

    for i, option in enumerate(answer_options):
        options.append(option.text)
        if option.is_correct:
            correct_option_id = i

    if correct_option_id is None:
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    question_uuid = str(uuid.uuid4())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ (—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ)
    await state.update_data(
        current_question_id=question_id,
        current_question_uuid=question_uuid,
        current_answer_options=[{
            'id': opt.id,
            'text': opt.text,
            'is_correct': opt.is_correct,
            'order_number': opt.order_number
        } for opt in answer_options],
        question_start_time=datetime.now().isoformat(),
        question_answered=False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    active_questions[question_uuid] = {
        "chat_id": chat_id,
        "state": state,
        "bot": bot,
        "answered": False,
        "question_id": question_id,
        "start_time": datetime.now()
    }

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    close_date = int((datetime.now() + timedelta(seconds=question_data['time_limit'])).timestamp())

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_text = question_data['text']
    photo_message = None

    if question_data['photo_path']:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        photo_message = await bot.send_photo(
            chat_id=chat_id,
            photo=question_data['photo_path'],
        )

    poll_message = await bot.send_poll(
        chat_id=chat_id,
        question=f"{question_text}",
        options=options,
        type="quiz",
        correct_option_id=correct_option_id,
        is_anonymous=False,
        close_date=close_date
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])

    if photo_message:
        messages_to_delete.append(photo_message.message_id)
    messages_to_delete.append(poll_message.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ä–æ—Å–æ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    await state.update_data(
        current_poll_message_id=poll_message.message_id,
        messages_to_delete=messages_to_delete
    )

    logging.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å {index + 1}/{len(questions)} | UUID: {question_uuid} | –¢–∞–π–º–µ—Ä: {question_data['time_limit']}—Å")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
    asyncio.create_task(handle_question_timeout_reliable(
        question_uuid, question_data['time_limit']
    ))



@router.poll_answer(HomeworkStates.test_in_progress)
async def handle_poll_answer(poll: PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    await log("handle_poll_answer", "student", state)

    data = await state.get_data()
    index = data.get("q_index", 0)
    questions = data.get("questions", [])
    current_question_id = data.get("current_question_id")
    current_question_uuid = data.get("current_question_uuid")
    current_answer_options = data.get("current_answer_options", [])
    question_start_time_str = data.get("question_start_time")

    if index >= len(questions) or not current_question_id:
        return

    # –û—Ç–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ç—Ä–µ–∫–µ—Ä–µ
    if current_question_uuid and current_question_uuid in active_questions:
        active_questions[current_question_uuid]["answered"] = True
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ UUID: {current_question_uuid}")

    selected_option_index = poll.option_ids[0]
    selected_answer = current_answer_options[selected_option_index] if selected_option_index < len(current_answer_options) else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = selected_answer and selected_answer['is_correct']

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –æ—Ç–≤–µ—Ç
    time_spent = None
    if question_start_time_str:
        question_start_time = datetime.fromisoformat(question_start_time_str)
        time_spent = int((datetime.now() - question_start_time).total_seconds())

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question_data = questions[index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    question_results = data.get("question_results", [])
    question_results.append({
        "question_id": current_question_id,
        "selected_answer_id": selected_answer['id'] if selected_answer else None,
        "is_correct": is_correct,
        "time_spent": time_spent,
        "microtopic_number": current_question_data['microtopic_number']
    })

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞)
    await state.update_data(question_answered=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    score = data.get("score", 0)
    if is_correct:
        score += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        score=score,
        q_index=index + 1,
        question_results=question_results
    )

    logging.info(f"üìä –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {'‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ' if is_correct else '‚ùå –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'} | –í—Ä–µ–º—è: {time_spent}—Å")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(poll.user.id, state, poll.bot)


async def finish_test(chat_id, state: FSMContext, bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    await log("finish_test", "student", state)

    data = await state.get_data()
    homework_id = data.get("homework_id")
    student_id = data.get("student_id")
    score = data.get("score", 0)
    total_questions = data.get("total_questions", 0)
    is_first_attempt = data.get("is_first_attempt", True)
    question_results = data.get("question_results", [])
    homework = data.get("homework")

    if not homework_id or not student_id:
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return

    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã (3 –±–∞–ª–ª–∞ –∑–∞ –≤–æ–ø—Ä–æ—Å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ 100% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞)
        points_earned = 0
        if score == total_questions and is_first_attempt:
            points_earned = total_questions * 3

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        homework_result = await HomeworkResultRepository.create(
            student_id=student_id,
            homework_id=homework_id,
            total_questions=total_questions,
            correct_answers=score,
            points_earned=points_earned,
            is_first_attempt=is_first_attempt
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        for result_data in question_results:
            await QuestionResultRepository.create(
                homework_result_id=homework_result.id,
                question_id=result_data["question_id"],
                selected_answer_id=result_data["selected_answer_id"],
                is_correct=result_data["is_correct"],
                time_spent=result_data["time_spent"],
                microtopic_number=result_data["microtopic_number"]
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        percentage = round((score / total_questions) * 100, 1) if total_questions > 0 else 0

        if score == total_questions:
            result_emoji = "üéâ"
            result_text = "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!"
            if is_first_attempt:
                result_text += f"\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {points_earned}"
            else:
                result_text += "\nüîÑ –≠—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, –±–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è"
        elif percentage >= 80:
            result_emoji = "üëè"
            result_text = "–•–æ—Ä–æ—à–æ! –ü–æ—á—Ç–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
        elif percentage >= 60:
            result_emoji = "üëç"
            result_text = "–ù–µ–ø–ª–æ—Ö–æ! –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å"
        else:
            result_emoji = "üìö"
            result_text = "–°—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"

        message = (
            f"{result_emoji} –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"üìù {homework['name']}\n"
            f"üìö {homework['subject_name']}\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total_questions} ({percentage}%)\n"
            f"{result_text}\n\n"
            f"üí° –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data=f"homework_{homework_id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(
            last_homework_id=homework_id,
            last_course_id=data.get("course_id"),
            last_subject_id=data.get("subject_id"),
            last_lesson_id=data.get("lesson_id")
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.set_state(HomeworkStates.repeat_test)

        await bot.send_message(chat_id, message, reply_markup=keyboard)

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        await asyncio.sleep(1)
        await cleanup_test_messages(chat_id, data, bot)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {e}")
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def handle_question_timeout_reliable(question_uuid: str, timeout_seconds: int):
    """–ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π UUID"""
    try:
        logging.info(f"‚è∞ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ UUID: {question_uuid} –Ω–∞ {timeout_seconds} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(timeout_seconds)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        if question_uuid not in active_questions:
            logging.info(f"üîÑ –í–æ–ø—Ä–æ—Å {question_uuid} —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —Ç–∞–π–º–∞—É—Ç –æ—Ç–º–µ–Ω–µ–Ω")
            return

        question_info = active_questions[question_uuid]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç
        if question_info["answered"]:
            logging.info(f"‚úÖ –ù–∞ –≤–æ–ø—Ä–æ—Å {question_uuid} —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏, —Ç–∞–π–º–∞—É—Ç –æ—Ç–º–µ–Ω–µ–Ω")
            # –û—á–∏—â–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            del active_questions[question_uuid]
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
        state = question_info["state"]
        current_state = await state.get_state()

        if current_state != HomeworkStates.test_in_progress:
            logging.info(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ({current_state}), —Ç–∞–π–º–∞—É—Ç –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è {question_uuid}")
            del active_questions[question_uuid]
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Å–µ –µ—â–µ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        data = await state.get_data()
        current_question_uuid = data.get("current_question_uuid")

        if current_question_uuid != question_uuid:
            logging.info(f"üîÑ –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è ({current_question_uuid}), —Ç–∞–π–º–∞—É—Ç –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è {question_uuid}")
            del active_questions[question_uuid]
            return

        logging.info(f"‚è∞ –¢–ê–ô–ú–ê–£–¢! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_uuid}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        await process_question_timeout_reliable(question_uuid)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è {question_uuid}: {e}")
        # –û—á–∏—â–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if question_uuid in active_questions:
            del active_questions[question_uuid]


async def process_question_timeout_reliable(question_uuid: str):
    """–ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        if question_uuid not in active_questions:
            logging.error(f"‚ùå –í–æ–ø—Ä–æ—Å {question_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            return

        question_info = active_questions[question_uuid]
        chat_id = question_info["chat_id"]
        state = question_info["state"]
        bot = question_info["bot"]

        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        completed_questions.add(question_uuid)

        data = await state.get_data()
        index = data.get("q_index", 0)
        questions = data.get("questions", [])
        current_question_id = data.get("current_question_id")
        question_start_time_str = data.get("question_start_time")

        logging.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: index={index}, question_id={current_question_id}")

        if index >= len(questions) or not current_question_id:
            logging.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è {question_uuid}")
            del active_questions[question_uuid]
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è
        time_spent = None
        if question_start_time_str:
            question_start_time = datetime.fromisoformat(question_start_time_str)
            time_spent = int((datetime.now() - question_start_time).total_seconds())

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_question_data = questions[index]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–∞–π–º–∞—É—Ç)
        question_results = data.get("question_results", [])
        question_results.append({
            "question_id": current_question_id,
            "selected_answer_id": None,
            "is_correct": False,
            "time_spent": time_spent,
            "microtopic_number": current_question_data['microtopic_number']
        })

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        current_answer_options = data.get("current_answer_options", [])
        correct_answer = next((opt for opt in current_answer_options if opt['is_correct']), None)

        if correct_answer:
            timeout_message = await bot.send_message(
                chat_id,
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer['text']}"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            data = await state.get_data()
            messages_to_delete = data.get("messages_to_delete", [])
            messages_to_delete.append(timeout_message.message_id)
            await state.update_data(messages_to_delete=messages_to_delete)

            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.update_data(
            q_index=index + 1,
            question_results=question_results,
            question_answered=False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        )

        logging.info(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É: {index + 1}")

        # –û—á–∏—â–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        del active_questions[question_uuid]

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
        await asyncio.sleep(2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        await send_next_question(chat_id, state, bot)
        logging.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {question_uuid}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_question_timeout_reliable –¥–ª—è {question_uuid}: {e}")
        import traceback
        logging.error(f"üìã Traceback: {traceback.format_exc()}")

        # –û—á–∏—â–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if question_uuid in active_questions:
            del active_questions[question_uuid]


@router.poll(HomeworkStates.test_in_progress)
async def handle_poll_closed(poll: Poll, state: FSMContext, bot: Bot):
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–æ—Å–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)"""
    logging.info(f"üîî –†–ï–ó–ï–†–í–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: Poll closed event: poll_id={poll.id}, is_closed={poll.is_closed}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        current_state = await state.get_state()
        current_question_uuid = data.get("current_question_uuid")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        if current_state != HomeworkStates.test_in_progress:
            logging.info(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç
        question_answered = data.get("question_answered", False)
        if question_answered:
            logging.info("‚úÖ –û—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º
        if current_question_uuid:
            if current_question_uuid in active_questions:
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è
                logging.info(f"üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {current_question_uuid}, —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç")
                return

            if current_question_uuid in completed_questions:
                # –í–æ–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º
                logging.info(f"‚úÖ –í–æ–ø—Ä–æ—Å {current_question_uuid} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º")
                return

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        logging.warning(f"‚ö†Ô∏è –†–ï–ó–ï–†–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ê–ô–ú–ê–£–¢–ê –¥–ª—è poll {poll.id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
        user_id = data.get("user_id")
        if not user_id:
            logging.error("‚ùå –ù–µ—Ç user_id –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ
        current_answer_options = data.get("current_answer_options", [])
        correct_answer = next((opt for opt in current_answer_options if opt['is_correct']), None)

        if correct_answer:
            timeout_message = await bot.send_message(
                user_id,
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)\n\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer['text']}"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            messages_to_delete = data.get("messages_to_delete", [])
            messages_to_delete.append(timeout_message.message_id)
            await state.update_data(messages_to_delete=messages_to_delete)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–π–º–∞—É—Ç–∞
        index = data.get("q_index", 0)
        questions = data.get("questions", [])
        current_question_id = data.get("current_question_id")

        if index < len(questions) and current_question_id:
            current_question_data = questions[index]
            question_results = data.get("question_results", [])

            question_results.append({
                "question_id": current_question_id,
                "selected_answer_id": None,
                "is_correct": False,
                "time_spent": None,
                "microtopic_number": current_question_data['microtopic_number']
            })

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            await state.update_data(
                q_index=index + 1,
                question_results=question_results,
                question_answered=False
            )

            await asyncio.sleep(2)
            await send_next_question(user_id, state, bot)

        logging.info("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
        import traceback
        logging.error(f"üìã Traceback: {traceback.format_exc()}")


async def cleanup_test_messages(chat_id: int, data: dict, bot: Bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ—Å—Ç–∞"""
    try:
        messages_to_delete = data.get("messages_to_delete", [])

        if not messages_to_delete:
            logging.info("üßπ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        deleted_count = 0
        for message_id in messages_to_delete:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
                deleted_count += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                await asyncio.sleep(0.1)
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
                logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

        logging.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ—Å—Ç–∞: {e}")


async def cleanup_test_data(user_id: int):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        questions_to_remove = []
        for question_uuid, question_info in active_questions.items():
            if question_info.get("chat_id") == user_id:
                questions_to_remove.append(question_uuid)

        for question_uuid in questions_to_remove:
            del active_questions[question_uuid]
            logging.info(f"üßπ –û—á–∏—â–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å {question_uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if len(completed_questions) > 100:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
            completed_list = list(completed_questions)
            completed_questions.clear()
            completed_questions.update(completed_list[-50:])  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
            logging.info("üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞: {e}")


def get_active_questions_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"""
    return len(active_questions)


def get_completed_questions_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"""
    return len(completed_questions)

