from aiogram import Router, F
from aiogram.types import Poll, PollAnswer, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta


router = Router()

class QuizStates(StatesGroup):
    confirming = State()
    testing = State()

# –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
QUIZ_QUESTIONS = [
    {
        "question": "–ö–∞–∫–æ–π –∞–ª–∫–∞–Ω –∏–º–µ–µ—Ç —Ñ–æ—Ä–º—É–ª—É C3H8?",
        "options": ["–ú–µ—Ç–∞–Ω", "–≠—Ç–∞–Ω", "–ü—Ä–æ–ø–∞–Ω", "–ë—É—Ç–∞–Ω"],
        "correct_id": 2
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –∞—Ç–æ–º–æ–≤ –≤–æ–¥–æ—Ä–æ–¥–∞ –≤ –º–µ—Ç–∞–Ω–µ?",
        "options": ["2", "4", "6", "8"],
        "correct_id": 1
    },
]

@router.message(F.text == "–ë–∞–∑–æ–≤–æ–µ")  # –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∑
async def confirm_test(msg: Message):
    text = (
        "üîé –£—Ä–æ–∫: –ò–∑–æ–º–µ—Ä–∏—è\n"
        "üìã –í–æ–ø—Ä–æ—Å–æ–≤: 15\n"
        "‚è± –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: 10 —Å–µ–∫—É–Ω–¥\n"
        "‚ö†Ô∏è –ë–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞ 100% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–¢—ã –≥–æ—Ç–æ–≤?"
    )
    await msg.answer(text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_quiz")]
        ]
    ))

@router.callback_query(F.data == "start_quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    await state.set_state(QuizStates.testing)
    await state.update_data(score=0, q_index=0)
    await callback.answer()
    await send_next_question(callback.message.chat.id, state, callback.bot)


async def send_next_question(chat_id, state: FSMContext, bot):
    data = await state.get_data()
    index = data.get("q_index", 0)

    if index >= len(QUIZ_QUESTIONS):
        # ... (–∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞)
        return

    q = QUIZ_QUESTIONS[index]

    close_date = int((datetime.now() + timedelta(seconds=10)).timestamp())

    await bot.send_poll(
        chat_id=chat_id,
        question=q["question"],
        options=q["options"],
        type="quiz",
        correct_option_id=q["correct_id"],
        is_anonymous=False,
        close_date=close_date
    )



@router.poll_answer()
async def handle_poll_answer(poll: PollAnswer, state: FSMContext):
    data = await state.get_data()
    index = data.get("q_index", 0)

    if index < len(QUIZ_QUESTIONS):
        correct_id = QUIZ_QUESTIONS[index]["correct_id"]
        selected = poll.option_ids[0]

        score = data.get("score", 0)
        if selected == correct_id:
            score += 1

        await state.update_data(score=score, q_index=index + 1)

        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥. –≤–æ–ø—Ä–æ—Å
        await send_next_question(poll.user.id, state, poll.bot)
