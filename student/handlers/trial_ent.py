from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import logging
from ..keyboards.trial_ent import (
    get_trial_ent_start_kb,
    get_required_subjects_kb,
    get_profile_subjects_kb,
    get_second_profile_subject_kb,
    get_after_trial_ent_kb,
    get_analytics_subjects_kb,
    get_back_to_analytics_kb
)
from common.keyboards import get_main_menu_back_button
# process_test_answer –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ homework_quiz.py

router = Router()

class TrialEntStates(StatesGroup):
    subject_analytics = State()
    main = State()
    required_subjects = State()
    profile_subjects = State()
    second_profile_subject = State()
    test_in_progress = State()
    results = State()
    analytics_subjects = State()
    confirming_end = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    history = State()
    history_detail = State()

@router.callback_query(F.data == "trial_ent")
async def show_trial_ent_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
    # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

    await callback.message.edit_text(
        "–≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è –ï–ù–¢: 130 –±–∞–ª–ª–æ–≤ (–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è).\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
        reply_markup=get_trial_ent_start_kb()
    )
    await state.set_state(TrialEntStates.main)

@router.callback_query(TrialEntStates.main, F.data == "start_trial_ent")
async def choose_required_subjects(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ
    await state.clear()

    await callback.message.edit_text(
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:",
        reply_markup=get_required_subjects_kb()
    )
    await state.set_state(TrialEntStates.required_subjects)

@router.callback_query(TrialEntStates.required_subjects, F.data.startswith("req_sub_"))
async def choose_profile_subjects(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    required_subjects = callback.data.replace("req_sub_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    if required_subjects == "kz":
        selected_subjects = ["kz"]
    elif required_subjects == "mathlit":
        selected_subjects = ["mathlit"]
    else:  # both
        selected_subjects = ["kz", "mathlit"]
    
    await state.update_data(required_subjects=selected_subjects)
    
    await callback.message.edit_text(
        "–ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:",
        reply_markup=get_profile_subjects_kb()
    )
    await state.set_state(TrialEntStates.profile_subjects)

@router.callback_query(TrialEntStates.profile_subjects, F.data.startswith("prof_sub_"))
async def process_profile_subject(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    profile_subject = callback.data
    
    if profile_subject == "prof_sub_none":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤", –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∞–ª—É —Ç–µ—Å—Ç–∞
        await state.update_data(profile_subjects=[])
        await start_trial_ent_test(callback, state)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        await state.update_data(first_profile_subject=profile_subject)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ç–æ—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=get_second_profile_subject_kb(profile_subject)
        )
        await state.set_state(TrialEntStates.second_profile_subject)

@router.callback_query(TrialEntStates.second_profile_subject, F.data.startswith("second_prof_sub_"))
async def process_second_profile_subject(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    second_profile_subject = callback.data.replace("second_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
    user_data = await state.get_data()
    first_profile_subject = user_data.get("first_profile_subject", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞
    profile_subjects = [
        first_profile_subject.replace("prof_sub_", ""),
        second_profile_subject.replace("prof_sub_", "")
    ]
    await state.update_data(profile_subjects=profile_subjects)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∞–ª—É —Ç–µ—Å—Ç–∞
    await start_trial_ent_test(callback, state)

async def start_trial_ent_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
    user_data = await state.get_data()
    required_subjects = user_data.get("required_subjects", [])
    profile_subjects = user_data.get("profile_subjects", [])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from common.trial_ent_service import TrialEntService

    try:
        all_questions, total_questions = await TrialEntService.generate_trial_ent_questions(
            required_subjects, profile_subjects
        )

        if not all_questions:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_trial_ent_start_kb()
            )
            await state.set_state(TrialEntStates.main)
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è quiz_registrator
        await state.update_data(
            questions=all_questions,
            q_index=0,
            score=0,
            question_results=[],
            user_id=callback.from_user.id,
            required_subjects=required_subjects,
            profile_subjects=profile_subjects,
            messages_to_delete=[]
        )

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –æ–±—â–∏–π –º–æ–¥—É–ª—å
        from common.quiz_registrator import send_next_question
        await send_next_question(
            chat_id=callback.from_user.id,
            state=state,
            bot=callback.bot,
            finish_callback=finish_trial_ent_quiz
        )
        await state.set_state(TrialEntStates.test_in_progress)

    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢: {e}")

        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_trial_ent_start_kb()
        )
        await state.set_state(TrialEntStates.main)

def get_subject_name(subject_code):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∫–æ–¥—É"""
    subject_names = {
        "kz": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "mathlit": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
        "math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "geo": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "bio": "–ë–∏–æ–ª–æ–≥–∏—è",
        "chem": "–•–∏–º–∏—è",
        "inf": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "world": "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"
    }
    return subject_names.get(subject_code, "")

async def finish_trial_ent_quiz(chat_id: int, state: FSMContext, bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢ —á–µ—Ä–µ–∑ quiz_registrator"""
    import logging
    import asyncio
    logger = logging.getLogger(__name__)
    logger.info(f"üèÅ TRIAL_ENT: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    user_data = await state.get_data()
    required_subjects = user_data.get("required_subjects", [])
    profile_subjects = user_data.get("profile_subjects", [])
    questions = user_data.get("questions", [])
    question_results = user_data.get("question_results", [])

    logger.info(f"üìä TRIAL_ENT: –ü–æ–ª—É—á–µ–Ω–æ {len(question_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
        from database import UserRepository, StudentRepository
        user = await UserRepository.get_by_telegram_id(chat_id)
        if not user:
            await bot.send_message(
                chat_id,
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                reply_markup=get_trial_ent_start_kb()
            )
            await state.set_state(TrialEntStates.main)
            return

        student = await StudentRepository.get_by_user_id(user.id)
        if not student:
            await bot.send_message(
                chat_id,
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_trial_ent_start_kb()
            )
            await state.set_state(TrialEntStates.main)
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        answers = {}
        for i, result in enumerate(question_results, 1):
            answers[i] = result.get("selected_answer_id")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"üíæ TRIAL_ENT: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        from common.trial_ent_service import TrialEntService
        trial_ent_result_id = await TrialEntService.save_trial_ent_result(
            student_id=student.id,
            required_subjects=required_subjects,
            profile_subjects=profile_subjects,
            questions_data=questions,
            answers=answers
        )
        logger.info(f"‚úÖ TRIAL_ENT: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID {trial_ent_result_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"üìà TRIAL_ENT: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        statistics = await TrialEntService.get_trial_ent_statistics(trial_ent_result_id)
        logger.info(f"üìä TRIAL_ENT: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        total_correct = statistics["total_correct"]
        total_questions = statistics["total_questions"]

        result_text = f"üßæ –í–µ—Ä–Ω—ã—Ö –±–∞–ª–ª–æ–≤: {total_correct}/{total_questions}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
        subject_stats = statistics.get("subject_statistics", {})

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for subject_code in required_subjects:
            subject_name = TrialEntService.get_subject_name(subject_code)
            stats = subject_stats.get(subject_code, {})
            if stats:
                result_text += f"üßæ –í–µ—Ä–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ {subject_name}: {stats['correct']}/{stats['total']}\n"

        # –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for subject_code in profile_subjects:
            subject_name = TrialEntService.get_subject_name(subject_code)
            stats = subject_stats.get(subject_code, {})
            if stats:
                result_text += f"üßæ –í–µ—Ä–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ {subject_name}: {stats['correct']}/{stats['total']}\n"

        result_text += "\n–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º?"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        serializable_stats = {
            "required_subjects": statistics["required_subjects"],
            "profile_subjects": statistics["profile_subjects"],
            "subject_statistics": statistics["subject_statistics"],
            "microtopic_statistics": statistics["microtopic_statistics"],
            "total_correct": statistics["total_correct"],
            "total_questions": statistics["total_questions"]
        }

        await state.update_data(
            test_results=serializable_stats,
            trial_ent_result_id=trial_ent_result_id
        )

        logger.info(f"üì§ TRIAL_ENT: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
        await bot.send_message(
            chat_id,
            result_text,
            reply_markup=get_after_trial_ent_kb()
        )
        await state.set_state(TrialEntStates.results)
        logger.info(f"üéâ TRIAL_ENT: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        logger.info(f"üßπ TRIAL_ENT: –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
        from common.quiz_registrator import cleanup_test_messages, cleanup_test_data

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(cleanup_test_messages(chat_id, user_data, bot))
        asyncio.create_task(cleanup_test_data(chat_id))

        logger.info(f"‚úÖ TRIAL_ENT: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢: {e}")

        await bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_trial_ent_start_kb()
        )
        await state.set_state(TrialEntStates.main)



@router.callback_query(TrialEntStates.test_in_progress, F.data == "end_trial_ent")
async def end_trial_ent_early(callback: CallbackQuery, state: FSMContext):
    """–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Ç–µ—Å—Ç–µ
    data = await state.get_data()
    current_question = data.get("current_question", 1)
    total_questions = data.get("total_questions", 130)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç?\n"
        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {current_question-1} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="confirm_end_test")],
            [InlineKeyboardButton(text="üîÑ –ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_test")]
        ])
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ—Å—Ç—É
    await state.update_data(previous_state="test_in_progress")
    # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state("confirming_end")

@router.callback_query(lambda c: c.data == "confirm_end_test" and c.message.chat.id)
async def confirm_end_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    # –í—ã–∑—ã–≤–∞–µ–º finish_trial_ent –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤
    await finish_trial_ent(callback, state)

@router.callback_query(lambda c: c.data == "continue_test" and c.message.chat.id)
async def continue_test(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
    data = await state.get_data()
    current_question = data.get("current_question", 1)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ—Å—Ç—É
    await show_question(callback, state, current_question)
    await state.set_state(TrialEntStates.test_in_progress)



@router.callback_query(F.data == "view_analytics")
async def show_analytics_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    user_data = await state.get_data()
    test_results = user_data.get("test_results", {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    has_current_results = test_results and "total_correct" in test_results

    # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    from database import UserRepository, StudentRepository
    user = await UserRepository.get_by_telegram_id(callback.from_user.id)
    has_history = False

    if user:
        student = await StudentRepository.get_by_user_id(user.id)
        if student:
            from common.trial_ent_service import TrialEntService
            history = await TrialEntService.get_student_trial_ent_history(student.id, 1)
            has_history = len(history) > 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    buttons = []

    if has_current_results:
        buttons.append([InlineKeyboardButton(text="üìä –¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç", callback_data="current_test_analytics")])

    if has_history:
        buttons.append([InlineKeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤", callback_data="view_history")])

    if not has_current_results and not has_history:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.\n–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ï–ù–¢.",
            reply_markup=get_trial_ent_start_kb()
        )
        await state.set_state(TrialEntStates.main)
        return

    buttons.extend(get_main_menu_back_button())

    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )


@router.callback_query(F.data == "current_test_analytics")
async def show_current_test_subjects(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞"""
    user_data = await state.get_data()
    required_subjects = user_data.get("required_subjects", [])
    profile_subjects = user_data.get("profile_subjects", [])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    current_state = await state.get_state()
    await state.update_data(previous_analytics_state=current_state)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    test_results = user_data.get("test_results", {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ (–Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
    if not test_results or "total_correct" not in test_results:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
        await callback.message.edit_text(
            "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=get_trial_ent_start_kb()
        )
        await state.set_state(TrialEntStates.main)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç
    all_subjects = required_subjects + profile_subjects

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=get_analytics_subjects_kb(all_subjects)
    )
    await state.set_state(TrialEntStates.analytics_subjects)


@router.callback_query(F.data == "view_history")
async def show_trial_ent_history(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–±–Ω—ã—Ö –ï–ù–¢"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
        from database import UserRepository, StudentRepository
        user = await UserRepository.get_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                reply_markup=get_trial_ent_start_kb()
            )
            await state.set_state(TrialEntStates.main)
            return

        student = await StudentRepository.get_by_user_id(user.id)
        if not student:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_trial_ent_start_kb()
            )
            await state.set_state(TrialEntStates.main)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤
        from common.trial_ent_service import TrialEntService
        history = await TrialEntService.get_student_trial_ent_history(student.id, 10)

        if not history:
            await callback.message.edit_text(
                "üìà –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–±–Ω—ã—Ö –ï–ù–¢ –ø—É—Å—Ç–∞.\n–ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç!",
                reply_markup=get_trial_ent_start_kb()
            )
            await state.set_state(TrialEntStates.main)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        history_text = "üìà –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–±–Ω—ã—Ö –ï–ù–¢:\n\n"

        buttons = []
        for i, result in enumerate(history, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = result["completed_at"].strftime("%d.%m.%Y %H:%M")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            all_subjects = result["required_subjects"] + result["profile_subjects"]
            subjects_text = ", ".join([TrialEntService.get_subject_name(code) for code in all_subjects])

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç
            history_text += f"{i}. {date_str}\n"
            history_text += f"   üìä {result['correct_answers']}/{result['total_questions']} ({result['percentage']}%)\n"
            history_text += f"   üìö {subjects_text}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            buttons.append([InlineKeyboardButton(
                text=f"üìä –¢–µ—Å—Ç {i} ({result['percentage']}%)",
                callback_data=f"history_detail_{result['id']}"
            )])

        buttons.extend(get_main_menu_back_button())

        await callback.message.edit_text(
            history_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(TrialEntStates.history)

    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–±–Ω—ã—Ö –ï–ù–¢: {e}")

        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏",
            reply_markup=get_trial_ent_start_kb()
        )
        await state.set_state(TrialEntStates.main)


@router.callback_query(TrialEntStates.history, F.data.startswith("history_detail_"))
async def show_history_detail(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–µ—Å—Ç–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_id = int(callback.data.replace("history_detail_", ""))

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from common.trial_ent_service import TrialEntService
        statistics = await TrialEntService.get_trial_ent_statistics(result_id)

        if not statistics:
            await callback.message.edit_text(
                "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_trial_ent_start_kb()
            )
            await state.set_state(TrialEntStates.main)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        required_subjects = statistics.get("required_subjects", [])
        profile_subjects = statistics.get("profile_subjects", [])
        total_correct = statistics["total_correct"]
        total_questions = statistics["total_questions"]

        detail_text = f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n\n"
        detail_text += f"üßæ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_correct}/{total_questions} ({round((total_correct/total_questions)*100)}%)\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        subject_stats = statistics.get("subject_statistics", {})

        if required_subjects:
            detail_text += "üìö –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
            for subject_code in required_subjects:
                subject_name = TrialEntService.get_subject_name(subject_code)
                stats = subject_stats.get(subject_code, {})
                if stats:
                    detail_text += f"‚Ä¢ {subject_name}: {stats['correct']}/{stats['total']}\n"
            detail_text += "\n"

        if profile_subjects:
            detail_text += "üéØ –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
            for subject_code in profile_subjects:
                subject_name = TrialEntService.get_subject_name(subject_code)
                stats = subject_stats.get(subject_code, {})
                if stats:
                    detail_text += f"‚Ä¢ {subject_name}: {stats['correct']}/{stats['total']}\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        await state.update_data(
            trial_ent_result_id=result_id,
            required_subjects=required_subjects,
            profile_subjects=profile_subjects
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        buttons = [
            [InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="history_analytics")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="view_history")],
        ]
        buttons.extend(get_main_menu_back_button())

        await callback.message.edit_text(
            detail_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(TrialEntStates.history_detail)

    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ: {e}")

        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=get_trial_ent_start_kb()
        )
        await state.set_state(TrialEntStates.main)


@router.callback_query(TrialEntStates.history_detail, F.data == "history_analytics")
async def show_history_analytics_subjects(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    user_data = await state.get_data()
    required_subjects = user_data.get("required_subjects", [])
    profile_subjects = user_data.get("profile_subjects", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    all_subjects = required_subjects + profile_subjects

    if not all_subjects:
        await callback.message.edit_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=get_trial_ent_start_kb()
        )
        await state.set_state(TrialEntStates.main)
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=get_analytics_subjects_kb(all_subjects)
    )
    await state.set_state(TrialEntStates.analytics_subjects)


@router.callback_query(TrialEntStates.analytics_subjects, F.data.startswith("analytics_"))
async def show_subject_analytics(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É"""
    subject_code = callback.data.replace("analytics_", "")

    try:
        user_data = await state.get_data()
        trial_ent_result_id = user_data.get("trial_ent_result_id")

        if not trial_ent_result_id:
            await callback.message.edit_text(
                "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_trial_ent_start_kb()
            )
            await state.set_state(TrialEntStates.main)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from common.trial_ent_service import TrialEntService
        from database import TrialEntQuestionResultRepository, MicrotopicRepository

        statistics = await TrialEntService.get_trial_ent_statistics(trial_ent_result_id)
        subject_name = TrialEntService.get_subject_name(subject_code)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        subject_stats = statistics.get("subject_statistics", {}).get(subject_code, {})
        microtopic_stats = statistics.get("microtopic_statistics", {})

        if not subject_stats:
            await callback.message.edit_text(
                f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=get_back_to_analytics_kb()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
        analytics_text = f"–¢–≤–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –ø–æ –ø—Ä–æ–±–Ω–æ–º—É –ï–ù–¢:\n"
        analytics_text += f"üßæ –í–µ—Ä–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ {subject_name}: {subject_stats['correct']}/{subject_stats['total']}\n"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        from database import SubjectRepository
        subject_id = await TrialEntService.get_subject_id_by_code(subject_code)

        if subject_id and microtopic_stats:
            microtopics = await MicrotopicRepository.get_by_subject(subject_id)
            microtopic_names = {mt.number: mt.name for mt in microtopics}

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º
            analytics_text += "\nüìà % –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º:\n"

            topics_analytics = {}
            for microtopic_num, stats in microtopic_stats.items():
                microtopic_name = microtopic_names.get(microtopic_num, f"–¢–µ–º–∞ {microtopic_num}")
                percentage = stats['percentage']
                topics_analytics[microtopic_name] = percentage

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
                status = "‚úÖ" if percentage >= 80 else "‚ùå" if percentage <= 40 else "‚ö†Ô∏è"
                analytics_text += f"‚Ä¢ {microtopic_name} ‚Äî {percentage}% {status}\n"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Ç–µ–º
            from common.statistics import add_strong_and_weak_topics
            analytics_text = add_strong_and_weak_topics(analytics_text, topics_analytics)

        await callback.message.edit_text(
            analytics_text,
            reply_markup=get_back_to_analytics_kb()
        )
        await state.set_state(TrialEntStates.subject_analytics)

    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {e}")

        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            reply_markup=get_back_to_analytics_kb()
        )

@router.callback_query(TrialEntStates.results, F.data == "retry_trial_ent")
async def retry_trial_ent(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–±–Ω—ã–π –ï–ù–¢ –µ—â–µ —Ä–∞–∑"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    await state.clear()
    await show_trial_ent_menu(callback, state)

@router.callback_query(F.data == "back_to_trial_ent_results")
async def back_to_trial_ent_results(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
    try:
        user_data = await state.get_data()
        trial_ent_result_id = user_data.get("trial_ent_result_id")

        if not trial_ent_result_id:
            await callback.message.edit_text(
                "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_trial_ent_start_kb()
            )
            await state.set_state(TrialEntStates.main)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from common.trial_ent_service import TrialEntService
        statistics = await TrialEntService.get_trial_ent_statistics(trial_ent_result_id)

        required_subjects = statistics.get("required_subjects", [])
        profile_subjects = statistics.get("profile_subjects", [])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        total_correct = statistics["total_correct"]
        total_questions = statistics["total_questions"]

        result_text = f"üßæ –í–µ—Ä–Ω—ã—Ö –±–∞–ª–ª–æ–≤: {total_correct}/{total_questions}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
        subject_stats = statistics.get("subject_statistics", {})

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for subject_code in required_subjects:
            subject_name = TrialEntService.get_subject_name(subject_code)
            stats = subject_stats.get(subject_code, {})
            if stats:
                result_text += f"üßæ –í–µ—Ä–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ {subject_name}: {stats['correct']}/{stats['total']}\n"

        # –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for subject_code in profile_subjects:
            subject_name = TrialEntService.get_subject_name(subject_code)
            stats = subject_stats.get(subject_code, {})
            if stats:
                result_text += f"üßæ –í–µ—Ä–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ {subject_name}: {stats['correct']}/{stats['total']}\n"

        result_text += "\n–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º?"

        await callback.message.edit_text(
            result_text,
            reply_markup=get_after_trial_ent_kb()
        )
        await state.set_state(TrialEntStates.results)

    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {e}")

        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            reply_markup=get_trial_ent_start_kb()
        )
        await state.set_state(TrialEntStates.main)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ quiz_registrator –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢
from common.quiz_registrator import register_quiz_handlers
register_quiz_handlers(
    router=router,
    test_state=TrialEntStates.test_in_progress
)

@router.callback_query(F.data == "back_to_analytics_subjects")
async def back_to_analytics_subjects(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    user_data = await state.get_data()
    previous_state = user_data.get("previous_analytics_state")
    
    if previous_state == TrialEntStates.results:
        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞
        await back_to_trial_ent_results(callback, state)
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        await show_subjects(callback, state)