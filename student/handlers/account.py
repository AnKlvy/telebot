from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from ..keyboards.account import get_account_kb

router = Router()

class AccountStates(StatesGroup):
    main = State()

@router.callback_query(F.data == "account")
async def show_account_info(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from database import StudentRepository, SubjectRepository

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"üîç DEBUG: –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å telegram_id={callback.from_user.id}")
        student = await StudentRepository.get_by_telegram_id(callback.from_user.id)
        print(f"üîç DEBUG: –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {student is not None}")
        if student:
            print(f"üîç DEBUG: –°—Ç—É–¥–µ–Ω—Ç ID: {student.id}, –∏–º—è: {student.user.name}")
            print(f"üîç DEBUG: –ö—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ (—á–µ—Ä–µ–∑ —Å–≤—è–∑—å): {len(student.courses) if hasattr(student, 'courses') and student.courses else 0}")

        if not student:
            await callback.message.edit_text(
                "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.",
                reply_markup=get_account_kb()
            )
            await state.set_state(AccountStates.main)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
        from database import CourseRepository
        print(f"üîç DEBUG: –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è user_id={callback.from_user.id}")
        courses = await CourseRepository.get_by_user_id(callback.from_user.id)
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(courses) if courses else 0}")
        if courses:
            for course in courses:
                print(f"üîç DEBUG: –ö—É—Ä—Å: {course.name} (ID: {course.id})")
        course_names = [course.name for course in courses] if courses else ["–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"]

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
        subjects = await SubjectRepository.get_by_user_id(callback.from_user.id)
        subject_names = [subject.name for subject in subjects] if subjects else ["–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
        if student.groups:
            group_names = [f"{group.name} ({group.subject.name})" for group in student.groups]
            group_info = ", ".join(group_names)
        else:
            group_info = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        start_date = student.created_at.strftime("%d.%m.%Y") if student.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        courses_str = ", ".join(course_names)
        subjects_str = ", ".join(subject_names)
        tariff_str = student.tariff.capitalize() if student.tariff else "–ù–µ —É–∫–∞–∑–∞–Ω"

        await callback.message.edit_text(
            "‚ùì –ê–∫–∫–∞—É–Ω—Ç\n"
            f"üìö –ö—É—Ä—Å—ã: {courses_str}\n"
            f"üìã –ì—Ä—É–ø–ø—ã: {group_info}\n"
            f"üíº –¢–∞—Ä–∏—Ñ: {tariff_str}\n"
            f"üìÜ –ù–∞ –∫—É—Ä—Å–µ —Å: {start_date}\n"
            f"üß™ –ü—Ä–µ–¥–º–µ—Ç—ã: {subjects_str}\n"
            f"üèÜ –ë–∞–ª–ª—ã: {student.points}\n"
            f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {student.level}",
            reply_markup=get_account_kb()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.",
            reply_markup=get_account_kb()
        )

    await state.set_state(AccountStates.main)