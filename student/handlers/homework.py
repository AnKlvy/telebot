from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from common.utils import check_if_id_in_callback_data
from ..keyboards.homework import get_courses_kb, get_subjects_kb, get_lessons_kb
from aiogram.fsm.state import State, StatesGroup
from database import HomeworkRepository, LessonRepository, SubjectRepository, CourseRepository
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from common.keyboards import get_main_menu_back_button

class HomeworkStates(StatesGroup):
    course = State()
    subject = State()
    lesson = State()
    homework = State()
    confirmation = State()
    test_in_progress = State()

router = Router()


@router.callback_query(F.data == "homework")
async def choose_course(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=await get_courses_kb(user_id=callback.from_user.id)
    )
    await state.set_state(HomeworkStates.course)

@router.callback_query(HomeworkStates.course, F.data.startswith("course_"))
async def choose_subject(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∫—É—Ä—Å–∞"""
    course_id = int(await check_if_id_in_callback_data("course_", callback, state, "course"))

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    course = await CourseRepository.get_by_id(course_id)
    if not course:
        await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(course_id=course_id, course_name=course.name)

    await callback.message.edit_text(
        f"üìö –ö—É—Ä—Å: {course.name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–µ–º—ã –∏ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=await get_subjects_kb(course_id=course_id, user_id=callback.from_user.id)
    )
    await state.set_state(HomeworkStates.subject)

@router.callback_query(HomeworkStates.subject, F.data.startswith("subject_"))
async def choose_lesson(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —É—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject_id = int(await check_if_id_in_callback_data("subject_", callback, state, "subject"))

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    subject = await SubjectRepository.get_by_id(subject_id)
    if not subject:
        await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_data = await state.get_data()
    course_name = user_data.get("course_name", "")

    await state.update_data(subject_id=subject.id, subject_name=subject.name)

    await callback.message.edit_text(
        f"üìö –ö—É—Ä—Å: {course_name}\n"
        f"üìñ –ü—Ä–µ–¥–º–µ—Ç: {subject.name}\n\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:",
        reply_markup=await get_lessons_kb(subject.id)
    )
    await state.set_state(HomeworkStates.lesson)

@router.callback_query(HomeworkStates.lesson, F.data.startswith("lesson_"))
async def choose_homework(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞"""
    lesson_id = int(await check_if_id_in_callback_data("lesson_", callback, state, "lesson"))

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    lesson = await LessonRepository.get_by_id(lesson_id)
    if not lesson:
        await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
    homeworks = await HomeworkRepository.get_by_lesson(lesson_id)

    if not homeworks:
        user_data = await state.get_data()
        course_name = user_data.get("course_name", "")
        subject_name = user_data.get("subject_name", "")

        await callback.message.edit_text(
            f"üìö –ö—É—Ä—Å: {course_name}\n"
            f"üìñ –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
            f"üìù –£—Ä–æ–∫: {lesson.name}\n\n"
            "‚ùå –î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                *get_main_menu_back_button()
            ])
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    course_name = user_data.get("course_name", "")
    subject_name = user_data.get("subject_name", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(lesson_id=lesson_id, lesson_name=lesson.name)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
    buttons = []
    for homework in homeworks:
        buttons.append([InlineKeyboardButton(
            text=homework.name,
            callback_data=f"homework_{homework.id}"
        )])

    buttons.extend(get_main_menu_back_button())

    await callback.message.edit_text(
        f"üìö –ö—É—Ä—Å: {course_name}\n"
        f"üìñ –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
        f"üìù –£—Ä–æ–∫: {lesson.name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(HomeworkStates.homework)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ confirm_test, start_quiz, process_answer —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ homework_quiz.py
