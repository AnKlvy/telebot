from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from ..keyboards.homework import (
    get_main_menu_kb, get_courses_kb, get_subjects_kb, get_lessons_kb,
    get_homeworks_kb, get_confirm_kb, get_test_answers_kb, get_after_test_kb
)
from .test_logic import start_test_process, process_test_answer
from aiogram.fsm.state import State, StatesGroup

class HomeworkStates(StatesGroup):
    course = State()
    subject = State()
    lesson = State()
    homework = State()
    confirmation = State()
    test_in_progress = State()

router = Router()

async def show_main_menu(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –¥–æ–º–∞—à–∫–∏, –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Ç–µ–º—ã, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ù–¢.\n"
        "–ù–∏–∂–µ ‚Äî –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:",
        reply_markup=get_main_menu_kb()
    )

@router.callback_query(F.data == "homework")
async def choose_course(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=get_courses_kb()
    )
    await state.set_state(HomeworkStates.course)

@router.callback_query(HomeworkStates.course, F.data.startswith("course_"))
async def choose_subject(callback: CallbackQuery, state: FSMContext):
    await state.update_data(course=callback.data)
    await callback.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–µ–º—ã –∏ –∑–∞–¥–∞–Ω–∏—è üìö",
        reply_markup=get_subjects_kb()
    )
    await state.set_state(HomeworkStates.subject)

@router.callback_query(HomeworkStates.subject, F.data.startswith("sub_"))
async def choose_lesson(callback: CallbackQuery, state: FSMContext):
    await state.update_data(subject=callback.data)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüëá",
        reply_markup=get_lessons_kb()
    )
    await state.set_state(HomeworkStates.lesson)

@router.callback_query(HomeworkStates.lesson, F.data.startswith("lesson_"))
async def choose_homework(callback: CallbackQuery, state: FSMContext):
    lesson_id = callback.data.replace("lesson_", "")
    lesson_name = ""
    if lesson_id == "alkanes":
        lesson_name = "–ê–ª–∫–∞–Ω—ã"
    elif lesson_id == "isomeria":
        lesson_name = "–ò–∑–æ–º–µ—Ä–∏—è"
    elif lesson_id == "acids":
        lesson_name = "–ö–∏—Å–ª–æ—Ç—ã"

    await state.update_data(lesson=callback.data, lesson_name=lesson_name)
    await callback.message.edit_text(
        "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µüëá",
        reply_markup=get_homeworks_kb()
    )
    await state.set_state(HomeworkStates.homework)

@router.callback_query(HomeworkStates.homework, F.data.startswith("homework_"))
async def confirm_homework(callback: CallbackQuery, state: FSMContext):
    homework_type = callback.data.replace("homework_", "")
    homework_name = ""
    if homework_type == "basic":
        homework_name = "–ë–∞–∑–æ–≤–æ–µ"
    elif homework_type == "advanced":
        homework_name = "–£–≥–ª—É–±–ª—ë–Ω–Ω–æ–µ"
    elif homework_type == "review":
        homework_name = "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"

    await state.update_data(homework=callback.data, homework_name=homework_name)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—Ä–æ–∫–µ
    user_data = await state.get_data()
    lesson_name = user_data.get("lesson_name", "")

    await callback.message.edit_text(
        f"üîé –£—Ä–æ–∫: {lesson_name}\n"
        f"üìã –í–æ–ø—Ä–æ—Å–æ–≤: 15\n"
        f"‚è± –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: 10 —Å–µ–∫—É–Ω–¥\n"
        f"‚ö†Ô∏è –ë–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞ 100% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
        f"–¢—ã –≥–æ—Ç–æ–≤?",
        reply_markup=get_confirm_kb()
    )
    await state.set_state(HomeworkStates.confirmation)

@router.callback_query(HomeworkStates.confirmation, F.data == "start_test")
async def start_test(callback: CallbackQuery, state: FSMContext):
    await start_test_process(callback, state)
    await state.set_state(HomeworkStates.test_in_progress)

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await show_main_menu(callback.message)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
@router.callback_query(HomeworkStates.test_in_progress, F.data.startswith("answer_"))
async def process_answer(callback: CallbackQuery, state: FSMContext):
    selected_answer = callback.data.replace("answer_", "")
    await process_test_answer(callback, state, selected_answer)

@router.callback_query(F.data == "retry_test")
async def retry_test(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µüëá",
        reply_markup=get_homeworks_kb()
    )
    await state.set_state(HomeworkStates.homework)
