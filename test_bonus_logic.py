"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import BonusTestRepository, BonusQuestionRepository, BonusAnswerOptionRepository


async def test_bonus_test_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç
        tests = await BonusTestRepository.get_all()
        if not tests:
            print("‚ùå –ë–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        test = tests[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test.name} (ID: {test.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        question_repo = BonusQuestionRepository()
        questions = await question_repo.get_by_bonus_test(test.id)
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
        if not questions:
            print("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        question = questions[0]
        print(f"‚ùì –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å: {question.text} (ID: {question.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = await BonusAnswerOptionRepository.get_by_bonus_question(question.id)
        print(f"üî§ –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {len(options)}")
        
        if not options:
            print("‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        correct_count = 0
        for i, option in enumerate(options, 1):
            status = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô" if option.is_correct else "‚ùå –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"
            print(f"   {i}. {option.text} ({status})")
            if option.is_correct:
                correct_count += 1
        
        if correct_count == 0:
            print("‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
        elif correct_count > 1:
            print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}")
        else:
            print("‚úÖ –û–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ –≤ –±–æ—Ç–µ
        test_state_data = {
            'bonus_test_id': test.id,
            'questions': [{
                'id': q.id,
                'text': q.text,
                'photo_path': q.photo_path,
                'time_limit': q.time_limit,
                'microtopic_number': None
            } for q in questions],
            'q_index': 0,
            'score': 0,
            'total_questions': len(questions)
        }
        
        print(f"\nüìã –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
        print(f"   bonus_test_id: {test_state_data.get('bonus_test_id')}")
        print(f"   questions count: {len(test_state_data.get('questions', []))}")
        print(f"   q_index: {test_state_data.get('q_index')}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ send_next_question
        is_bonus_test = test_state_data.get("bonus_test_id") is not None
        print(f"   is_bonus_test: {is_bonus_test}")
        
        if is_bonus_test:
            current_question = test_state_data['questions'][0]
            question_id = current_question['id']
            print(f"   –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID: {question_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            answer_options = await BonusAnswerOptionRepository.get_by_bonus_question(question_id)
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(answer_options)}")
            
            if answer_options:
                print("‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã!")
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –±–æ–Ω—É—Å–Ω—ã–π!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_bonus_test_logic())
