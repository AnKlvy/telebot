"""
–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from database import (
    GroupRepository, UserRepository, StudentRepository, CuratorRepository,
    TeacherRepository, ManagerRepository
)


async def create_user_if_not_exists(telegram_id, name, role):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    existing_user = await UserRepository.get_by_telegram_id(telegram_id)
    if not existing_user:
        user = await UserRepository.create(
            telegram_id=telegram_id,
            name=name,
            role=role
        )
        print(f"   ‚úÖ {role.title()} '{user.name}' —Å–æ–∑–¥–∞–Ω (ID: {user.id})")
        return user, True
    else:
        print(f"   ‚ö†Ô∏è {role.title()} '{existing_user.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_user.id})")
        return existing_user, False


async def create_groups_and_users(created_subjects):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø...")
        groups_data = [
            # –ï–ù–¢ –≥—Ä—É–ø–ø—ã
            {"name": "–ú-1", "subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"},
            {"name": "–ú-2", "subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"},
            {"name": "–§-1", "subject": "–§–∏–∑–∏–∫–∞"},
            {"name": "–ò–ö-1", "subject": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞"},
            {"name": "–•-1", "subject": "–•–∏–º–∏—è"},
            {"name": "–ë-1", "subject": "–ë–∏–æ–ª–æ–≥–∏—è"},
            # IT –≥—Ä—É–ø–ø—ã
            {"name": "PY-1", "subject": "Python"},
            {"name": "PY-2", "subject": "Python"},
            {"name": "JS-1", "subject": "JavaScript"},
            {"name": "JAVA-1", "subject": "Java"},
        ]

        created_groups = {}
        for group_data in groups_data:
            subject_name = group_data["subject"]
            if subject_name in created_subjects:
                try:
                    group = await GroupRepository.create(
                        name=group_data["name"],
                        subject_id=created_subjects[subject_name].id
                    )
                    created_groups[group.name] = group
                    print(f"   ‚úÖ –ì—Ä—É–ø–ø–∞ '{group.name}' —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}' (ID: {group.id})")
                except ValueError as e:
                    # –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ—ë –∏–∑ –±–∞–∑—ã
                    existing_groups = await GroupRepository.get_by_subject(created_subjects[subject_name].id)
                    existing_group = next((g for g in existing_groups if g.name == group_data["name"]), None)
                    if existing_group:
                        created_groups[existing_group.name] = existing_group
                        print(f"   ‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ '{existing_group.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}' (ID: {existing_group.id})")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã '{group_data['name']}': {e}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        # –ê–¥–º–∏–Ω (–ø–æ–ª—É—á–∏—Ç –≤—Å–µ —Ä–æ–ª–∏)
        admin_user, _ = await create_user_if_not_exists(955518340, "–ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤", "admin")

        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        managers_data = [
            {"telegram_id": 111222333, "name": "–ê–ª–∏—è –°–µ–π—Ç–æ–≤–∞"},
            {"telegram_id": 444555666, "name": "–î–∞–Ω–∏—è—Ä –ñ—É–º–∞–±–µ–∫–æ–≤"},
            {"telegram_id": 7265679697, "name": "–ú–µ–¥–∏–Ω–∞ –ú–∞—Ö–∞–º–±–µ—Ç"},
        ]

        for manager_data in managers_data:
            user, is_new = await create_user_if_not_exists(
                manager_data["telegram_id"],
                manager_data["name"],
                "manager"
            )
            if is_new:
                manager = await ManagerRepository.create(user_id=user.id)
                print(f"      ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω (Manager ID: {manager.id})")

        # –ö—É—Ä–∞—Ç–æ—Ä—ã
        curators_data = [
            {"telegram_id": 777888999, "name": "–ê–π–≥–µ—Ä–∏–º –ö–∞—Å—ã–º–æ–≤–∞", "groups": ["–ú-1", "–ú-2"]},
            {"telegram_id": 123456789, "name": "–ï—Ä–ª–∞–Ω –ù—É—Ä–ª–∞–Ω–æ–≤", "groups": ["–§-1", "–ò–ö-1"]},
        ]

        for curator_data in curators_data:
            user, is_new = await create_user_if_not_exists(
                curator_data["telegram_id"],
                curator_data["name"],
                "curator"
            )
            if is_new:
                # –°–æ–∑–¥–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫—É—Ä—Å—É/–ø—Ä–µ–¥–º–µ—Ç—É
                curator = await CuratorRepository.create(user_id=user.id)

                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥—Ä—É–ø–ø–∞–º
                for group_name in curator_data["groups"]:
                    if group_name in created_groups:
                        await CuratorRepository.add_curator_to_group(curator.id, created_groups[group_name].id)
                        print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{group_name}'")

                print(f"      ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω (Curator ID: {curator.id})")

        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
        teachers_data = [
            {"telegram_id": 987654321, "name": "–ê—Å–µ–ª—å –¢–æ–∫—Ç–∞—Ä–æ–≤–∞", "subject": "Python", "groups": ["PY-1"]},
            {"telegram_id": 555666777, "name": "–ú–∞–∫—Å–∞—Ç –ò–±—Ä–∞–≥–∏–º–æ–≤", "subject": "JavaScript", "groups": ["JS-1"]},
        ]

        for teacher_data in teachers_data:
            user, is_new = await create_user_if_not_exists(
                teacher_data["telegram_id"],
                teacher_data["name"],
                "teacher"
            )

            if is_new:
                subject_name = teacher_data["subject"]
                if subject_name in created_subjects:
                    teacher = await TeacherRepository.create(
                        user_id=user.id,
                        subject_id=created_subjects[subject_name].id
                    )

                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥—Ä—É–ø–ø–∞–º
                    for group_name in teacher_data["groups"]:
                        if group_name in created_groups:
                            await TeacherRepository.add_teacher_to_group(teacher.id, created_groups[group_name].id)
                            print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{group_name}'")

                    print(f"      ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω (Teacher ID: {teacher.id})")

        # –°—Ç—É–¥–µ–Ω—Ç—ã
        students_data = [
            {"telegram_id": 333444555, "name": "–ú—É—Ö–∞–Ω–±–µ—Ç–∂–∞–Ω –û–ª–∂–∞—Å", "groups": ["PY-1", "–ú-2"], "tariff": "premium"},
            {"telegram_id": 666777888, "name": "–ê—Ä—É–∂–∞–Ω –ê—Ö–º–µ—Ç–æ–≤–∞", "groups": ["–ú-1"], "tariff": "standard"},
            {"telegram_id": 999000111, "name": "–ë–µ–∫–∑–∞—Ç –°–µ—Ä–∏–∫–æ–≤", "groups": ["PY-2"], "tariff": "premium"},
            {"telegram_id": 222333444, "name": "–î–∏–Ω–∞—Ä–∞ –ñ–∞–Ω–∏–±–µ–∫–æ–≤–∞", "groups": ["JS-1"], "tariff": "standard"},
            {"telegram_id": 888999000, "name": "–ï—Ä–∞—Å—ã–ª –ú—É—Ö–∞–º–µ–¥–æ–≤", "groups": ["–ú-2"], "tariff": "premium"},
        ]

        for student_data in students_data:
            user, is_new = await create_user_if_not_exists(
                student_data["telegram_id"],
                student_data["name"],
                "student"
            )

            if is_new:
                student = await StudentRepository.create(
                    user_id=user.id,
                    tariff=student_data["tariff"]
                )
                print(f"      ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω (Student ID: {student.id})")
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
                student = await StudentRepository.get_by_user_id(user.id)
                print(f"      ‚ö†Ô∏è Student '{student_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {student.id})")

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥—Ä—É–ø–ø–∞–º (–¥–ª—è –Ω–æ–≤—ã—Ö –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)
            group_ids = []
            for group_name in student_data["groups"]:
                if group_name in created_groups:
                    group_ids.append(created_groups[group_name].id)

            if group_ids:
                await StudentRepository.set_groups(student.id, group_ids)
                group_names = ", ".join(student_data["groups"])
                print(f"      ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≥—Ä—É–ø–ø—ã: {group_names} (Student ID: {student.id})")

        print(f"üë• –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
