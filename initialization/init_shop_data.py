"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞
"""
import asyncio
from database import (
    init_database, ShopItemRepository, BonusTestRepository,
    BonusQuestionRepository, BonusAnswerOptionRepository,
    StudentRepository, StudentBonusTestRepository
)


async def init_shop_items():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ
    existing_items = await ShopItemRepository.get_all_active()

    if not existing_items:
        print("–°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞...")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        pdf_item = await ShopItemRepository.create(
            name='PDF –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
            description='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ù–¢',
            price=50,
            item_type='pdf'
        )
        await ShopItemRepository.update_content(
            pdf_item.id,
            content='üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n‚Ä¢ –†–∞–∑–±–æ—Ä —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫\n‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ\n‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\nüí° –ò–∑—É—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏!',
            file_path='https://example.com/math_materials.pdf'
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {pdf_item.name}")

        money_item = await ShopItemRepository.create(
            name='–î–µ–Ω–µ–∂–Ω—ã–π –ø—Ä–∏–∑ 5000 —Ç–µ–Ω–≥–µ',
            description='–î–µ–Ω–µ–∂–Ω—ã–π –ø—Ä–∏–∑ –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —É—á–µ–±—É',
            price=200,
            item_type='money'
        )
        await ShopItemRepository.update_content(
            money_item.id,
            content='üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –¥–µ–Ω–µ–∂–Ω—ã–π –ø—Ä–∏–∑!\n\nüíµ –°—É–º–º–∞: 5000 —Ç–µ–Ω–≥–µ\nüìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
            contact_info='Telegram: @admin_edubot\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 777 123 45 67\nEmail: admin@schoolpro.kz'
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {money_item.name}")

        consultation_item = await ShopItemRepository.create(
            name='–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º',
            description='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É',
            price=100,
            item_type='other'
        )
        await ShopItemRepository.update_content(
            consultation_item.id,
            content='üë®‚Äçüè´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –æ–ø—ã—Ç–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º\n\nüìÖ –£—Å–ª–æ–≤–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞—Ä–∞–Ω–µ–µ\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–Ω–ª–∞–π–Ω\n‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 60 –º–∏–Ω—É—Ç',
            contact_info='Telegram: @teacher_math\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 777 987 65 43\nEmail: teacher@schoolpro.kz\n\n–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ Telegram —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∞ –ø–æ–∫—É–ø–∫–∏'
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {consultation_item.name}")
    else:
        print(f"–í –º–∞–≥–∞–∑–∏–Ω–µ —É–∂–µ –µ—Å—Ç—å {len(existing_items)} —Ç–æ–≤–∞—Ä–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    await init_bonus_tests()

    # –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ê–Ω–¥—Ä–µ—è –ö–ª–∏–º–æ–≤–∞
    await init_andrey_purchases()

    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def init_bonus_tests():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    existing_tests = await BonusTestRepository.get_all()

    if not existing_tests:
        # –°–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
        math_test = await BonusTestRepository.create(
            name='–¢–µ—Å—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
            price=75
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç: {math_test.name}")

        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        question_repo = BonusQuestionRepository()

        # –í–æ–ø—Ä–æ—Å 1 (–ª–µ–≥–∫–∏–π - –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)
        question1 = await question_repo.create(
            bonus_test_id=math_test.id,
            text='–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?',
            time_limit=20
        )

        options1 = [
            {'text': '3', 'is_correct': False},
            {'text': '4', 'is_correct': True},
            {'text': '5', 'is_correct': False},
            {'text': '6', 'is_correct': False}
        ]
        await BonusAnswerOptionRepository.create_multiple(question1.id, options1)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å: {question1.text} (20 —Å–µ–∫)")

        # –í–æ–ø—Ä–æ—Å 2 (—Å—Ä–µ–¥–Ω–∏–π)
        question2 = await question_repo.create(
            bonus_test_id=math_test.id,
            text='–ß–µ–º—É —Ä–∞–≤–µ–Ω –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ 5?',
            time_limit=35
        )

        options2 = [
            {'text': '10', 'is_correct': False},
            {'text': '15', 'is_correct': False},
            {'text': '25', 'is_correct': True},
            {'text': '30', 'is_correct': False}
        ]
        await BonusAnswerOptionRepository.create_multiple(question2.id, options2)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å: {question2.text} (35 —Å–µ–∫)")

        # –í–æ–ø—Ä–æ—Å 3 (—Å–ª–æ–∂–Ω—ã–π - –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)
        question3 = await question_repo.create(
            bonus_test_id=math_test.id,
            text='–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: x + 7 = 12',
            time_limit=50
        )

        options3 = [
            {'text': 'x = 3', 'is_correct': False},
            {'text': 'x = 4', 'is_correct': False},
            {'text': 'x = 5', 'is_correct': True},
            {'text': 'x = 6', 'is_correct': False}
        ]
        await BonusAnswerOptionRepository.create_multiple(question3.id, options3)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å: {question3.text}")

        # –°–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ —Ñ–∏–∑–∏–∫–µ
        physics_test = await BonusTestRepository.create(
            name='–¢–µ—Å—Ç –ø–æ —Ñ–∏–∑–∏–∫–µ',
            price=80
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç: {physics_test.name}")

        # –í–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–∑–∏–∫–µ 1
        physics_question1 = await question_repo.create(
            bonus_test_id=physics_test.id,
            text='–ö–∞–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∏–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ –°–ò?',
            time_limit=25
        )

        physics_options1 = [
            {'text': '–î–∂–æ—É–ª—å', 'is_correct': False},
            {'text': '–ù—å—é—Ç–æ–Ω', 'is_correct': True},
            {'text': '–í–∞—Ç—Ç', 'is_correct': False},
            {'text': '–ü–∞—Å–∫–∞–ª—å', 'is_correct': False}
        ]
        await BonusAnswerOptionRepository.create_multiple(physics_question1.id, physics_options1)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å: {physics_question1.text} (25 —Å–µ–∫)")

        # –í–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–∑–∏–∫–µ 2
        physics_question2 = await question_repo.create(
            bonus_test_id=physics_test.id,
            text='–ß–µ–º—É —Ä–∞–≤–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –≤ –≤–∞–∫—É—É–º–µ?',
            time_limit=40
        )

        physics_options2 = [
            {'text': '300 000 –∫–º/—Å', 'is_correct': True},
            {'text': '150 000 –∫–º/—Å', 'is_correct': False},
            {'text': '500 000 –∫–º/—Å', 'is_correct': False},
            {'text': '200 000 –∫–º/—Å', 'is_correct': False}
        ]
        await BonusAnswerOptionRepository.create_multiple(physics_question2.id, physics_options2)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å: {physics_question2.text}")

    else:
        print(f"–ë–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {len(existing_tests)} —à—Ç.")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–µ—Å—Ç–∞–º
        await add_missing_questions_to_existing_tests()


async def add_missing_questions_to_existing_tests():
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–µ—Å—Ç–∞–º"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = await BonusTestRepository.get_all()
    question_repo = BonusQuestionRepository()

    for test in tests:
        current_questions = len(test.questions) if test.questions else 0

        if test.name == '–¢–µ—Å—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ' and current_questions < 3:
            print(f"   –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ—Å—Ç—É '{test.name}' (—Ç–µ–∫—É—â–∏—Ö: {current_questions})")

            if current_questions < 2:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
                question2 = await question_repo.create(
                    bonus_test_id=test.id,
                    text='–ß–µ–º—É —Ä–∞–≤–µ–Ω –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ 5?',
                    time_limit=35
                )
                options2 = [
                    {'text': '10', 'is_correct': False},
                    {'text': '15', 'is_correct': False},
                    {'text': '25', 'is_correct': True},
                    {'text': '30', 'is_correct': False}
                ]
                await BonusAnswerOptionRepository.create_multiple(question2.id, options2)
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å: {question2.text} (35 —Å–µ–∫)")

            if current_questions < 3:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
                question3 = await question_repo.create(
                    bonus_test_id=test.id,
                    text='–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: x + 7 = 12',
                    time_limit=50
                )
                options3 = [
                    {'text': 'x = 3', 'is_correct': False},
                    {'text': 'x = 4', 'is_correct': False},
                    {'text': 'x = 5', 'is_correct': True},
                    {'text': 'x = 6', 'is_correct': False}
                ]
                await BonusAnswerOptionRepository.create_multiple(question3.id, options3)
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å: {question3.text}")

    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ
    if len(tests) < 2:
        print("   –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ —Ñ–∏–∑–∏–∫–µ...")
        physics_test = await BonusTestRepository.create(
            name='–¢–µ—Å—Ç –ø–æ —Ñ–∏–∑–∏–∫–µ',
            price=80
        )

        # –í–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–∑–∏–∫–µ 1
        physics_question1 = await question_repo.create(
            bonus_test_id=physics_test.id,
            text='–ö–∞–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∏–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ –°–ò?',
            time_limit=30
        )
        physics_options1 = [
            {'text': '–î–∂–æ—É–ª—å', 'is_correct': False},
            {'text': '–ù—å—é—Ç–æ–Ω', 'is_correct': True},
            {'text': '–í–∞—Ç—Ç', 'is_correct': False},
            {'text': '–ü–∞—Å–∫–∞–ª—å', 'is_correct': False}
        ]
        await BonusAnswerOptionRepository.create_multiple(physics_question1.id, physics_options1)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç –∏ –≤–æ–ø—Ä–æ—Å: {physics_question1.text}")

        # –í–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–∑–∏–∫–µ 2
        physics_question2 = await question_repo.create(
            bonus_test_id=physics_test.id,
            text='–ß–µ–º—É —Ä–∞–≤–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –≤ –≤–∞–∫—É—É–º–µ?',
            time_limit=30
        )
        physics_options2 = [
            {'text': '300 000 –∫–º/—Å', 'is_correct': True},
            {'text': '150 000 –∫–º/—Å', 'is_correct': False},
            {'text': '500 000 –∫–º/—Å', 'is_correct': False},
            {'text': '200 000 –∫–º/—Å', 'is_correct': False}
        ]
        await BonusAnswerOptionRepository.create_multiple(physics_question2.id, physics_options2)
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å: {physics_question2.text}")


async def init_andrey_purchases():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ê–Ω–¥—Ä–µ—è –ö–ª–∏–º–æ–≤–∞"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ê–Ω–¥—Ä–µ—è –ö–ª–∏–º–æ–≤–∞...")

    # –ü–æ–ª—É—á–∞–µ–º –ê–Ω–¥—Ä–µ—è –ö–ª–∏–º–æ–≤–∞
    andrey_user = await StudentRepository.get_by_telegram_id(955518340)
    if not andrey_user:
        print("   ‚ö†Ô∏è –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {andrey_user.user.name} (ID: {andrey_user.id})")

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –ê–Ω–¥—Ä–µ—é
    await StudentRepository.add_coins(andrey_user.id, 1000)
    balance = await StudentRepository.get_balance(andrey_user.id)
    print(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å –ê–Ω–¥—Ä–µ—è: {balance['coins']} –º–æ–Ω–µ—Ç")

    # –ü–æ–∫—É–ø–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    bonus_tests = await BonusTestRepository.get_all()

    for test in bonus_tests:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
        already_purchased = await StudentBonusTestRepository.has_purchased_test(andrey_user.id, test.id)

        if not already_purchased:
            # –ü–æ–∫—É–ø–∞–µ–º —Ç–µ—Å—Ç
            success = await StudentRepository.spend_coins(andrey_user.id, test.price)
            if success:
                purchase = await StudentBonusTestRepository.create_purchase(andrey_user.id, test.id, test.price)
                print(f"   ‚úÖ –ö—É–ø–ª–µ–Ω –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç: {test.name} (ID –ø–æ–∫—É–ø–∫–∏: {purchase.id})")
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å —Ç–µ—Å—Ç: {test.name}")
        else:
            print(f"   ‚ö†Ô∏è –¢–µ—Å—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω: {test.name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    final_balance = await StudentRepository.get_balance(andrey_user.id)
    print(f"   ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ê–Ω–¥—Ä–µ—è: {final_balance['coins']} –º–æ–Ω–µ—Ç")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    await init_database()
    await init_shop_items()


if __name__ == "__main__":
    asyncio.run(main())
