"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢
"""
import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import (
    SubjectRepository, HomeworkRepository, QuestionRepository,
    AnswerOptionRepository, LessonRepository, MicrotopicRepository
)

logger = logging.getLogger(__name__)


async def create_trial_ent_questions():
    """–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
    
    # –ü—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
    trial_ent_subjects = {
        "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞": 25,      # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20
        "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å": 15,  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": 60,              # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50
        "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è": 60,               # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50
        "–ë–∏–æ–ª–æ–≥–∏—è": 60,                # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50
        "–•–∏–º–∏—è": 60,                   # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": 60,             # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50
        "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è": 60        # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50
    }
    
    subjects = await SubjectRepository.get_all()
    subject_map = {s.name: s for s in subjects}
    
    for subject_name, question_count in trial_ent_subjects.items():
        if subject_name in subject_map:
            subject = subject_map[subject_name]
            print(f"   üìù –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è {subject_name}...")
            
            try:
                await create_questions_for_subject(subject.id, subject_name, question_count)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {question_count} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {subject_name}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {subject_name}: {e}")
        else:
            print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


async def create_questions_for_subject(subject_id: int, subject_name: str, question_count: int):
    """–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É—Ä–æ–∫
    lessons = await LessonRepository.get_by_subject(subject_id)
    if not lessons:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫
        lesson = await LessonRepository.create(
            name=f"–£—Ä–æ–∫ 1 - {subject_name}",
            subject_id=subject_id,
            course_id=1  # –ö—É—Ä—Å –ï–ù–¢
        )
    else:
        lesson = lessons[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    homeworks = await HomeworkRepository.get_by_lesson(lesson.id)
    if not homeworks:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        homework = await HomeworkRepository.create(
            name=f"–î–ó 1 - {subject_name}",
            subject_id=subject_id,
            lesson_id=lesson.id
        )
    else:
        homework = homeworks[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
    microtopics = await MicrotopicRepository.get_by_subject(subject_id)
    if not microtopics:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã
        microtopic_names = [
            "–û—Å–Ω–æ–≤—ã",
            "–ë–∞–∑–æ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è", 
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
            "–¢–µ–æ—Ä–∏—è",
            "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"
        ]
        
        for name in microtopic_names:
            try:
                await MicrotopicRepository.create(
                    name=name,
                    subject_id=subject_id
                )
            except Exception as e:
                # –ú–∏–∫—Ä–æ—Ç–µ–º–∞ —É–∂–µ –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
                if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" not in str(e):
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ç–µ–º—ã {name}: {e}")
                pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–µ–º
        microtopics = await MicrotopicRepository.get_by_subject(subject_id)
    
    microtopic_numbers = [mt.number for mt in microtopics[:5]]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5
    if not microtopic_numbers:
        microtopic_numbers = [1]  # Fallback
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —É–∂–µ –µ—Å—Ç—å
    existing_questions = await QuestionRepository.get_by_homework(homework.id)
    if len(existing_questions) >= question_count:
        return  # –£–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    questions_to_create = question_count - len(existing_questions)
    
    for i in range(questions_to_create):
        question_num = len(existing_questions) + i + 1
        microtopic_num = microtopic_numbers[i % len(microtopic_numbers)]

        # –í–∞—Ä—å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (30-90 —Å–µ–∫—É–Ω–¥)
        time_limits = [30, 45, 60, 75, 90]
        time_limit = time_limits[i % len(time_limits)]

        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        question = await QuestionRepository.create(
            homework_id=homework.id,
            text=f"–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å {question_num} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}",
            subject_id=subject_id,
            microtopic_number=microtopic_num,
            time_limit=time_limit
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = [
            ("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", True),
            ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 1", False),
            ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 2", False),
            ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 3", False)
        ]
        
        for text, is_correct in options:
            await AnswerOptionRepository.create(
                question_id=question.id,
                text=text,
                is_correct=is_correct
            )


async def create_missing_subjects():
    """–°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
    
    required_subjects = [
        "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
        "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", 
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"
    ]
    
    existing_subjects = await SubjectRepository.get_all()
    existing_names = {s.name for s in existing_subjects}
    
    for subject_name in required_subjects:
        if subject_name not in existing_names:
            try:
                subject = await SubjectRepository.create(subject_name)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject.name}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç {subject_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")


async def fix_broken_questions():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
    print("   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")

    subjects = await SubjectRepository.get_all()
    fixed_count = 0

    for subject in subjects:
        questions = await QuestionRepository.get_by_subject(subject.id)

        for question in questions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = await AnswerOptionRepository.get_by_question(question.id)

            if not options:
                # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                answer_options = [
                    ('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', True),
                    ('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 1', False),
                    ('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 2', False),
                    ('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 3', False)
                ]

                for text, is_correct in answer_options:
                    await AnswerOptionRepository.create(
                        question_id=question.id,
                        text=text,
                        is_correct=is_correct
                    )

                fixed_count += 1

    if fixed_count > 0:
        print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –≤–æ–ø—Ä–æ—Å–æ–≤")


async def update_question_times():
    """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
    print("   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞...")

    subjects = await SubjectRepository.get_all()
    time_limits = [30, 45, 60, 75, 90]
    updated_count = 0

    for subject in subjects:
        questions = await QuestionRepository.get_by_subject(subject.id)

        for i, question in enumerate(questions):
            new_time_limit = time_limits[i % len(time_limits)]

            if question.time_limit != new_time_limit:
                await QuestionRepository.update(question.id, time_limit=new_time_limit)
                updated_count += 1

    if updated_count > 0:
        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è {updated_count} –≤–æ–ø—Ä–æ—Å–æ–≤")


async def init_trial_ent_data():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
    print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢...")

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    print("   üìö –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    await create_missing_subjects()

    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    print("   üìù –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢...")
    await create_trial_ent_questions()

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    await fix_broken_questions()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    await update_question_times()

    print("   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    
    from database.database import init_database
    
    async def test():
        await init_database()
        await init_trial_ent_data()
    
    asyncio.run(test())
