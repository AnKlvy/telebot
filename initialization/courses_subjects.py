"""
–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
"""
from database import (
    CourseRepository, SubjectRepository, MicrotopicRepository
)


async def create_courses_and_subjects():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤
        print("üìö –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É—Ä—Å—ã
        existing_courses = await CourseRepository.get_all()
        course_ent = next((c for c in existing_courses if c.name == "–ï–ù–¢"), None)
        course_it = next((c for c in existing_courses if c.name == "IT"), None)

        if not course_ent:
            course_ent = await CourseRepository.create(name="–ï–ù–¢")
            print(f"   ‚úÖ –ö—É—Ä—Å '{course_ent.name}' —Å–æ–∑–¥–∞–Ω (ID: {course_ent.id})")
        else:
            print(f"   ‚ö†Ô∏è –ö—É—Ä—Å '{course_ent.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {course_ent.id})")

        if not course_it:
            course_it = await CourseRepository.create(name="IT")
            print(f"   ‚úÖ –ö—É—Ä—Å '{course_it.name}' —Å–æ–∑–¥–∞–Ω (ID: {course_it.id})")
        else:
            print(f"   ‚ö†Ô∏è –ö—É—Ä—Å '{course_it.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {course_it.id})")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        print("üìñ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        subjects_data = [
            # –ï–ù–¢ –ø—Ä–µ–¥–º–µ—Ç—ã
            {"name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "course": course_ent},
            {"name": "–§–∏–∑–∏–∫–∞", "course": course_ent},
            {"name": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", "course": course_ent},
            {"name": "–•–∏–º–∏—è", "course": course_ent},
            {"name": "–ë–∏–æ–ª–æ–≥–∏—è", "course": course_ent},
            # IT –ø—Ä–µ–¥–º–µ—Ç—ã
            {"name": "Python", "course": course_it},
            {"name": "JavaScript", "course": course_it},
            {"name": "Java", "course": course_it},
        ]

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        existing_subjects = await SubjectRepository.get_all()
        created_subjects = {}

        for subject_data in subjects_data:
            subject_name = subject_data["name"]
            existing_subject = next((s for s in existing_subjects if s.name == subject_name), None)

            if existing_subject:
                created_subjects[subject_name] = existing_subject
                print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_subject.id})")
            else:
                subject = await SubjectRepository.create(name=subject_name)
                created_subjects[subject_name] = subject
                print(f"   ‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —Å–æ–∑–¥–∞–Ω (ID: {subject.id})")

        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫ –∫—É—Ä—Å–∞–º
        print("üîó –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫ –∫—É—Ä—Å–∞–º...")
        
        # –ï–ù–¢ –ø—Ä–µ–¥–º–µ—Ç—ã
        ent_subjects = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è"]
        for subject_name in ent_subjects:
            if subject_name in created_subjects:
                success = await SubjectRepository.add_to_course(created_subjects[subject_name].id, course_ent.id)
                if success:
                    print(f"   ‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É '–ï–ù–¢'")
                else:
                    print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É '–ï–ù–¢'")

        # IT –ø—Ä–µ–¥–º–µ—Ç—ã (–≤–∫–ª—é—á–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫—É)
        it_subjects = ["Python", "JavaScript", "Java", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]
        for subject_name in it_subjects:
            if subject_name in created_subjects:
                success = await SubjectRepository.add_to_course(created_subjects[subject_name].id, course_it.id)
                if success:
                    print(f"   ‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É 'IT'")
                else:
                    print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É 'IT'")

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        print("üî¨ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–µ–º...")
        microtopics_data = {
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [
                "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è", "–õ–æ–≥–∞—Ä–∏—Ñ–º—ã", "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ",
                "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã", "–ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–§—É–Ω–∫—Ü–∏–∏"
            ],
            "–§–∏–∑–∏–∫–∞": [
                "–ú–µ—Ö–∞–Ω–∏–∫–∞", "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–ú–∞–≥–Ω–µ—Ç–∏–∑–º", "–û–ø—Ç–∏–∫–∞",
                "–ê—Ç–æ–º–Ω–∞—è —Ñ–∏–∑–∏–∫–∞", "–ö–æ–ª–µ–±–∞–Ω–∏—è", "–í–æ–ª–Ω—ã", "–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞", "–î–∏–Ω–∞–º–∏–∫–∞"
            ],
            "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞": [
                "–î—Ä–µ–≤–Ω–∏–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ", "–ö–∞–∑–∞—Ö—Å–∫–æ–µ —Ö–∞–Ω—Å—Ç–≤–æ", "–ö–æ–ª–æ–Ω–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "–°–æ–≤–µ—Ç—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥",
                "–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", "–ö—É–ª—å—Ç—É—Ä–∞", "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–ü–æ–ª–∏—Ç–∏–∫–∞", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å"
            ],
            "–•–∏–º–∏—è": [
                "–ê—Ç–æ–º—ã", "–ú–æ–ª–µ–∫—É–ª—ã", "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞", "–•–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏", "–†–µ–∞–∫—Ü–∏–∏",
                "–ö–∏—Å–ª–æ—Ç—ã", "–û—Å–Ω–æ–≤–∞–Ω–∏—è", "–°–æ–ª–∏", "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è", "–ù–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è"
            ],
            "–ë–∏–æ–ª–æ–≥–∏—è": [
                "–ö–ª–µ—Ç–∫–∞", "–ì–µ–Ω–µ—Ç–∏–∫–∞", "–≠–≤–æ–ª—é—Ü–∏—è", "–≠–∫–æ–ª–æ–≥–∏—è", "–ê–Ω–∞—Ç–æ–º–∏—è",
                "–§–∏–∑–∏–æ–ª–æ–≥–∏—è", "–ë–æ—Ç–∞–Ω–∏–∫–∞", "–ó–æ–æ–ª–æ–≥–∏—è", "–ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è", "–ë–∏–æ—Ö–∏–º–∏—è"
            ],
            "Python": [
                "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "–£—Å–ª–æ–≤–∏—è", "–¶–∏–∫–ª—ã", "–§—É–Ω–∫—Ü–∏–∏",
                "–ö–ª–∞—Å—Å—ã", "–ú–æ–¥—É–ª–∏", "–ò—Å–∫–ª—é—á–µ–Ω–∏—è", "–§–∞–π–ª—ã", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏"
            ],
            "JavaScript": [
                "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "–§—É–Ω–∫—Ü–∏–∏", "–û–±—ä–µ–∫—Ç—ã", "–ú–∞—Å—Å–∏–≤—ã", "DOM",
                "–°–æ–±—ã—Ç–∏—è", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å", "–ü—Ä–æ–º–∏—Å—ã", "Fetch", "ES6+"
            ],
            "Java": [
                "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "–ö–ª–∞—Å—Å—ã", "–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã", "–ö–æ–ª–ª–µ–∫—Ü–∏–∏",
                "–ò—Å–∫–ª—é—á–µ–Ω–∏—è", "–ü–æ—Ç–æ–∫–∏", "Generics", "–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏", "Lambda"
            ]
        }

        for subject_name, topics in microtopics_data.items():
            if subject_name in created_subjects:
                subject = created_subjects[subject_name]
                for topic_name in topics:
                    try:
                        microtopic = await MicrotopicRepository.create(
                            name=topic_name,
                            subject_id=subject.id
                        )
                        print(f"   ‚úÖ –ú–∏–∫—Ä–æ—Ç–µ–º–∞ '{topic_name}' —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}' (–Ω–æ–º–µ—Ä: {microtopic.number})")
                    except ValueError as e:
                        print(f"   ‚ö†Ô∏è –ú–∏–∫—Ä–æ—Ç–µ–º–∞ '{topic_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}'")

        print(f"üìö –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return created_subjects, course_ent, course_it

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
        return {}, None, None
