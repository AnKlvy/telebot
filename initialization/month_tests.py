"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞
"""
from database import MonthTestRepository, QuestionRepository, AnswerOptionRepository, MicrotopicRepository


async def add_test_month_tests(created_subjects):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        from database import CourseRepository

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç—ã –º–µ—Å—è—Ü–∞
        existing_tests = await MonthTestRepository.get_all()
        if existing_tests:
            print("   ‚ö†Ô∏è –¢–µ—Å—Ç—ã –º–µ—Å—è—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
            return
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞
        month_tests_data = [
            {
                "subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "month": "–Ø–Ω–≤–∞—Ä—å",
                "name": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ",
                "description": "–¢–µ—Å—Ç –ø–æ –æ—Å–Ω–æ–≤–∞–º –∞–ª–≥–µ–±—Ä—ã –∑–∞ —è–Ω–≤–∞—Ä—å"
            },
            {
                "subject": "–§–∏–∑–∏–∫–∞", 
                "month": "–Ø–Ω–≤–∞—Ä—å",
                "name": "–ú–µ—Ö–∞–Ω–∏–∫–∞ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ",
                "description": "–¢–µ—Å—Ç –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ –∑–∞ —è–Ω–≤–∞—Ä—å"
            },
            {
                "subject": "Python",
                "month": "–Ø–Ω–≤–∞—Ä—å", 
                "name": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "description": "–¢–µ—Å—Ç –ø–æ –æ—Å–Ω–æ–≤–∞–º Python –∑–∞ —è–Ω–≤–∞—Ä—å"
            },
            {
                "subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "month": "–§–µ–≤—Ä–∞–ª—å",
                "name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–≥—É—Ä—ã",
                "description": "–¢–µ—Å—Ç –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å"
            },
            {
                "subject": "–•–∏–º–∏—è",
                "month": "–§–µ–≤—Ä–∞–ª—å",
                "name": "–•–∏–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏",
                "description": "–¢–µ—Å—Ç –ø–æ —Ö–∏–º–∏—á–µ—Å–∫–∏–º —Ä–µ–∞–∫—Ü–∏—è–º –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å"
            }
        ]

        created_count = 0
        
        for test_data in month_tests_data:
            subject_name = test_data["subject"]
            if subject_name not in created_subjects:
                print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
                
            subject = created_subjects[subject_name]

            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
            all_courses = await CourseRepository.get_all()
            course_id = None
            for course in all_courses:
                if any(s.id == subject.id for s in course.subjects):
                    course_id = course.id
                    break

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞ (—Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–æ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            month_test = await MonthTestRepository.create(
                name=test_data["name"],
                course_id=course_id,
                subject_id=subject.id,
                test_type='entry'
            )

            print(f"   ‚úÖ –¢–µ—Å—Ç –º–µ—Å—è—Ü–∞ '{month_test.name}' —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}' ({test_data['month']})")
            created_count += 1

        print(f"üóìÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ: {created_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞: {e}")
