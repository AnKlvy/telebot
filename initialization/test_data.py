"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
from database import (
    StudentRepository, HomeworkRepository, QuestionRepository, 
    HomeworkResultRepository, QuestionResultRepository, AnswerOptionRepository
)


async def add_test_homework_results():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        existing_results = await HomeworkResultRepository.get_all()
        if existing_results:
            print("   ‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = await StudentRepository.get_all()
        if not students:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        homeworks = await HomeworkRepository.get_all()
        if not homeworks:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        question_repo = QuestionRepository()
        questions = await question_repo.get_all()
        if not questions:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        created_results_count = 0
        created_question_results_count = 0

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        for student in students:
            print(f"üìä –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ '{student.user.name}':")

            # –ü–æ–ª—É—á–∞–µ–º –î–ó —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–∞
            if not student.groups:
                print(f"   ‚ö†Ô∏è  –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.user.name} –Ω–µ—Ç –≥—Ä—É–ø–ø")
                continue

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–∞
            subject_ids = []
            subject_names = []
            for group in student.groups:
                if group.subject:
                    subject_ids.append(group.subject_id)
                    subject_names.append(group.subject.name)

            if not subject_ids:
                print(f"   ‚ö†Ô∏è  –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.user.name} –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö")
                continue

            subject_homeworks = [hw for hw in homeworks if hw.subject_id in subject_ids]
            if not subject_homeworks:
                print(f"   ‚ö†Ô∏è  –ù–µ—Ç –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º {', '.join(subject_names)}")
                continue

            import random
            if student.user.telegram_id == 955518340:  # –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤
                print(f"   –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {student.user.name}")
                max_homeworks = len(subject_homeworks)
                num_homeworks = max_homeworks  # –í—ã–ø–æ–ª–Ω—è–µ—Ç –í–°–ï –î–ó
                student_homeworks = subject_homeworks  # –í—Å–µ –î–ó
                is_excellent_student = True
            elif student.user.telegram_id == 333444555:  # –ú—É—Ö–∞–Ω–±–µ—Ç–∂–∞–Ω –û–ª–∂–∞—Å
                print(f"   –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {student.user.name}")
                max_homeworks = len(subject_homeworks)
                num_homeworks = max_homeworks  # –í—ã–ø–æ–ª–Ω—è–µ—Ç –í–°–ï –î–ó
                student_homeworks = subject_homeworks  # –í—Å–µ –î–ó
                is_excellent_student = True
            else:
                # –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–ó –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–æ—Ç 1 –¥–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
                max_homeworks = len(subject_homeworks)
                num_homeworks = random.randint(1, max_homeworks)  # –û—Ç 1 –¥–æ –≤—Å–µ—Ö –î–ó
                student_homeworks = random.sample(subject_homeworks, num_homeworks)  # –°–ª—É—á–∞–π–Ω—ã–µ –î–ó
                is_excellent_student = False

            print(f"   üìö –í—ã–ø–æ–ª–Ω—è–µ—Ç {num_homeworks} –∏–∑ {max_homeworks} –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º {', '.join(subject_names)}")

            for homework in student_homeworks:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –î–ó
                    homework_questions = await question_repo.get_by_homework(homework.id)
                    if not homework_questions:
                        continue

                    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —É—Å–ø–µ—Ö–∞
                    if is_excellent_student:
                        success_rate = random.choice([0.9, 0.95, 1.0, 1.0, 1.0])  # –í –æ—Å–Ω–æ–≤–Ω–æ–º 100%
                    else:
                        success_rate = random.choice([0.5, 0.7, 0.8, 0.9, 1.0])  # 50%, 70%, 80%, 90%, 100%

                    total_questions = len(homework_questions)
                    correct_answers = int(total_questions * success_rate)

                    # –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    points_earned = total_questions * 3 if success_rate == 1.0 else 0
                    points_awarded = success_rate == 1.0

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –î–ó
                    homework_result = await HomeworkResultRepository.create(
                        student_id=student.id,
                        homework_id=homework.id,
                        total_questions=total_questions,
                        correct_answers=correct_answers,
                        points_earned=points_earned,
                        is_first_attempt=True,
                        points_awarded=points_awarded
                    )

                    created_results_count += 1

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    question_results_data = []
                    correct_count = 0

                    for question in homework_questions:
                        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
                        answer_options = await AnswerOptionRepository.get_by_question(question.id)
                        if not answer_options:
                            continue

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                        is_correct = correct_count < correct_answers
                        if is_correct:
                            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                            selected_answer = next((opt for opt in answer_options if opt.is_correct), None)
                            correct_count += 1
                        else:
                            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                            wrong_answers = [opt for opt in answer_options if not opt.is_correct]
                            selected_answer = random.choice(wrong_answers) if wrong_answers else answer_options[0]

                        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                        time_spent = random.randint(5, 25)

                        question_results_data.append({
                            'question_id': question.id,
                            'selected_answer_id': selected_answer.id if selected_answer else None,
                            'is_correct': is_correct,
                            'time_spent': time_spent,
                            'microtopic_number': question.microtopic_number
                        })

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
                    if question_results_data:
                        await QuestionResultRepository.create_multiple(
                            homework_result.id,
                            question_results_data
                        )
                        created_question_results_count += len(question_results_data)

                    percentage = round((correct_answers / total_questions * 100), 1) if total_questions > 0 else 0
                    print(f"      ‚úÖ –î–ó '{homework.name}': {correct_answers}/{total_questions} ({percentage}%) - {points_earned} –±–∞–ª–ª–æ–≤")

                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –î–ó '{homework.name}': {e}")
                    continue

        print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –î–ó: {created_results_count}")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤: {created_question_results_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –î–ó: {e}")


async def create_results_for_andrey():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ê–Ω–¥—Ä–µ—è –ö–ª–∏–º–æ–≤–∞"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ê–Ω–¥—Ä–µ—è –ö–ª–∏–º–æ–≤–∞
        andrey = await StudentRepository.get_by_telegram_id(955518340)
        if not andrey:
            print("   ‚ö†Ô∏è –ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ (Python)
        has_python_group = False
        if andrey.groups:
            for group in andrey.groups:
                if group.subject and group.subject.name == "Python":
                    has_python_group = True
                    break
        
        if not has_python_group:
            print(f"   üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ê–Ω–¥—Ä–µ—è –≤ –≥—Ä—É–ø–ø—É Python...")
            # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É PY-1
            from database import GroupRepository
            groups = await GroupRepository.get_all()
            python_group = next((g for g in groups if g.name == "PY-1"), None)
            if python_group:
                await StudentRepository.add_groups(andrey.id, [python_group.id])
                andrey = await StudentRepository.get_by_id(andrey.id)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                print(f"   ‚úÖ –ê–Ω–¥—Ä–µ–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {python_group.name}")
            else:
                print("   ‚ùå –ì—Ä—É–ø–ø–∞ PY-1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

        print(f"   üë§ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {andrey.user.name}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –î–ó –ø–æ Python
        homeworks = await HomeworkRepository.get_all()
        # –ù–∞—Ö–æ–¥–∏–º ID –ø—Ä–µ–¥–º–µ—Ç–∞ Python –∏–∑ –≥—Ä—É–ø–ø –ê–Ω–¥—Ä–µ—è
        python_subject_id = None
        for group in andrey.groups:
            if group.subject and group.subject.name == "Python":
                python_subject_id = group.subject.id
                break
        
        if not python_subject_id:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç Python –≤ –≥—Ä—É–ø–ø–∞—Ö –ê–Ω–¥—Ä–µ—è")
            return
            
        python_homeworks = [hw for hw in homeworks if hw.subject_id == python_subject_id]

        if not python_homeworks:
            print("   ‚ùå –ù–µ—Ç –î–ó –ø–æ Python")
            return

        question_repo = QuestionRepository()
        created_results = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ê–Ω–¥—Ä–µ—è
        existing_results = await HomeworkResultRepository.get_by_student(andrey.id)
        if existing_results:
            print(f"   ‚ö†Ô∏è –£ –ê–Ω–¥—Ä–µ—è —É–∂–µ –µ—Å—Ç—å {len(existing_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
            return

        for homework in python_homeworks:

            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –î–ó
            homework_questions = await question_repo.get_by_homework(homework.id)
            if not homework_questions:
                continue

            total_questions = len(homework_questions)
            correct_answers = total_questions  # 100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            points_earned = total_questions * 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –î–ó
            homework_result = await HomeworkResultRepository.create(
                student_id=andrey.id,
                homework_id=homework.id,
                total_questions=total_questions,
                correct_answers=correct_answers,
                points_earned=points_earned,
                is_first_attempt=True,
                points_awarded=True
            )

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            question_results_data = []

            for question in homework_questions:
                # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
                answer_options = await AnswerOptionRepository.get_by_question(question.id)
                if not answer_options:
                    continue

                # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                correct_answer = next((opt for opt in answer_options if opt.is_correct), None)

                # –ë—ã—Å—Ç—Ä–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–∫–∞–∫ —É –æ–ø—ã—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
                import random
                time_spent = random.randint(5, 15)  # 5-15 —Å–µ–∫—É–Ω–¥

                question_results_data.append({
                    'question_id': question.id,
                    'selected_answer_id': correct_answer.id if correct_answer else None,
                    'is_correct': True,
                    'time_spent': time_spent,
                    'microtopic_number': question.microtopic_number
                })

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
            if question_results_data:
                await QuestionResultRepository.create_multiple(
                    homework_result.id,
                    question_results_data
                )

            print(f"   ‚úÖ –î–ó '{homework.name}': {correct_answers}/{total_questions} (100%) - {points_earned} –±–∞–ª–ª–æ–≤")
            created_results += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –∏ —É—Ä–æ–≤–µ–Ω—å
        await StudentRepository.update_points_and_level(andrey.id)

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final_andrey = await StudentRepository.get_by_id(andrey.id)
        if final_andrey:
            print(f"   üéâ –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {created_results}")
            print(f"   üíé –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã: {final_andrey.points}")
            print(f"   üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {final_andrey.level}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ê–Ω–¥—Ä–µ—è: {e}")
