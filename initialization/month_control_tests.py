"""
–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞
"""
from database import MonthTestRepository, SubjectRepository, CourseRepository


async def create_month_control_tests():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ –¥–ª—è –≥—Ä—É–ø–ø –ú-1, –ú-2 –∏ PY-1"""
    try:
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã
        entry_tests = await MonthTestRepository.get_all()
        entry_tests = [t for t in entry_tests if t.test_type == 'entry']
        
        if not entry_tests:
            print("   ‚ö†Ô∏è –ù–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö")
            return
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö)
        control_tests_data = [
            # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –¥–ª—è –≥—Ä—É–ø–ø –ú-1 –∏ –ú-2
            {
                "entry_test_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ",
                "control_test_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
            },
            {
                "entry_test_name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–≥—É—Ä—ã", 
                "control_test_name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–≥—É—Ä—ã (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
            },
            # Python - –¥–ª—è –≥—Ä—É–ø–ø—ã PY-1
            {
                "entry_test_name": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "control_test_name": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "subject_name": "Python"
            }
        ]
        
        created_count = 0
        
        for test_data in control_tests_data:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç
            entry_test = None
            for test in entry_tests:
                if (test.name == test_data["entry_test_name"] and 
                    test.subject.name == test_data["subject_name"]):
                    entry_test = test
                    break
            
            if not entry_test:
                print(f"   ‚ö†Ô∏è –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç '{test_data['entry_test_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
            existing_control = None
            all_tests = await MonthTestRepository.get_all()
            for test in all_tests:
                if (test.name == test_data["control_test_name"] and 
                    test.subject_id == entry_test.subject_id and
                    test.test_type == 'control'):
                    existing_control = test
                    break
            
            if existing_control:
                print(f"   ‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç '{test_data['control_test_name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
            control_test = await MonthTestRepository.create(
                name=test_data["control_test_name"],
                course_id=entry_test.course_id,
                subject_id=entry_test.subject_id,
                test_type='control'
            )
            
            print(f"   ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç '{control_test.name}' —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{test_data['subject_name']}'")
            created_count += 1
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ: {created_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞: {e}")
        import traceback
        traceback.print_exc()


async def create_month_control_test_results():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞"""
    try:
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞...")
        
        from database import MonthEntryTestResultRepository, StudentRepository
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        all_tests = await MonthTestRepository.get_all()
        control_tests = [t for t in all_tests if t.test_type == 'control']
        
        if not control_tests:
            print("   ‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = await StudentRepository.get_all()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å)
        control_test_data = [
            # –ì—Ä—É–ø–ø–∞ –ú-1 (–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            {
                "student_name": "–ê—Ä—É–∂–∞–Ω –ê—Ö–º–µ—Ç–æ–≤–∞",
                "control_test_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 90,  # –£–ª—É—á—à–µ–Ω–∏–µ —Å 77% –¥–æ 90%
            },
            {
                "student_name": "–ê—Ä—É–∂–∞–Ω –ê—Ö–º–µ—Ç–æ–≤–∞",
                "control_test_name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–≥—É—Ä—ã (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 78,  # –£–ª—É—á—à–µ–Ω–∏–µ —Å 66% –¥–æ 78%
            },
            {
                "student_name": "–ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤",
                "control_test_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 95,  # –£–ª—É—á—à–µ–Ω–∏–µ —Å 88% –¥–æ 95%
            },
            {
                "student_name": "–ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤",
                "control_test_name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–≥—É—Ä—ã (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 85,  # –£–ª—É—á—à–µ–Ω–∏–µ —Å 77% –¥–æ 85%
            },
            
            # –ì—Ä—É–ø–ø–∞ –ú-2 (–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞) - —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            {
                "student_name": "–ú—É—Ö–∞–Ω–±–µ—Ç–∂–∞–Ω –û–ª–∂–∞—Å",
                "control_test_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 82,  # –£–ª—É—á—à–µ–Ω–∏–µ —Å 77% –¥–æ 82%
            },
            {
                "student_name": "–ú—É—Ö–∞–Ω–±–µ—Ç–∂–∞–Ω –û–ª–∂–∞—Å",
                "control_test_name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–≥—É—Ä—ã (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 50,  # –£—Ö—É–¥—à–µ–Ω–∏–µ —Å 55% –¥–æ 50%
            },
            {
                "student_name": "–ï—Ä–∞—Å—ã–ª –ú—É—Ö–∞–º–µ–¥–æ–≤",
                "control_test_name": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 60,  # –£–ª—É—á—à–µ–Ω–∏–µ —Å 44% –¥–æ 60%
            },
            {
                "student_name": "–ï—Ä–∞—Å—ã–ª –ú—É—Ö–∞–º–µ–¥–æ–≤",
                "control_test_name": "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–≥—É—Ä—ã (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 30,  # –£—Ö—É–¥—à–µ–Ω–∏–µ —Å 33% –¥–æ 30%
            },
            
            # –ì—Ä—É–ø–ø–∞ PY-1 (Python) - —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            {
                "student_name": "–ú—É—Ö–∞–Ω–±–µ—Ç–∂–∞–Ω –û–ª–∂–∞—Å",
                "control_test_name": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 92,  # –£–ª—É—á—à–µ–Ω–∏–µ —Å 88% –¥–æ 92%
            },
            {
                "student_name": "–ê–Ω–¥—Ä–µ–π –ö–ª–∏–º–æ–≤",
                "control_test_name": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–ö–æ–Ω—Ç—Ä–æ–ª—å)",
                "correct_percentage": 97,  # –£–ª—É—á—à–µ–Ω–∏–µ —Å 88% –¥–æ 97%
            }
        ]
        
        created_count = 0
        
        for data in control_test_data:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = None
            for s in students:
                if s.user.name == data["student_name"]:
                    student = s
                    break
            
            if not student:
                print(f"   ‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç '{data['student_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
            control_test = None
            for test in control_tests:
                if test.name == data["control_test_name"]:
                    control_test = test
                    break
            
            if not control_test:
                print(f"   ‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç '{data['control_test_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ —É–∂–µ —Å—Ç—É–¥–µ–Ω—Ç —ç—Ç–æ—Ç —Ç–µ—Å—Ç
            if await MonthEntryTestResultRepository.has_student_taken_test(student.id, control_test.id):
                print(f"   ‚ö†Ô∏è {student.user.name} —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç '{control_test.name}'")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_questions = 9  # 3 –º–∏–∫—Ä–æ—Ç–µ–º—ã * 3 –≤–æ–ø—Ä–æ—Å–∞
            target_correct = int(total_questions * data["correct_percentage"] / 100)
            
            question_results = []
            for i in range(total_questions):
                microtopic_number = (i // 3) + 1  # –ú–∏–∫—Ä–æ—Ç–µ–º—ã 1, 2, 3
                is_correct = i < target_correct
                
                question_results.append({
                    'question_id': 1,  # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞
                    'selected_answer_id': 1,  # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π ID –æ—Ç–≤–µ—Ç–∞
                    'is_correct': is_correct,
                    'time_spent': 25,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                    'microtopic_number': microtopic_number
                })
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            test_result = await MonthEntryTestResultRepository.create_test_result(
                student_id=student.id,
                month_test_id=control_test.id,
                question_results=question_results
            )
            
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω: {student.user.name} - {control_test.name} ({test_result.score_percentage}%)")
            created_count += 1
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ: {created_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞: {e}")
        import traceback
        traceback.print_exc()
