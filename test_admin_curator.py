#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
"""
import asyncio
import sys
import os
from unittest.mock import AsyncMock, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import init_database
from admin.handlers.curators import process_curator_telegram_id
from admin.utils.common import check_existing_user_for_role_assignment
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, User


async def test_curator_handler():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    mock_user = User(
        id=955518340,  # –í–∞—à Telegram ID (–∞–¥–º–∏–Ω)
        is_bot=False,
        first_name="–ê–Ω–¥—Ä–µ–π",
        username="admin_user"
    )
    
    mock_message = MagicMock(spec=Message)
    mock_message.text = "955518340"  # –í–∞—à Telegram ID
    mock_message.from_user = mock_user
    mock_message.answer = AsyncMock()
    
    mock_state = AsyncMock(spec=FSMContext)
    mock_state.update_data = AsyncMock()
    mock_state.set_state = AsyncMock()
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å Telegram ID: {mock_message.text}")
    print(f"üîç –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {mock_user.id}")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await process_curator_telegram_id(mock_message, mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìû message.answer –≤—ã–∑–≤–∞–Ω {mock_message.answer.call_count} —Ä–∞–∑(–∞)")
        
        if mock_message.answer.call_count > 0:
            for i, call in enumerate(mock_message.answer.call_args_list):
                args, kwargs = call
                print(f"üìû –í—ã–∑–æ–≤ {i+1}: {kwargs.get('text', args[0] if args else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")
        import traceback
        traceback.print_exc()


async def test_check_function_directly():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\nüß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ check_existing_user_for_role_assignment")
    print("=" * 70)
    
    await init_database()
    
    # –¢–µ—Å—Ç 1: –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–±—è
    result = await check_existing_user_for_role_assignment(
        telegram_id=955518340,
        target_role='curator', 
        current_user_telegram_id=955518340
    )
    
    print(f"üîç –¢–µ—Å—Ç 1 - –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–±—è:")
    print(f"   exists: {result['exists']}")
    print(f"   can_assign: {result['can_assign']}")
    print(f"   message: {result['message']}")


if __name__ == "__main__":
    asyncio.run(test_check_function_directly())
    asyncio.run(test_curator_handler())
