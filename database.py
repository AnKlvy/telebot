import asyncio
import asyncpg
from typing import Optional, Dict, List, Any
from os import getenv
from dotenv import load_dotenv

load_dotenv()

# –§–æ—Ä–º–∏—Ä—É–µ–º DATABASE_URL –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
POSTGRES_USER = getenv("POSTGRES_USER", "telebot_user")
POSTGRES_PASSWORD = getenv("POSTGRES_PASSWORD", "your_secure_password")
POSTGRES_DB = getenv("POSTGRES_DB", "telebot")
POSTGRES_HOST = getenv("POSTGRES_HOST", "postgres")
POSTGRES_PORT = getenv("POSTGRES_PORT", "5432")

DATABASE_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"

class Database:
    def __init__(self):
        self.pool: Optional[asyncpg.Pool] = None
    
    async def connect(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.pool = await asyncpg.create_pool(DATABASE_URL)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.pool:
            await self.pool.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def execute(self, query: str, *args) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.pool:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        async with self.pool.acquire() as connection:
            return await connection.execute(query, *args)
    
    async def fetch(self, query: str, *args) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫"""
        if not self.pool:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        async with self.pool.acquire() as connection:
            rows = await connection.fetch(query, *args)
            return [dict(row) for row in rows]
    
    async def fetchrow(self, query: str, *args) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        if not self.pool:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        async with self.pool.acquire() as connection:
            row = await connection.fetchrow(query, *args)
            return dict(row) if row else None
    
    async def fetchval(self, query: str, *args) -> Any:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if not self.pool:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        async with self.pool.acquire() as connection:
            return await connection.fetchval(query, *args)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async def get_user_by_telegram_id(telegram_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    return await db.fetchrow(
        "SELECT * FROM users WHERE telegram_id = $1", 
        telegram_id
    )

async def create_user(telegram_id: int, name: str, role: str = 'student') -> Dict:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await db.fetchrow(
        """INSERT INTO users (telegram_id, name, role) 
           VALUES ($1, $2, $3) 
           RETURNING *""",
        telegram_id, name, role
    )

async def get_user_role(telegram_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    role = await db.fetchval(
        "SELECT role FROM users WHERE telegram_id = $1", 
        telegram_id
    )
    return role or 'student'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏
async def get_all_courses() -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã"""
    return await db.fetch("SELECT * FROM courses ORDER BY name")

async def add_course(name: str, description: str = None) -> Dict:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å"""
    return await db.fetchrow(
        """INSERT INTO courses (name, description) 
           VALUES ($1, $2) 
           RETURNING *""",
        name, description
    )

async def remove_course(course_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å"""
    result = await db.execute("DELETE FROM courses WHERE id = $1", course_id)
    return result == "DELETE 1"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
async def get_subjects_by_course(course_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∫—É—Ä—Å—É"""
    return await db.fetch(
        "SELECT * FROM subjects WHERE course_id = $1 ORDER BY name", 
        course_id
    )

async def get_all_subjects() -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
    return await db.fetch("SELECT * FROM subjects ORDER BY name")

async def add_subject(name: str, course_id: int = None) -> Dict:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç"""
    return await db.fetchrow(
        """INSERT INTO subjects (name, course_id) 
           VALUES ($1, $2) 
           RETURNING *""",
        name, course_id
    )

async def remove_subject(subject_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"""
    result = await db.execute("DELETE FROM subjects WHERE id = $1", subject_id)
    return result == "DELETE 1"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
async def get_groups_by_subject(subject_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    return await db.fetch(
        "SELECT * FROM groups WHERE subject_id = $1 ORDER BY name", 
        subject_id
    )

async def add_group(name: str, subject_id: int) -> Dict:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
    return await db.fetchrow(
        """INSERT INTO groups (name, subject_id) 
           VALUES ($1, $2) 
           RETURNING *""",
        name, subject_id
    )

async def remove_group(group_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"""
    result = await db.execute("DELETE FROM groups WHERE id = $1", group_id)
    return result == "DELETE 1"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
async def get_all_bonus_tasks() -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    return await db.fetch("SELECT * FROM bonus_tasks ORDER BY created_at DESC")

async def add_bonus_task(title: str, description: str, points: int = 0) -> Dict:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    return await db.fetchrow(
        """INSERT INTO bonus_tasks (title, description, points) 
           VALUES ($1, $2, $3) 
           RETURNING *""",
        title, description, points
    )

async def remove_bonus_task(task_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    result = await db.execute("DELETE FROM bonus_tasks WHERE id = $1", task_id)
    return result == "DELETE 1"

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    await db.connect()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async def close_database():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    await db.disconnect()
