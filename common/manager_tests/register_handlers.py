import logging
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from .handlers import (
    enter_test_name, start_adding_questions, add_question_photo, process_question_photo, request_topic,
    select_correct_answer, save_question, save_question_with_time, add_more_question,
    finish_adding_questions, process_topic, enter_answer_options
)
import inspect

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

def register_test_handlers(router: Router, states_group, role: str):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    logging.info(f"üîß –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í: role={role}, states_group={states_group.__name__}")

    @router.callback_query(states_group.select_lesson, F.data.startswith("lesson_"))
    async def role_enter_test_name(callback: CallbackQuery, state: FSMContext):
        await log(inspect.currentframe().f_code.co_name, role, state)
        await enter_test_name(callback, state)
        await state.set_state(states_group.enter_test_name)

    @router.message(states_group.enter_test_name)
    async def role_start_adding_questions(message: Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        current_state = await state.get_state()
        expected_state = f"{states_group.__name__}:enter_test_name"

        logging.info(f"üîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø: current={current_state}, expected={expected_state}")

        if current_state != expected_state:
            logging.info(f"‚ùå –°–û–°–¢–û–Ø–ù–ò–ï –ù–ï –°–û–í–ü–ê–î–ê–ï–¢ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
            return

        await log(inspect.currentframe().f_code.co_name, role, state)
        await start_adding_questions(message, state)
        # –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"

    @router.message(states_group.enter_question_text)
    async def role_add_question_photo(message: Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        current_state = await state.get_state()
        expected_state = f"{states_group.__name__}:enter_question_text"

        if current_state != expected_state:
            return

        await log(inspect.currentframe().f_code.co_name, role, state)
        await add_question_photo(message, state)
        # –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"

    @router.callback_query(states_group.add_question_photo, F.data == "skip_photo")
    async def skip_photo(callback: CallbackQuery, state: FSMContext):
        await log(inspect.currentframe().f_code.co_name, role, state)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        current_state = await state.get_state()
        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê skip_photo: role={role}, current_state={current_state}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç –±–æ–Ω—É—Å–Ω—ã–º
        if role == "bonus_test":
            logging.info("‚úÖ –ë–û–ù–£–°–ù–´–ô –¢–ï–°–¢ –û–ë–ù–ê–†–£–ñ–ï–ù - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É")
            # –î–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã
            await enter_answer_options(callback)
            await state.set_state(states_group.enter_answer_options)
        else:
            logging.info("‚ùå –û–ë–´–ß–ù–´–ô –¢–ï–°–¢ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É")
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É
            await state.set_state(states_group.request_topic)
            await request_topic(callback.message, state)

    @router.message(states_group.add_question_photo, F.photo)
    async def role_process_question_photo(message: Message, state: FSMContext):
        await log(inspect.currentframe().f_code.co_name, role, state)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        current_state = await state.get_state()
        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê process_question_photo: role={role}, current_state={current_state}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        await process_question_photo(message, state)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç –±–æ–Ω—É—Å–Ω—ã–º
        if role == "bonus_test":
            logging.info("‚úÖ –ë–û–ù–£–°–ù–´–ô –¢–ï–°–¢ –û–ë–ù–ê–†–£–ñ–ï–ù - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ")
            # –î–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã
            await state.set_state(states_group.enter_answer_options)
        else:
            logging.info("‚ùå –û–ë–´–ß–ù–´–ô –¢–ï–°–¢ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ")
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∏–∫—Ä–æ—Ç–µ–º—ã
            await state.set_state(states_group.request_topic)

    @router.message(states_group.request_topic)
    async def role_process_topic(message: Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        current_state = await state.get_state()
        expected_state = f"{states_group.__name__}:request_topic"

        if current_state != expected_state:
            return

        await log(inspect.currentframe().f_code.co_name, role, state)
        await process_topic(message, state, states_group)





    @router.message(states_group.enter_answer_options)
    async def role_select_correct_answer(message: Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        current_state = await state.get_state()
        expected_state = f"{states_group.__name__}:enter_answer_options"

        if current_state != expected_state:
            return

        await log(inspect.currentframe().f_code.co_name, role, state)
        await select_correct_answer(message, state, states_group)

    @router.callback_query(states_group.select_correct_answer, F.data.startswith("correct_"))
    async def role_save_question(callback: CallbackQuery, state: FSMContext):
        await log(inspect.currentframe().f_code.co_name, role, state)
        await save_question(callback, state)
        await state.set_state(states_group.set_time_limit)

    @router.callback_query(states_group.set_time_limit, F.data.startswith("time_"))
    async def role_save_question_with_time(callback: CallbackQuery, state: FSMContext):
        await log(inspect.currentframe().f_code.co_name, role, state)
        await save_question_with_time(callback, state)
        await state.set_state(states_group.add_question)

    @router.callback_query(states_group.add_question, F.data == "add_more_question")
    async def role_add_more_question(callback: CallbackQuery, state: FSMContext):
        await log(inspect.currentframe().f_code.co_name, role, state)
        await add_more_question(callback, state)
        await state.set_state(states_group.enter_question_text)

    @router.callback_query(states_group.add_question, F.data == "finish_adding_questions")
    async def role_finish_adding_questions(callback: CallbackQuery, state: FSMContext):
        await log(inspect.currentframe().f_code.co_name, role, state)
        await finish_adding_questions(callback, state)
        await state.set_state(states_group.confirm_test)

async def log(name, role, state):
    logging.info(f"–í–´–ó–û–í: {name} | –†–û–õ–¨: {role} | –°–û–°–¢–û–Ø–ù–ò–ï: {await state.get_state()}")

