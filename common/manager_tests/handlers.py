import logging
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from .keyboards import (
    get_photo_skip_kb, get_correct_answer_kb,
    get_time_limit_kb, get_add_question_kb,
    get_confirm_test_kb
)
from manager.keyboards.homework import get_photo_edit_kb
from common.keyboards import get_home_and_back_kb, get_home_kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


async def enter_test_name(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –î–ó"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ enter_test_name")
    lesson_id = callback.data

    # –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É—Ä–æ–∫–æ–≤
    lesson_names = {
        "lesson_alkanes": "–ê–ª–∫–∞–Ω—ã",
        "lesson_isomeria": "–ò–∑–æ–º–µ—Ä–∏—è",
        "lesson_acids": "–ö–∏—Å–ª–æ—Ç—ã"
    }

    lesson_name = lesson_names.get(lesson_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–∫")

    user_data = await state.get_data()
    course_name = user_data.get("course_name", "")
    subject_name = user_data.get("subject_name", "")

    await state.update_data(lesson_id=lesson_id, lesson_name=lesson_name)

    await callback.message.edit_text(
        f"–ö—É—Ä—Å: {course_name}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
        f"–£—Ä–æ–∫: {lesson_name}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë–∞–∑–æ–≤–æ–µ', '–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ', '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'):",
        reply_markup=get_home_kb()
    )


async def start_adding_questions(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start_adding_questions")
    test_name = message.text.strip()

    if not test_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:")
        return

    user_data = await state.get_data()
    course_name = user_data.get("course_name", "")
    subject_name = user_data.get("subject_name", "")
    lesson_name = user_data.get("lesson_name", "")

    await state.update_data(
        test_name=test_name,
        questions=[],
        current_question={}
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –î–ó
    current_state = await state.get_state()
    if "BonusTest" in current_state:
        info_text = f"üß™ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç: {test_name}\n\n"
    else:
        info_text = (
            f"–ö—É—Ä—Å: {course_name}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
            f"–£—Ä–æ–∫: {lesson_name}\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ –î–ó: {test_name}\n\n"
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from manager.keyboards.homework import get_step_edit_kb
    await message.answer(
        info_text + "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=get_step_edit_kb("test_name", True)
    )


async def add_question_photo(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫ –≤–æ–ø—Ä–æ—Å—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ add_question_photo")
    question_text = message.text.strip()

    if not question_text:
        await message.answer("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
        return

    await state.update_data(current_question={"text": question_text})

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from manager.keyboards.homework import get_step_edit_kb
    await message.answer(
        f"üìù –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:\n{question_text}\n\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=get_step_edit_kb("question_text", True)
    )


async def skip_photo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ skip_photo")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ñ–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å
    from manager.keyboards.homework import get_step_edit_kb
    await callback.message.edit_text(
        "üì∑ –§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–≤–æ–ø—Ä–æ—Å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=get_step_edit_kb("photo", False)
    )


async def process_question_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_question_photo")
    photo = message.photo[-1]
    file_id = photo.file_id

    user_data = await state.get_data()
    current_question = user_data.get("current_question", {})
    current_question["photo_id"] = file_id

    await state.update_data(current_question=current_question)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from manager.keyboards.homework import get_step_edit_kb
    await message.answer_photo(
        photo=file_id,
        caption="üì∑ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=get_step_edit_kb("photo", True)
    )


async def request_topic(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã:"
    )


async def process_topic(message: Message, state: FSMContext, states_group):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    try:
        topic_number = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã (—É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 50)
        if topic_number < 1:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–∫—Ä–æ—Ç–µ–º—ã
        user_data = await state.get_data()
        subject_id = user_data.get("subject_id")

        if not subject_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –î–ó –∑–∞–Ω–æ–≤–æ.")
            return

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–∫—Ä–æ—Ç–µ–º—ã
        from database import MicrotopicRepository, SubjectRepository

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ –µ–≥–æ –º–∏–∫—Ä–æ—Ç–µ–º—ã
        subject = await SubjectRepository.get_by_id(subject_id)
        if not subject:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –î–ó –∑–∞–Ω–æ–≤–æ.")
            return

        microtopics = await MicrotopicRepository.get_by_subject(subject_id)

        # –ò—â–µ–º –º–∏–∫—Ä–æ—Ç–µ–º—É –ø–æ –Ω–æ–º–µ—Ä—É –≤ –ø–æ–ª–µ number
        microtopic = await MicrotopicRepository.get_by_number(subject_id, topic_number)

        if microtopic:
            microtopic_id = microtopic.id
            microtopic_name = microtopic.name
        else:
            microtopic_id = None
            microtopic_name = None

        # –ï—Å–ª–∏ –º–∏–∫—Ä–æ—Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç—Ä–µ–±—É–µ–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
        if not microtopic_id:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            available_topics = ""
            if microtopics:
                available_topics = "\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã:\n"
                for mt in microtopics[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    available_topics += f"   {mt.number}. {mt.name}\n"

                if len(microtopics) > 10:
                    available_topics += f"   ... –∏ –µ—â–µ {len(microtopics) - 10} –º–∏–∫—Ä–æ—Ç–µ–º\n"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –º–∏–∫—Ä–æ—Ç–µ–º—É", callback_data=f"add_microtopic_{subject_id}_{topic_number}")],
                [InlineKeyboardButton(text="üîÑ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ", callback_data="retry_microtopic")]
            ])

            await message.answer(
                f"‚ùå –ú–∏–∫—Ä–æ—Ç–µ–º–∞ —Å –Ω–æ–º–µ—Ä–æ–º {topic_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}'.\n"
                f"{available_topics}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            return
        else:
            await message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–∏–∫—Ä–æ—Ç–µ–º–∞: {microtopic_name}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 2 –¥–æ 10), –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
                "‚Ä¢ B –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
                "‚Ä¢ –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
                "‚Ä¢ –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n\n"
                "–ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –º–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã
            current_question = user_data.get("current_question", {})
            current_question["microtopic_id"] = microtopic_id
            current_question["microtopic_name"] = microtopic_name
            current_question["topic_number"] = topic_number

            await state.update_data(current_question=current_question)
            await state.set_state(states_group.enter_answer_options)

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


async def handle_microtopic_retry(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã:"
    )
    await callback.answer()


async def handle_add_microtopic(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º subject_id –∏ topic_number –∏–∑ callback_data
    data_parts = callback.data.split("_")  # add_microtopic_{subject_id}_{topic_number}
    if len(data_parts) >= 4:
        subject_id = int(data_parts[2])
        topic_number = int(data_parts[3])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã
        user_data = await state.get_data()
        await state.update_data(
            pending_microtopic_subject_id=subject_id,
            pending_microtopic_number=topic_number
        )

        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∏–∫—Ä–æ—Ç–µ–º—ã ‚Ññ{topic_number}:"
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º—ã
        from manager.handlers.homework import AddHomeworkStates
        await state.set_state(AddHomeworkStates.add_microtopic_name)

    await callback.answer()


async def process_new_microtopic_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    try:
        microtopic_name = message.text.strip()

        if not microtopic_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        user_data = await state.get_data()
        subject_id = user_data.get("pending_microtopic_subject_id")
        topic_number = user_data.get("pending_microtopic_number")

        if not subject_id or not topic_number:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –º–∏–∫—Ä–æ—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–Ω–æ–≤–æ.")
            return

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        from database import MicrotopicRepository

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–∏–∫—Ä–æ—Ç–µ–º—É (–Ω–æ–º–µ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        new_microtopic = await MicrotopicRepository.create(
            name=microtopic_name,
            subject_id=subject_id
        )

        await message.answer(
            f"‚úÖ –ú–∏–∫—Ä–æ—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {new_microtopic.number}. {new_microtopic.name}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã —Å–Ω–æ–≤–∞:"
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            pending_microtopic_subject_id=None,
            pending_microtopic_number=None
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã
        from manager.handlers.homework import AddHomeworkStates
        await state.set_state(AddHomeworkStates.request_topic)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ç–µ–º—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")





async def select_correct_answer(message: Message, state: FSMContext, states_group):
    """–í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ select_correct_answer")
    answer_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
    lines = answer_text.split("\n")
    if len(lines) < 2:
        await message.answer(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –∑–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
    options = {}
    cyrillic_to_latin = {
        '–ê': 'A', '–í': 'B', '–°': 'C', '–î': 'D', '–ï': 'E', '–§': 'F', '–ì': 'G', '–•': 'H', '–ò': 'I', '–ô': 'J',
        '–∞': 'a', '–≤': 'b', '—Å': 'c', '–¥': 'd', '–µ': 'e', '—Ñ': 'f', '–≥': 'g', '—Ö': 'h', '–∏': 'i', '–π': 'j'
    }

    # –î–æ–ø—É—Å—Ç–∏–º—ã–µ –±—É–∫–≤—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–¥–æ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
    valid_letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"]

    for line in lines[:10]:  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–æ–∫
        line = line.strip()
        if not line:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å —Ç–æ—á–∫–æ–π (A. –¢–µ–∫—Å—Ç)
        if "." in line:
            parts = line.split(".", 1)
            if len(parts) == 2:
                letter = parts[0].strip().upper()
                text = parts[1].strip()
            else:
                continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Ç–æ—á–∫–∏ (A –¢–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª–∞
            if len(line) > 2 and line[1] == ' ':
                letter = line[0].upper()
                text = line[2:].strip()
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –±—É–∫–≤—ã - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –±—É–∫–≤—É
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –±—É–∫–≤—É
                used_letters = set(options.keys())
                letter = None
                for available_letter in valid_letters:
                    if available_letter not in used_letters:
                        letter = available_letter
                        break

                if letter is None:
                    continue  # –í—Å–µ –±—É–∫–≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã

                text = line

        # –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
        if letter in cyrillic_to_latin:
            letter = cyrillic_to_latin[letter]

        if letter in valid_letters and text:
            options[letter] = text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if len(options) < 2:
        await message.answer(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ B –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É (A, B, C, ...)
    sorted_letters = sorted(options.keys())
    expected_letters = valid_letters[:len(options)]
    if sorted_letters != expected_letters:
        await message.answer(
            f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É: {', '.join(expected_letters[:len(options)])}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    user_data = await state.get_data()
    current_question = user_data.get("current_question", {})
    current_question["options"] = options

    await state.update_data(current_question=current_question)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    options_text = ""
    for letter, text in sorted(options.items()):
        options_text += f"{letter}. {text}\n"

    from manager.keyboards.homework import get_step_edit_kb
    await message.answer(
        f"üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{options_text}\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞?",
        reply_markup=get_step_edit_kb("answer_options", True)
    )


async def save_question(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_question")
    correct_answer = callback.data.replace("correct_", "")

    user_data = await state.get_data()
    current_question = user_data.get("current_question", {})
    current_question["correct_answer"] = correct_answer

    await state.update_data(current_question=current_question)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_time_limit_kb()
    )


async def save_question_with_time(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_question_with_time")
    time_limit = int(callback.data.replace("time_", ""))

    user_data = await state.get_data()
    current_question = user_data.get("current_question", {})
    current_question["time_limit"] = time_limit

    questions = user_data.get("questions", [])
    questions.append(current_question)

    await state.update_data(questions=questions, current_question={})

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    time_text = f"{time_limit} —Å–µ–∫."
    if time_limit >= 60:
        minutes = time_limit // 60
        seconds = time_limit % 60
        time_text = f"{minutes} –º–∏–Ω."
        if seconds > 0:
            time_text += f" {seconds} —Å–µ–∫."

    await callback.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
        f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {time_text}",
        reply_markup=get_add_question_kb(len(questions))
    )


async def add_more_question(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ add_more_question")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")


async def finish_adding_questions(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ finish_adding_questions")
    await confirm_test(callback, state)


async def confirm_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –î–ó"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_test")

    user_data = await state.get_data()
    course_name = user_data.get("course_name", "")
    subject_name = user_data.get("subject_name", "")
    lesson_name = user_data.get("lesson_name", "")
    test_name = user_data.get("test_name", "")
    questions = user_data.get("questions", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    questions_info = ""
    for i, question in enumerate(questions, 1):
        time_limit = question.get("time_limit", 30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫
        time_text = f"{time_limit} —Å–µ–∫."
        if time_limit >= 60:
            minutes = time_limit // 60
            seconds = time_limit % 60
            time_text = f"{minutes} –º–∏–Ω."
            if seconds > 0:
                time_text += f" {seconds} —Å–µ–∫."

        questions_info += f"–í–æ–ø—Ä–æ—Å {i}: {time_text}\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"üìã –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –î–ó\n\n"
        f"üìö –ö—É—Ä—Å: {course_name}\n"
        f"üìñ –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
        f"üìù –£—Ä–æ–∫: {lesson_name}\n"
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ –î–ó: {test_name}\n"
        f"‚ùì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n\n"
        f"‚è± –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç:\n{questions_info}\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:"
    )

    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_confirm_test_kb()
    )


async def show_test_summary_with_edit(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Ç–µ—Å—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_data = await state.get_data()
    course_name = user_data.get("course_name", "")
    subject_name = user_data.get("subject_name", "")
    lesson_name = user_data.get("lesson_name", "")
    test_name = user_data.get("test_name", "")
    questions = user_data.get("questions", [])

    summary_text = (
        f"üìã –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–ó\n\n"
        f"üìö –ö—É—Ä—Å: {course_name} ‚úèÔ∏è\n"
        f"üìñ –ü—Ä–µ–¥–º–µ—Ç: {subject_name} ‚úèÔ∏è\n"
        f"üìù –£—Ä–æ–∫: {lesson_name} ‚úèÔ∏è\n"
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ –î–ó: {test_name} ‚úèÔ∏è\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(questions)}\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )

    from manager.keyboards.homework import get_step_edit_kb
    await callback.message.edit_text(
        summary_text,
        reply_markup=get_step_edit_kb("summary", True)
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ====================

async def edit_test_name(callback: CallbackQuery, state: FSMContext, states_group):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_test_name")

    user_data = await state.get_data()
    current_name = user_data.get("test_name", "")

    await callback.message.edit_text(
        f"üìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –î–ó: **{current_name}**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:"
    )
    await state.set_state(states_group.edit_test_name)


async def process_edit_test_name(message: Message, state: FSMContext, states_group):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    new_name = message.text.strip()

    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(test_name=new_name)
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –î–ó –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}"
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–≤–æ–¥–∫–µ
    await show_test_summary_with_edit(message, state)


async def edit_question_text(callback: CallbackQuery, state: FSMContext, states_group, question_num: int):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ {question_num}")

    user_data = await state.get_data()
    questions = user_data.get("questions", [])

    if question_num <= len(questions):
        current_question = questions[question_num - 1]
        current_text = current_question.get("text", "")

        await callback.message.edit_text(
            f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ {question_num}:\n\n"
            f"**{current_text}**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:"
        )

        await state.update_data(editing_question_num=question_num)
        await state.set_state(states_group.edit_question_text)
    else:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def process_edit_question_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    new_text = message.text.strip()

    if not new_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    user_data = await state.get_data()
    questions = user_data.get("questions", [])
    question_num = user_data.get("editing_question_num", 1)

    if question_num <= len(questions):
        questions[question_num - 1]["text"] = new_text
        await state.update_data(questions=questions)

        await message.answer(
            f"‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ {question_num} –∏–∑–º–µ–Ω–µ–Ω!"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É
        await show_test_summary_with_edit(message, state)


async def edit_answer_options(callback: CallbackQuery, state: FSMContext, states_group, question_num: int):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
    logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_num}")

    user_data = await state.get_data()
    questions = user_data.get("questions", [])

    if question_num <= len(questions):
        current_question = questions[question_num - 1]
        current_options = current_question.get("options", {})

        options_text = ""
        for letter, text in sorted(current_options.items()):
            options_text += f"{letter}. {text}\n"

        await callback.message.edit_text(
            f"üìù –¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_num}:\n\n"
            f"{options_text}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 2 –¥–æ 10), –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ B –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
        )

        await state.update_data(editing_question_num=question_num)
        await state.set_state(states_group.edit_answer_options)
    else:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def process_edit_answer_options(message: Message, state: FSMContext, states_group):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    answer_text = message.text.strip()
    lines = answer_text.split("\n")

    if len(lines) < 2:
        await message.answer(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ B –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    # –ü–∞—Ä—Å–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É)
    options = {}
    cyrillic_to_latin = {
        '–ê': 'A', '–í': 'B', '–°': 'C', '–î': 'D', '–ï': 'E', '–§': 'F', '–ì': 'G', '–•': 'H', '–ò': 'I', '–ô': 'J',
        '–∞': 'a', '–≤': 'b', '—Å': 'c', '–¥': 'd', '–µ': 'e', '—Ñ': 'f', '–≥': 'g', '—Ö': 'h', '–∏': 'i', '–π': 'j'
    }
    valid_letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"]

    for line in lines[:10]:
        line = line.strip()
        if not line:
            continue

        if "." in line:
            parts = line.split(".", 1)
            if len(parts) == 2:
                letter = parts[0].strip().upper()
                text = parts[1].strip()
            else:
                continue
        else:
            if len(line) > 2 and line[1] == ' ':
                letter = line[0].upper()
                text = line[2:].strip()
            else:
                used_letters = set(options.keys())
                letter = None
                for available_letter in valid_letters:
                    if available_letter not in used_letters:
                        letter = available_letter
                        break

                if letter is None:
                    continue

                text = line

        if letter in cyrillic_to_latin:
            letter = cyrillic_to_latin[letter]

        if letter in valid_letters and text:
            options[letter] = text

    if len(options) < 2:
        await message.answer(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    user_data = await state.get_data()
    questions = user_data.get("questions", [])
    question_num = user_data.get("editing_question_num", 1)

    if question_num <= len(questions):
        questions[question_num - 1]["options"] = options
        await state.update_data(questions=questions)

        await message.answer(
            f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_num} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        from common.manager_tests.keyboards import get_correct_answer_kb
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=get_correct_answer_kb(options)
        )
        await state.set_state(states_group.edit_correct_answer)


async def edit_photo(callback: CallbackQuery, state: FSMContext, states_group, question_num: int):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å–∞"""
    logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_num}")

    user_data = await state.get_data()
    questions = user_data.get("questions", [])

    if question_num <= len(questions):
        current_question = questions[question_num - 1]
        has_photo = "photo_id" in current_question

        if has_photo:
            await callback.message.edit_text(
                f"üì∑ –£ –≤–æ–ø—Ä–æ—Å–∞ {question_num} —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ:",
                reply_markup=get_photo_edit_kb()
            )
        else:
            await callback.message.edit_text(
                f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_num}:"
            )

        await state.update_data(editing_question_num=question_num)
        await state.set_state(states_group.edit_question_photo)
    else:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def process_edit_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ"""
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    photo = message.photo[-1]
    file_id = photo.file_id

    user_data = await state.get_data()
    questions = user_data.get("questions", [])
    question_num = user_data.get("editing_question_num", 1)

    if question_num <= len(questions):
        questions[question_num - 1]["photo_id"] = file_id
        await state.update_data(questions=questions)

        await message.answer(
            f"‚úÖ –§–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_num} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–≤–æ–¥–∫–µ
        await show_test_summary_with_edit(message, state)


# ==================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ====================

def register_edit_handlers(router, states_group):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    from aiogram import F
    from aiogram.filters import StateFilter

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    @router.callback_query(F.data == "edit_test_name")
    async def handle_edit_test_name(callback: CallbackQuery, state: FSMContext):
        await edit_test_name(callback, state, states_group)

    @router.message(StateFilter(states_group.edit_test_name))
    async def handle_process_edit_test_name(message: Message, state: FSMContext):
        new_name = message.text.strip()

        if not new_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(test_name=new_name)

        user_data = await state.get_data()
        course_name = user_data.get("course_name", "")
        subject_name = user_data.get("subject_name", "")
        lesson_name = user_data.get("lesson_name", "")

        info_text = (
            f"–ö—É—Ä—Å: {course_name}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
            f"–£—Ä–æ–∫: {lesson_name}\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ –î–ó: {new_name}\n\n"
        )

        from manager.keyboards.homework import get_step_edit_kb
        await message.answer(
            info_text + "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ! –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=get_step_edit_kb("test_name", True)
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∫–∞–∑–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(states_group.enter_test_name)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    @router.callback_query(F.data.startswith("edit_question_text_"))
    async def handle_edit_question_text(callback: CallbackQuery, state: FSMContext):
        question_num = int(callback.data.split("_")[-1])
        await edit_question_text(callback, state, states_group, question_num)

    @router.message(StateFilter(states_group.edit_question_text))
    async def handle_process_edit_question_text(message: Message, state: FSMContext):
        new_text = message.text.strip()

        if not new_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        user_data = await state.get_data()
        current_question = user_data.get("current_question", {})
        current_question["text"] = new_text
        await state.update_data(current_question=current_question)

        from manager.keyboards.homework import get_step_edit_kb
        await message.answer(
            f"üìù –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:\n{new_text}\n\n‚úÖ –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω! –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=get_step_edit_kb("question_text", True)
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(states_group.enter_question_text)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    @router.callback_query(F.data.startswith("edit_answer_options_"))
    async def handle_edit_answer_options(callback: CallbackQuery, state: FSMContext):
        question_num = int(callback.data.split("_")[-1])
        await edit_answer_options(callback, state, states_group, question_num)

    @router.message(StateFilter(states_group.edit_answer_options))
    async def handle_process_edit_answer_options(message: Message, state: FSMContext):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        answer_text = message.text.strip()
        lines = answer_text.split("\n")

        if len(lines) < 2:
            await message.answer(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
                "‚Ä¢ B –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
                "‚Ä¢ –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        # –ü–∞—Ä—Å–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = {}
        cyrillic_to_latin = {
            '–ê': 'A', '–í': 'B', '–°': 'C', '–î': 'D', '–ï': 'E', '–§': 'F', '–ì': 'G', '–•': 'H', '–ò': 'I', '–ô': 'J',
            '–∞': 'a', '–≤': 'b', '—Å': 'c', '–¥': 'd', '–µ': 'e', '—Ñ': 'f', '–≥': 'g', '—Ö': 'h', '–∏': 'i', '–π': 'j'
        }
        valid_letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"]

        for line in lines[:10]:
            line = line.strip()
            if not line:
                continue

            if "." in line:
                parts = line.split(".", 1)
                if len(parts) == 2:
                    letter = parts[0].strip().upper()
                    text = parts[1].strip()
                else:
                    continue
            else:
                if len(line) > 2 and line[1] == ' ':
                    letter = line[0].upper()
                    text = line[2:].strip()
                else:
                    used_letters = set(options.keys())
                    letter = None
                    for available_letter in valid_letters:
                        if available_letter not in used_letters:
                            letter = available_letter
                            break

                    if letter is None:
                        continue

                    text = line

            if letter in cyrillic_to_latin:
                letter = cyrillic_to_latin[letter]

            if letter in valid_letters and text:
                options[letter] = text

        if len(options) < 2:
            await message.answer(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        user_data = await state.get_data()
        current_question = user_data.get("current_question", {})
        current_question["options"] = options
        await state.update_data(current_question=current_question)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        options_text = ""
        for letter, text in sorted(options.items()):
            options_text += f"{letter}. {text}\n"

        from manager.keyboards.homework import get_step_edit_kb
        await message.answer(
            f"üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{options_text}\n‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω—ã! –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=get_step_edit_kb("answer_options", True)
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∫–∞–∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(states_group.enter_answer_options)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
    @router.callback_query(F.data.startswith("edit_question_photo_"))
    async def handle_edit_photo(callback: CallbackQuery, state: FSMContext):
        question_num = int(callback.data.split("_")[-1])
        await edit_photo(callback, state, states_group, question_num)

    @router.message(StateFilter(states_group.edit_question_photo))
    async def handle_process_edit_photo(message: Message, state: FSMContext):
        if not message.photo:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return

        photo = message.photo[-1]
        file_id = photo.file_id

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        user_data = await state.get_data()
        current_question = user_data.get("current_question", {})
        current_question["photo_id"] = file_id
        await state.update_data(current_question=current_question)

        from manager.keyboards.homework import get_step_edit_kb
        await message.answer_photo(
            photo=file_id,
            caption="üì∑ –§–æ—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ! –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=get_step_edit_kb("photo", True)
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(states_group.add_question_photo)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
    @router.callback_query(F.data == "edit_photo")
    async def handle_request_new_photo(callback: CallbackQuery, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if callback.message.photo:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            await callback.message.edit_caption(
                caption="üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.edit_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")

        await state.set_state(states_group.edit_question_photo)

    @router.callback_query(F.data == "remove_photo")
    async def handle_remove_photo(callback: CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        current_question = user_data.get("current_question", {})

        if "photo_id" in current_question:
            del current_question["photo_id"]
            await state.update_data(current_question=current_question)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
            from manager.keyboards.homework import get_step_edit_kb
            await callback.message.answer(
                "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                reply_markup=get_step_edit_kb("photo", False)
            )
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            await callback.message.delete()
        else:
            await callback.answer("‚ùå –£ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ")

    @router.callback_query(F.data == "continue_without_edit")
    async def handle_continue_without_edit(callback: CallbackQuery, state: FSMContext):
        await show_test_summary_with_edit(callback, state)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–∫–∏ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    @router.callback_query(F.data == "edit_summary")
    async def handle_show_summary_edit(callback: CallbackQuery, state: FSMContext):
        await show_test_summary_with_edit(callback, state)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
    @router.callback_query(F.data == "continue_test_name")
    async def handle_continue_test_name(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
        await state.set_state(states_group.enter_question_text)

    @router.callback_query(F.data == "continue_question_text")
    async def handle_continue_question_text(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_photo_skip_kb()
        )
        await state.set_state(states_group.add_question_photo)

    @router.callback_query(F.data == "continue_photo")
    async def handle_continue_photo(callback: CallbackQuery, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if callback.message.photo:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã:")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã:")
        await state.set_state(states_group.request_topic)

    @router.callback_query(F.data == "continue_answer_options")
    async def handle_continue_answer_options(callback: CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        current_question = user_data.get("current_question", {})
        options = current_question.get("options", {})

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=get_correct_answer_kb(options)
        )
        await state.set_state(states_group.select_correct_answer)

    @router.callback_query(F.data == "continue_summary")
    async def handle_continue_summary(callback: CallbackQuery, state: FSMContext):
        await confirm_test(callback, state)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    @router.callback_query(F.data == "edit_test_name")
    async def handle_edit_test_name_step(callback: CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        current_name = user_data.get("test_name", "")

        await callback.message.edit_text(
            f"üìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –î–ó: {current_name}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:"
        )
        await state.set_state(states_group.edit_test_name)

    @router.callback_query(F.data == "edit_question_text")
    async def handle_edit_question_text_step(callback: CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        current_question = user_data.get("current_question", {})
        current_text = current_question.get("text", "")

        await callback.message.edit_text(
            f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:\n\n{current_text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:"
        )
        await state.set_state(states_group.edit_question_text)

    @router.callback_query(F.data == "edit_photo")
    async def handle_edit_photo_step(callback: CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        current_question = user_data.get("current_question", {})
        has_photo = "photo_id" in current_question

        if has_photo:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            if callback.message.photo:
                await callback.message.edit_caption(
                    caption="üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ:",
                    reply_markup=get_photo_edit_kb()
                )
            else:
                await callback.message.edit_text(
                    "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ:",
                    reply_markup=get_photo_edit_kb()
                )
        else:
            await callback.message.edit_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:")
        await state.set_state(states_group.edit_question_photo)

    @router.callback_query(F.data == "edit_answer_options")
    async def handle_edit_answer_options_step(callback: CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        current_question = user_data.get("current_question", {})
        current_options = current_question.get("options", {})

        options_text = ""
        for letter, text in sorted(current_options.items()):
            options_text += f"{letter}. {text}\n"

        await callback.message.edit_text(
            f"üìù –¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n\n{options_text}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 2 –¥–æ 10), –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ B –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
        )
        await state.set_state(states_group.edit_answer_options)

