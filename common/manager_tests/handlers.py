import logging
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from .keyboards import (
    get_photo_skip_kb, get_correct_answer_kb,
    get_time_limit_kb, get_add_question_kb,
    get_confirm_test_kb
)
from common.keyboards import get_home_and_back_kb, get_home_kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


async def enter_test_name(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –î–ó"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ enter_test_name")
    lesson_id = callback.data

    # –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É—Ä–æ–∫–æ–≤
    lesson_names = {
        "lesson_alkanes": "–ê–ª–∫–∞–Ω—ã",
        "lesson_isomeria": "–ò–∑–æ–º–µ—Ä–∏—è",
        "lesson_acids": "–ö–∏—Å–ª–æ—Ç—ã"
    }

    lesson_name = lesson_names.get(lesson_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–∫")

    user_data = await state.get_data()
    course_name = user_data.get("course_name", "")
    subject_name = user_data.get("subject_name", "")

    await state.update_data(lesson_id=lesson_id, lesson_name=lesson_name)

    await callback.message.edit_text(
        f"–ö—É—Ä—Å: {course_name}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
        f"–£—Ä–æ–∫: {lesson_name}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë–∞–∑–æ–≤–æ–µ', '–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ', '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'):",
        reply_markup=get_home_kb()
    )


async def start_adding_questions(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start_adding_questions")
    test_name = message.text.strip()

    if not test_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:")
        return

    user_data = await state.get_data()
    course_name = user_data.get("course_name", "")
    subject_name = user_data.get("subject_name", "")
    lesson_name = user_data.get("lesson_name", "")

    await state.update_data(
        test_name=test_name,
        questions=[],
        current_question={}
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –î–ó
    current_state = await state.get_state()
    if "BonusTest" in current_state:
        info_text = f"üß™ –ë–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç: {test_name}\n\n"
    else:
        info_text = (
            f"–ö—É—Ä—Å: {course_name}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
            f"–£—Ä–æ–∫: {lesson_name}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –î–ó: {test_name}\n\n"
        )

    await message.answer(
        info_text + "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –≤–æ–ø—Ä–æ—Å—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_home_and_back_kb()
    )


async def add_question_photo(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫ –≤–æ–ø—Ä–æ—Å—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ add_question_photo")
    question_text = message.text.strip()

    if not question_text:
        await message.answer("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
        return

    await state.update_data(current_question={"text": question_text})

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=get_photo_skip_kb()
    )


async def skip_photo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ skip_photo")
    await request_topic(callback.message, state)


async def process_question_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_question_photo")
    photo = message.photo[-1]
    file_id = photo.file_id

    user_data = await state.get_data()
    current_question = user_data.get("current_question", {})
    current_question["photo_id"] = file_id

    await state.update_data(current_question=current_question)
    await request_topic(message, state)


async def request_topic(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∏–∫—Ä–æ—Ç–µ–º—ã:"
    )


async def process_topic(message: Message, state: FSMContext, states_group):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã"""
    try:
        topic_number = int(message.text.strip())
        topic_id = f"topic_{topic_number}"

        # –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–∏–∫—Ä–æ—Ç–µ–º
        topic_names = {
            "topic_1": "–°—Ç—Ä–æ–µ–Ω–∏–µ –∞–ª–∫–∞–Ω–æ–≤",
            "topic_2": "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∞–ª–∫–∞–Ω–æ–≤",
            "topic_3": "–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∞–ª–∫–∞–Ω–æ–≤",
            "topic_4": "–•–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∞–ª–∫–∞–Ω–æ–≤"
        }

        topic_name = topic_names.get(topic_id, f"–ú–∏–∫—Ä–æ—Ç–µ–º–∞ {topic_number}")

        user_data = await state.get_data()
        current_question = user_data.get("current_question", {})
        current_question["topic_id"] = topic_id
        current_question["topic_name"] = topic_name

        await state.update_data(current_question=current_question)
        await state.set_state(states_group.enter_answer_options)

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 2 –¥–æ 10), –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ B –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n\n"
            "–ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –º–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Ä–æ—Ç–µ–º—ã.")


async def enter_answer_options(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ enter_answer_options")
    topic_id = 'topic_'+message.data

    # –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–∏–∫—Ä–æ—Ç–µ–º
    topic_names = {
        "topic_1": "–°—Ç—Ä–æ–µ–Ω–∏–µ –∞–ª–∫–∞–Ω–æ–≤",
        "topic_2": "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∞–ª–∫–∞–Ω–æ–≤",
        "topic_3": "–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∞–ª–∫–∞–Ω–æ–≤",
        "topic_4": "–•–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∞–ª–∫–∞–Ω–æ–≤"
    }

    topic_name = topic_names.get(topic_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∏–∫—Ä–æ—Ç–µ–º–∞")

    user_data = await state.get_data()
    current_question = user_data.get("current_question", {})
    current_question["topic_id"] = topic_id
    current_question["topic_name"] = topic_name

    await state.update_data(current_question=current_question)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 2 –¥–æ 10), –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "‚Ä¢ B –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "‚Ä¢ –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "‚Ä¢ –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n\n"
        "–ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –º–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
    )


async def select_correct_answer(message: Message, state: FSMContext, states_group):
    """–í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ select_correct_answer")
    answer_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
    lines = answer_text.split("\n")
    if len(lines) < 2:
        await message.answer(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –∑–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
    options = {}
    cyrillic_to_latin = {
        '–ê': 'A', '–í': 'B', '–°': 'C', '–î': 'D', '–ï': 'E', '–§': 'F', '–ì': 'G', '–•': 'H', '–ò': 'I', '–ô': 'J',
        '–∞': 'a', '–≤': 'b', '—Å': 'c', '–¥': 'd', '–µ': 'e', '—Ñ': 'f', '–≥': 'g', '—Ö': 'h', '–∏': 'i', '–π': 'j'
    }

    # –î–æ–ø—É—Å—Ç–∏–º—ã–µ –±—É–∫–≤—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–¥–æ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
    valid_letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"]

    for line in lines[:10]:  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–æ–∫
        line = line.strip()
        if not line:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å —Ç–æ—á–∫–æ–π (A. –¢–µ–∫—Å—Ç)
        if "." in line:
            parts = line.split(".", 1)
            if len(parts) == 2:
                letter = parts[0].strip().upper()
                text = parts[1].strip()
            else:
                continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Ç–æ—á–∫–∏ (A –¢–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª–∞
            if len(line) > 2 and line[1] == ' ':
                letter = line[0].upper()
                text = line[2:].strip()
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –±—É–∫–≤—ã - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –±—É–∫–≤—É
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –±—É–∫–≤—É
                used_letters = set(options.keys())
                letter = None
                for available_letter in valid_letters:
                    if available_letter not in used_letters:
                        letter = available_letter
                        break

                if letter is None:
                    continue  # –í—Å–µ –±—É–∫–≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã

                text = line

        # –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
        if letter in cyrillic_to_latin:
            letter = cyrillic_to_latin[letter]

        if letter in valid_letters and text:
            options[letter] = text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if len(options) < 2:
        await message.answer(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ B –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
            "‚Ä¢ –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É (A, B, C, ...)
    sorted_letters = sorted(options.keys())
    expected_letters = valid_letters[:len(options)]
    if sorted_letters != expected_letters:
        await message.answer(
            f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É: {', '.join(expected_letters[:len(options)])}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    user_data = await state.get_data()
    current_question = user_data.get("current_question", {})
    current_question["options"] = options

    await state.update_data(current_question=current_question)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=get_correct_answer_kb(options)
    )
    await state.set_state(states_group.select_correct_answer)


async def save_question(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_question")
    correct_answer = callback.data.replace("correct_", "")

    user_data = await state.get_data()
    current_question = user_data.get("current_question", {})
    current_question["correct_answer"] = correct_answer

    await state.update_data(current_question=current_question)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_time_limit_kb()
    )


async def save_question_with_time(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_question_with_time")
    time_limit = int(callback.data.replace("time_", ""))

    user_data = await state.get_data()
    current_question = user_data.get("current_question", {})
    current_question["time_limit"] = time_limit

    questions = user_data.get("questions", [])
    questions.append(current_question)

    await state.update_data(questions=questions, current_question={})

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    time_text = f"{time_limit} —Å–µ–∫."
    if time_limit >= 60:
        minutes = time_limit // 60
        seconds = time_limit % 60
        time_text = f"{minutes} –º–∏–Ω."
        if seconds > 0:
            time_text += f" {seconds} —Å–µ–∫."

    await callback.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
        f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {time_text}",
        reply_markup=get_add_question_kb(len(questions))
    )


async def add_more_question(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ add_more_question")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")


async def finish_adding_questions(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ finish_adding_questions")
    await confirm_test(callback, state)


async def confirm_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –î–ó"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_test")

    user_data = await state.get_data()
    course_name = user_data.get("course_name", "")
    subject_name = user_data.get("subject_name", "")
    lesson_name = user_data.get("lesson_name", "")
    test_name = user_data.get("test_name", "")
    questions = user_data.get("questions", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    questions_info = ""
    for i, question in enumerate(questions, 1):
        time_limit = question.get("time_limit", 30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫
        time_text = f"{time_limit} —Å–µ–∫."
        if time_limit >= 60:
            minutes = time_limit // 60
            seconds = time_limit % 60
            time_text = f"{minutes} –º–∏–Ω."
            if seconds > 0:
                time_text += f" {seconds} —Å–µ–∫."

        questions_info += f"–í–æ–ø—Ä–æ—Å {i}: {time_text}\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"–ö—É—Ä—Å: {course_name}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
        f"–£—Ä–æ–∫: {lesson_name}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –î–ó: {test_name}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n\n"
        f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç:\n{questions_info}\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:"
    )

    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_confirm_test_kb()
    )

