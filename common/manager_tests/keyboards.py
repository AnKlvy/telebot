from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from common.keyboards import get_main_menu_back_button, get_universal_back_button, back_to_main_button


def get_photo_skip_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    buttons = [[
        InlineKeyboardButton(
            text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ —Ñ–æ—Ç–æ)",
            callback_data="skip_photo"
        )
    ], back_to_main_button()]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_correct_answer_kb(options: dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    buttons = []

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –±—É–∫–≤–∞–º
    sorted_options = sorted(options.items())

    for letter, text in sorted_options:
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –∫–Ω–æ–ø–∫–∏
        display_text = text[:30] + "..." if len(text) > 30 else text
        button_text = f"{letter}. {display_text}"

        buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"correct_{letter}"
            )
        ])

    buttons.append(back_to_main_button())
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_time_limit_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–≤–µ—Ç"""
    time_options = [10, 20, 30, 60, 120, 180, 240, 300]
    
    buttons = []
    for time in time_options:
        text = f"{time} —Å–µ–∫."
        if time >= 60:
            minutes = time // 60
            seconds = time % 60
            text = f"{minutes} –º–∏–Ω."
            if seconds > 0:
                text += f" {seconds} —Å–µ–∫."
        
        buttons.append([
            InlineKeyboardButton(
                text=text, 
                callback_data=f"time_{time}"
            )
        ])

    buttons.append(back_to_main_button())
    

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_add_question_kb(question_count: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    buttons = [[
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å",
            callback_data="add_more_question"
        )
    ], [
        InlineKeyboardButton(
            text=f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å ({question_count} –≤–æ–ø—Ä–æ—Å–æ–≤)",
            callback_data="finish_adding_questions"
        )
    ], back_to_main_button()]

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_test_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                callback_data="confirm_test"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", 
                callback_data="edit_test"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data="cancel_test"
            )
        ],
        back_to_main_button()
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_tests_list_kb(tests: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    buttons = []
    for test in tests:
        buttons.append([
            InlineKeyboardButton(
                text=test["name"], 
                callback_data=f"delete_test_{test['id']}"
            )
        ])
    buttons.append(back_to_main_button())

    return InlineKeyboardMarkup(inline_keyboard=buttons) 