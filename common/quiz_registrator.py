"""
–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è quiz —Å–∏—Å—Ç–µ–º—ã
–í—ã–Ω–æ—Å–∏—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ç–∞–π–º–µ—Ä–æ–≤
"""

from aiogram import Router, F, Bot
from aiogram.types import Poll, PollAnswer, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta
import logging
import asyncio
import uuid
from typing import Dict, Set, Callable, Optional, Any

from database import (
    QuestionRepository, AnswerOptionRepository, BonusAnswerOptionRepository
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {question_uuid: {"chat_id": int, "state": FSMContext, "bot": Bot, "answered": bool}}
active_questions: Dict[str, Dict] = {}

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
completed_questions: Set[str] = set()


def register_quiz_handlers(
    router: Router,
    test_state: State,
    poll_answer_handler: Optional[Callable] = None,
    timeout_handler: Optional[Callable] = None,
    finish_handler: Optional[Callable] = None
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è quiz —Å–∏—Å—Ç–µ–º—ã
    
    Args:
        router: Router –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        test_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        poll_answer_handler: –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        timeout_handler: –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        finish_handler: –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    @router.poll_answer(test_state)
    async def handle_quiz_poll_answer(poll: PollAnswer, state: FSMContext):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        logging.info(f"üîÑ QUIZ: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {poll.user.id}")
        
        data = await state.get_data()
        current_question_uuid = data.get("current_question_uuid")
        
        if not current_question_uuid or current_question_uuid not in active_questions:
            logging.warning(f"‚ö†Ô∏è QUIZ: –í–æ–ø—Ä–æ—Å {current_question_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            return
        
        # –û—Ç–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
        active_questions[current_question_uuid]["answered"] = True
        logging.info(f"‚úÖ QUIZ: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ UUID: {current_question_uuid}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
        if poll_answer_handler:
            await poll_answer_handler(poll, state, current_question_uuid)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await default_poll_answer_handler(poll, state, current_question_uuid)
    
    @router.poll(test_state)
    async def handle_quiz_poll_closed(poll: Poll, state: FSMContext, bot: Bot):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–æ—Å–∞"""
        logging.info(f"üîî QUIZ: Poll closed event: poll_id={poll.id}")
        
        try:
            data = await state.get_data()
            current_state = await state.get_state()
            current_question_uuid = data.get("current_question_uuid")
            
            if current_state != test_state:
                logging.info(f"‚ùå QUIZ: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç
            question_answered = data.get("question_answered", False)
            if question_answered:
                logging.info("‚úÖ QUIZ: –û—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
            if current_question_uuid:
                if current_question_uuid in active_questions:
                    logging.info(f"üîÑ QUIZ: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {current_question_uuid}")
                    return
                
                if current_question_uuid in completed_questions:
                    logging.info(f"‚úÖ QUIZ: –í–æ–ø—Ä–æ—Å {current_question_uuid} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    return
            
            logging.warning(f"‚ö†Ô∏è QUIZ: –†–ï–ó–ï–†–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ê–ô–ú–ê–£–¢–ê –¥–ª—è poll {poll.id}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
            if timeout_handler:
                await timeout_handler(poll, state, bot, current_question_uuid)
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
                await default_timeout_handler(poll, state, bot, current_question_uuid)
                
        except Exception as e:
            logging.error(f"‚ùå QUIZ: –û—à–∏–±–∫–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")


async def send_next_question(chat_id: int, state: FSMContext, bot: Bot, finish_callback: Optional[Callable] = None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    index = data.get("q_index", 0)
    questions = data.get("questions", [])
    
    if index >= len(questions):
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        if finish_callback:
            await finish_callback(chat_id, state, bot)
        return
    
    question_data = questions[index]
    question_id = question_data['id']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–Ω–æ–º —Ç–µ—Å—Ç–µ
    is_bonus_test = data.get("bonus_test_id") is not None

    if is_bonus_test:
        # –î–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º BonusAnswerOptionRepository
        answer_options = await BonusAnswerOptionRepository.get_by_bonus_question(question_id)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º AnswerOptionRepository
        answer_options = await AnswerOptionRepository.get_by_question(question_id)

    if not answer_options:
        error_msg = f"‚ùå QUIZ: –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}"
        logging.error(error_msg)
        logging.error(f"üìã QUIZ: –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞: {question_data}")
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
    answer_options.sort(key=lambda x: x.order_number)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    options = []
    correct_option_id = None
    
    for i, option in enumerate(answer_options):
        options.append(option.text)
        if option.is_correct:
            correct_option_id = i
    
    if correct_option_id is None:
        error_msg = f"‚ùå QUIZ: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}"
        logging.error(error_msg)
        logging.error(f"üìã QUIZ: –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {[(opt.text, opt.is_correct) for opt in answer_options]}")
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    question_uuid = str(uuid.uuid4())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
    await state.update_data(
        current_question_id=question_id,
        current_question_uuid=question_uuid,
        current_answer_options=[{
            'id': opt.id,
            'text': opt.text,
            'is_correct': opt.is_correct,
            'order_number': opt.order_number
        } for opt in answer_options],
        question_start_time=datetime.now().isoformat(),
        question_answered=False
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    active_questions[question_uuid] = {
        "chat_id": chat_id,
        "state": state,
        "bot": bot,
        "answered": False,
        "question_id": question_id,
        "start_time": datetime.now(),
        "finish_callback": finish_callback
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    close_date = int((datetime.now() + timedelta(seconds=question_data['time_limit'])).timestamp())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_text = question_data['text']
    photo_message = None
    
    if question_data['photo_path']:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        photo_message = await bot.send_photo(
            chat_id=chat_id,
            photo=question_data['photo_path'],
        )
    
    poll_message = await bot.send_poll(
        chat_id=chat_id,
        question=f"{question_text}",
        options=options,
        type="quiz",
        correct_option_id=correct_option_id,
        is_anonymous=False,
        close_date=close_date
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    
    if photo_message:
        messages_to_delete.append(photo_message.message_id)
    messages_to_delete.append(poll_message.message_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ä–æ—Å–æ–º
    await state.update_data(
        current_poll_message_id=poll_message.message_id,
        messages_to_delete=messages_to_delete
    )
    
    logging.info(f"üìù QUIZ: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å {index + 1}/{len(questions)} | UUID: {question_uuid} | –¢–∞–π–º–µ—Ä: {question_data['time_limit']}—Å")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
    asyncio.create_task(handle_question_timeout_reliable(
        question_uuid, question_data['time_limit'], finish_callback
    ))


async def default_poll_answer_handler(poll: PollAnswer, state: FSMContext, question_uuid: str):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    index = data.get("q_index", 0)
    questions = data.get("questions", [])
    current_question_id = data.get("current_question_id")
    current_answer_options = data.get("current_answer_options", [])
    question_start_time_str = data.get("question_start_time")
    
    if index >= len(questions) or not current_question_id:
        return
    
    selected_option_index = poll.option_ids[0]
    selected_answer = current_answer_options[selected_option_index] if selected_option_index < len(current_answer_options) else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = selected_answer and selected_answer['is_correct']
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –æ—Ç–≤–µ—Ç
    time_spent = None
    if question_start_time_str:
        question_start_time = datetime.fromisoformat(question_start_time_str)
        time_spent = int((datetime.now() - question_start_time).total_seconds())
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question_data = questions[index]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    question_results = data.get("question_results", [])
    question_results.append({
        "question_id": current_question_id,
        "selected_answer_id": selected_answer['id'] if selected_answer else None,
        "is_correct": is_correct,
        "time_spent": time_spent,
        "microtopic_number": current_question_data['microtopic_number']
    })
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª–∏
    await state.update_data(question_answered=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    score = data.get("score", 0)
    if is_correct:
        score += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        score=score,
        q_index=index + 1,
        question_results=question_results
    )
    
    logging.info(f"üìä QUIZ: –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {'‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ' if is_correct else '‚ùå –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'} | –í—Ä–µ–º—è: {time_spent}—Å")

    # –ü–æ–ª—É—á–∞–µ–º finish_callback –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    finish_callback = None
    if question_uuid in active_questions:
        finish_callback = active_questions[question_uuid].get("finish_callback")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(poll.user.id, state, poll.bot, finish_callback)


async def default_timeout_handler(poll: Poll, state: FSMContext, bot: Bot, question_uuid: str):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞"""
    logging.warning(f"‚ö†Ô∏è QUIZ: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è {question_uuid}")
    
    data = await state.get_data()
    user_id = data.get("user_id")
    if not user_id:
        logging.error("‚ùå QUIZ: –ù–µ—Ç user_id –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ
    current_answer_options = data.get("current_answer_options", [])
    correct_answer = next((opt for opt in current_answer_options if opt['is_correct']), None)
    
    if correct_answer:
        timeout_message = await bot.send_message(
            user_id,
            f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)\n\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer['text']}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        messages_to_delete = data.get("messages_to_delete", [])
        messages_to_delete.append(timeout_message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–π–º–∞—É—Ç–∞
    index = data.get("q_index", 0)
    questions = data.get("questions", [])
    current_question_id = data.get("current_question_id")
    
    if index < len(questions) and current_question_id:
        current_question_data = questions[index]
        question_results = data.get("question_results", [])
        
        question_results.append({
            "question_id": current_question_id,
            "selected_answer_id": None,
            "is_correct": False,
            "time_spent": None,
            "microtopic_number": current_question_data['microtopic_number']
        })
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.update_data(
            q_index=index + 1,
            question_results=question_results,
            question_answered=False
        )
        
        await asyncio.sleep(2)
        # –ü–æ–ª—É—á–∞–µ–º finish_callback –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        finish_callback = None
        if question_uuid and question_uuid in active_questions:
            finish_callback = active_questions[question_uuid].get("finish_callback")
        await send_next_question(user_id, state, bot, finish_callback)


async def handle_question_timeout_reliable(question_uuid: str, timeout_seconds: int, finish_callback: Optional[Callable] = None):
    """–ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π UUID"""
    try:
        logging.info(f"‚è∞ QUIZ: –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ UUID: {question_uuid} –Ω–∞ {timeout_seconds} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(timeout_seconds)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        if question_uuid not in active_questions:
            logging.info(f"üîÑ QUIZ: –í–æ–ø—Ä–æ—Å {question_uuid} —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —Ç–∞–π–º–∞—É—Ç –æ—Ç–º–µ–Ω–µ–Ω")
            return
        
        question_info = active_questions[question_uuid]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç
        if question_info["answered"]:
            logging.info(f"‚úÖ QUIZ: –ù–∞ –≤–æ–ø—Ä–æ—Å {question_uuid} —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏, —Ç–∞–π–º–∞—É—Ç –æ—Ç–º–µ–Ω–µ–Ω")
            del active_questions[question_uuid]
            return
        
        logging.info(f"‚è∞ QUIZ: –¢–ê–ô–ú–ê–£–¢! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_uuid}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        await process_question_timeout_reliable(question_uuid, finish_callback)
        
    except Exception as e:
        logging.error(f"‚ùå QUIZ: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è {question_uuid}: {e}")
        if question_uuid in active_questions:
            del active_questions[question_uuid]


async def process_question_timeout_reliable(question_uuid: str, finish_callback: Optional[Callable] = None):
    """–ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        if question_uuid not in active_questions:
            logging.error(f"‚ùå QUIZ: –í–æ–ø—Ä–æ—Å {question_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            return

        question_info = active_questions[question_uuid]
        chat_id = question_info["chat_id"]
        state = question_info["state"]
        bot = question_info["bot"]

        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        completed_questions.add(question_uuid)

        data = await state.get_data()
        index = data.get("q_index", 0)
        questions = data.get("questions", [])
        current_question_id = data.get("current_question_id")
        question_start_time_str = data.get("question_start_time")

        logging.info(f"‚è∞ QUIZ: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: index={index}, question_id={current_question_id}")

        if index >= len(questions) or not current_question_id:
            logging.error(f"‚ùå QUIZ: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è {question_uuid}")
            del active_questions[question_uuid]
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è
        time_spent = None
        if question_start_time_str:
            question_start_time = datetime.fromisoformat(question_start_time_str)
            time_spent = int((datetime.now() - question_start_time).total_seconds())

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_question_data = questions[index]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–∞–π–º–∞—É—Ç)
        question_results = data.get("question_results", [])
        question_results.append({
            "question_id": current_question_id,
            "selected_answer_id": None,
            "is_correct": False,
            "time_spent": time_spent,
            "microtopic_number": current_question_data['microtopic_number']
        })

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        current_answer_options = data.get("current_answer_options", [])
        correct_answer = next((opt for opt in current_answer_options if opt['is_correct']), None)

        if correct_answer:
            timeout_message = await bot.send_message(
                chat_id,
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer['text']}"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            data = await state.get_data()
            messages_to_delete = data.get("messages_to_delete", [])
            messages_to_delete.append(timeout_message.message_id)
            await state.update_data(messages_to_delete=messages_to_delete)

            logging.info(f"üì§ QUIZ: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.update_data(
            q_index=index + 1,
            question_results=question_results,
            question_answered=False
        )

        logging.info(f"‚û°Ô∏è QUIZ: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É: {index + 1}")

        # –û—á–∏—â–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        del active_questions[question_uuid]

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
        await asyncio.sleep(2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        await send_next_question(chat_id, state, bot, finish_callback)
        logging.info(f"‚úÖ QUIZ: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {question_uuid}")

    except Exception as e:
        logging.error(f"‚ùå QUIZ: –û—à–∏–±–∫–∞ –≤ process_question_timeout_reliable –¥–ª—è {question_uuid}: {e}")
        import traceback
        logging.error(f"üìã QUIZ: Traceback: {traceback.format_exc()}")

        # –û—á–∏—â–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if question_uuid in active_questions:
            del active_questions[question_uuid]


async def cleanup_test_messages(chat_id: int, data: dict, bot: Bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ—Å—Ç–∞"""
    import time
    start_time = time.time()

    try:
        messages_to_delete = data.get("messages_to_delete", [])

        if not messages_to_delete:
            logging.info("üßπ QUIZ: –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        logging.info(f"üßπ QUIZ: –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ {len(messages_to_delete)} —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        deleted_count = 0
        batch_size = 10

        for i in range(0, len(messages_to_delete), batch_size):
            batch = messages_to_delete[i:i + batch_size]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            tasks = []
            for message_id in batch:
                task = asyncio.create_task(delete_message_safe(bot, chat_id, message_id))
                tasks.append(task)

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –ø–∞–∫–µ—Ç–µ
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è
            for result in results:
                if result is True:
                    deleted_count += 1

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
            if i + batch_size < len(messages_to_delete):
                await asyncio.sleep(0.05)

        end_time = time.time()
        duration = end_time - start_time
        logging.info(f"üßπ QUIZ: –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")

    except Exception as e:
        logging.error(f"‚ùå QUIZ: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ—Å—Ç–∞: {e}")


async def delete_message_safe(bot: Bot, chat_id: int, message_id: int) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except Exception as e:
        logging.debug(f"QUIZ: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
        return False


async def cleanup_test_data(user_id: int):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        questions_to_remove = []
        for question_uuid, question_info in active_questions.items():
            if question_info.get("chat_id") == user_id:
                questions_to_remove.append(question_uuid)

        for question_uuid in questions_to_remove:
            del active_questions[question_uuid]
            logging.info(f"üßπ QUIZ: –û—á–∏—â–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å {question_uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if len(completed_questions) > 100:
            completed_list = list(completed_questions)
            completed_questions.clear()
            completed_questions.update(completed_list[-50:])
            logging.info("üßπ QUIZ: –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

    except Exception as e:
        logging.error(f"‚ùå QUIZ: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞: {e}")


def get_active_questions_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"""
    return len(active_questions)


def get_completed_questions_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"""
    return len(completed_questions)
