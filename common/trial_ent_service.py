"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–±–Ω—ã–º –ï–ù–¢
"""
import random
import json
from typing import List, Dict, Any, Optional, Tuple
import logging
from database import (
    QuestionRepository, SubjectRepository, TrialEntResultRepository, 
    TrialEntQuestionResultRepository, StudentRepository
)

logger = logging.getLogger(__name__)


class TrialEntService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–±–Ω—ã–º –ï–ù–¢"""
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
    SUBJECT_NAMES = {
        "kz": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "mathlit": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", 
        "math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "geo": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "bio": "–ë–∏–æ–ª–æ–≥–∏—è",
        "chem": "–•–∏–º–∏—è",
        "inf": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "world": "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"
    }
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∏—Ö ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    SUBJECT_CODE_TO_NAME_MAP = {
        "kz": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "mathlit": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
        "math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", 
        "geo": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "bio": "–ë–∏–æ–ª–æ–≥–∏—è",
        "chem": "–•–∏–º–∏—è",
        "inf": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "world": "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"
    }
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    QUESTION_COUNTS = {
        "kz": 20,
        "mathlit": 10,
        "math": 50,
        "geo": 50,
        "bio": 50,
        "chem": 50,
        "inf": 50,
        "world": 50
    }

    @staticmethod
    async def get_subject_id_by_code(subject_code: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∫–æ–¥—É"""
        subject_name = TrialEntService.SUBJECT_CODE_TO_NAME_MAP.get(subject_code)
        if not subject_name:
            return None
            
        subject = await SubjectRepository.get_by_name(subject_name)
        return subject.id if subject else None

    @staticmethod
    async def get_random_questions_for_subject(subject_code: str, count: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        subject_id = await TrialEntService.get_subject_id_by_code(subject_code)
        if not subject_id:
            logger.warning(f"–ü—Ä–µ–¥–º–µ—Ç —Å –∫–æ–¥–æ–º {subject_code} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        all_questions = await QuestionRepository.get_by_subject(subject_id)
        
        if len(all_questions) < count:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_code}. –¢—Ä–µ–±—É–µ—Ç—Å—è: {count}, –¥–æ—Å—Ç—É–ø–Ω–æ: {len(all_questions)}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            selected_questions = all_questions
        else:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            selected_questions = random.sample(all_questions, count)
            logger.info(f"–í—ã–±—Ä–∞–Ω–æ {len(selected_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_code}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è quiz_registrator
        questions_data = []
        for question in selected_questions:
            question_data = {
                "id": question.id,
                "text": question.text,
                "photo_path": question.photo_path,
                "subject_code": subject_code,
                "subject_name": TrialEntService.SUBJECT_NAMES.get(subject_code, ""),
                "microtopic_number": question.microtopic_number,
                "time_limit": question.time_limit or 60,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥
                "options": {},
                "correct_answer_id": None
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            for option in question.answer_options:
                option_letter = chr(65 + option.order_number - 1)  # A, B, C, D...
                question_data["options"][option_letter] = {
                    "id": option.id,
                    "text": option.text
                }
                if option.is_correct:
                    question_data["correct_answer_id"] = option.id

            questions_data.append(question_data)
        
        return questions_data

    @staticmethod
    async def generate_trial_ent_questions(
        required_subjects: List[str], 
        profile_subjects: List[str]
    ) -> Tuple[List[Dict[str, Any]], int]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
        all_questions = []
        total_questions = 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for subject_code in required_subjects:
            count = TrialEntService.QUESTION_COUNTS.get(subject_code, 0)
            if count > 0:
                questions = await TrialEntService.get_random_questions_for_subject(subject_code, count)
                all_questions.extend(questions)
                total_questions += len(questions)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for subject_code in profile_subjects:
            count = TrialEntService.QUESTION_COUNTS.get(subject_code, 0)
            if count > 0:
                questions = await TrialEntService.get_random_questions_for_subject(subject_code, count)
                all_questions.extend(questions)
                total_questions += len(questions)
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞
        random.shuffle(all_questions)
        for i, question in enumerate(all_questions, 1):
            question["number"] = i
        
        return all_questions, total_questions

    @staticmethod
    async def save_trial_ent_result(
        student_id: int,
        required_subjects: List[str],
        profile_subjects: List[str],
        questions_data: List[Dict[str, Any]],
        answers: Dict[int, int]  # question_number -> selected_answer_id
    ) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
        import time
        start_time = time.time()
        logger.info(f"üíæ TRIAL_ENT_SERVICE: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        correct_answers = 0
        question_results_data = []
        
        for question in questions_data:
            question_number = question["number"]
            selected_answer_id = answers.get(question_number)
            is_correct = selected_answer_id == question["correct_answer_id"]
            
            if is_correct:
                correct_answers += 1
            
            question_results_data.append({
                "question_id": question["id"],
                "selected_answer_id": selected_answer_id,
                "is_correct": is_correct,
                "subject_code": question["subject_code"],
                "microtopic_number": question["microtopic_number"]
            })
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        logger.info(f"üìù TRIAL_ENT_SERVICE: –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞...")
        trial_ent_result = await TrialEntResultRepository.create(
            student_id=student_id,
            required_subjects=required_subjects,
            profile_subjects=profile_subjects,
            total_questions=len(questions_data),
            correct_answers=correct_answers
        )
        logger.info(f"‚úÖ TRIAL_ENT_SERVICE: –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω —Å ID {trial_ent_result.id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º test_result_id –∫ –¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        for qr_data in question_results_data:
            qr_data["test_result_id"] = trial_ent_result.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        logger.info(f"üìä TRIAL_ENT_SERVICE: –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(question_results_data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤...")
        await TrialEntQuestionResultRepository.create_batch(question_results_data)

        end_time = time.time()
        duration = end_time - start_time
        logger.info(f"üéâ TRIAL_ENT_SERVICE: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")

        return trial_ent_result.id

    @staticmethod
    async def get_trial_ent_statistics(trial_ent_result_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢"""
        import time
        start_time = time.time()
        logger.info(f"üìà TRIAL_ENT_SERVICE: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {trial_ent_result_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        trial_ent_result = await TrialEntResultRepository.get_by_id(trial_ent_result_id)
        if not trial_ent_result:
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        subject_stats = await TrialEntQuestionResultRepository.get_statistics_by_subject(trial_ent_result_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º
        microtopic_stats = await TrialEntQuestionResultRepository.get_statistics_by_microtopic(trial_ent_result_id)
        
        # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        required_subjects = json.loads(trial_ent_result.required_subjects)
        profile_subjects = json.loads(trial_ent_result.profile_subjects)

        end_time = time.time()
        duration = end_time - start_time
        logger.info(f"üìä TRIAL_ENT_SERVICE: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")

        return {
            "trial_ent_result": trial_ent_result,
            "required_subjects": required_subjects,
            "profile_subjects": profile_subjects,
            "subject_statistics": subject_stats,
            "microtopic_statistics": microtopic_stats,
            "total_correct": trial_ent_result.correct_answers,
            "total_questions": trial_ent_result.total_questions
        }

    @staticmethod
    async def get_student_trial_ent_history(student_id: int, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–±–Ω—ã—Ö –ï–ù–¢ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        results = await TrialEntResultRepository.get_by_student(student_id, limit)
        
        history = []
        for result in results:
            required_subjects = json.loads(result.required_subjects)
            profile_subjects = json.loads(result.profile_subjects)
            
            history.append({
                "id": result.id,
                "required_subjects": required_subjects,
                "profile_subjects": profile_subjects,
                "total_questions": result.total_questions,
                "correct_answers": result.correct_answers,
                "percentage": round((result.correct_answers / result.total_questions) * 100) if result.total_questions > 0 else 0,
                "completed_at": result.completed_at
            })
        
        return history

    @staticmethod
    def get_subject_name(subject_code: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∫–æ–¥—É"""
        return TrialEntService.SUBJECT_NAMES.get(subject_code, subject_code)
