"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ –µ–¥–∏–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
"""
import logging
from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from .states import StudentTestsStates

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
from .base_handlers import router as base_router
from .course_entry_handlers import router as course_entry_router
from .month_handlers import router as month_handlers_router

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
from .course_entry_handlers import (
    show_course_entry_test_results,
    show_course_entry_test_results_final
)
from .month_handlers import (
    generate_month_test_questions,
    finish_month_entry_test,
    finish_month_control_test,
    show_month_control_test_statistics_final
)
from .base_handlers import (
    show_course_entry_subjects,
    show_month_entry_subjects,
    show_month_control_subjects,
    handle_course_entry_subject,
    handle_month_entry_subject,
    handle_month_entry_month,
    handle_month_control_subject,
    handle_month_control_month,
    show_month_entry_test_statistics,
    show_month_control_test_statistics
)
from .menu import show_tests_menu_safe
from ..utils import check_if_id_in_callback_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
router = Router()
router.include_router(base_router)
router.include_router(course_entry_router)
router.include_router(month_handlers_router)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ quiz_registrator
from common.quiz_registrator import register_quiz_handlers
from .states import StudentTestsStates

register_quiz_handlers(
    router=router,
    test_state=StudentTestsStates.test_in_progress
)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤
async def handle_main(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤"""
    from aiogram.types import CallbackQuery, Message
    from .keyboards import get_tests_menu_kb
    from .states import StudentTestsStates

    text = (
        "üß† –¢–µ—Å—Ç-–æ—Ç—á–µ—Ç\n\n"
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –≤—Ö–æ–¥–Ω—ã–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã "
        "–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π.\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–µ—Å—Ç–∞:"
    )

    if isinstance(callback, CallbackQuery):
        try:
            await callback.message.edit_text(text, reply_markup=get_tests_menu_kb())
        except Exception:
            await callback.message.answer(text, reply_markup=get_tests_menu_kb())
    elif isinstance(callback, Message):
        await callback.answer(text, reply_markup=get_tests_menu_kb())

    if state:
        await state.set_state(StudentTestsStates.main)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞
async def show_student_course_entry_microtopics_detailed(callback: CallbackQuery, state: FSMContext, test_result_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    from database import CourseEntryTestResultRepository
    from common.statistics import format_course_entry_test_detailed_microtopics
    from .keyboards import get_back_to_test_kb

    try:
        test_result = await CourseEntryTestResultRepository.get_by_id(test_result_id)
        if not test_result:
            await callback.message.edit_text(
                "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_test_kb()
            )
            return

        result_text = await format_course_entry_test_detailed_microtopics(test_result)
        await callback.message.edit_text(result_text, reply_markup=get_back_to_test_kb())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_back_to_test_kb()
        )


async def show_student_course_entry_microtopics_summary(callback: CallbackQuery, state: FSMContext, test_result_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–∏–ª—å–Ω—ã–º/—Å–ª–∞–±—ã–º —Ç–µ–º–∞–º –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    from database import CourseEntryTestResultRepository
    from common.statistics import format_course_entry_test_summary_microtopics
    from .keyboards import get_back_to_test_kb

    try:
        test_result = await CourseEntryTestResultRepository.get_by_id(test_result_id)
        if not test_result:
            await callback.message.edit_text(
                "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_test_kb()
            )
            return

        result_text = await format_course_entry_test_summary_microtopics(test_result)
        await callback.message.edit_text(result_text, reply_markup=get_back_to_test_kb())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏",
            reply_markup=get_back_to_test_kb()
        )



async def handle_test_in_progress(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    await handle_main(callback, state, user_role)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞
async def handle_course_entry_subjects(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞"""
    from .keyboards import get_test_subjects_kb
    from aiogram.types import CallbackQuery, Message

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
    if isinstance(callback, CallbackQuery):
        # –≠—Ç–æ CallbackQuery
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞:",
            reply_markup=await get_test_subjects_kb("course_entry", user_id=callback.from_user.id)
        )
        if state:
            await state.set_state(StudentTestsStates.course_entry_subjects)
    elif isinstance(callback, Message):
        # –≠—Ç–æ Message
        await callback.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞:",
            reply_markup=await get_test_subjects_kb("course_entry", user_id=callback.from_user.id)
        )

async def handle_course_entry_subject_selected(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞"""
    await handle_course_entry_subjects(callback, state, user_role)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞
async def handle_month_entry_subjects(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞"""
    from .keyboards import get_test_subjects_kb
    from aiogram.types import CallbackQuery, Message

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
    if isinstance(callback, CallbackQuery):
        # –≠—Ç–æ CallbackQuery
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞:",
            reply_markup=await get_test_subjects_kb("month_entry", user_id=callback.from_user.id)
        )
        if state:
            await state.set_state(StudentTestsStates.month_entry_subjects)
    elif isinstance(callback, Message):
        # –≠—Ç–æ Message
        await callback.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞:",
            reply_markup=await get_test_subjects_kb("month_entry", user_id=callback.from_user.id)
        )

async def handle_month_entry_subject_selected(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞"""
    await handle_month_entry_subjects(callback, state, user_role)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞
async def handle_month_control_subjects(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞"""
    from .keyboards import get_test_subjects_kb
    from aiogram.types import CallbackQuery, Message

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
    if isinstance(callback, CallbackQuery):
        # –≠—Ç–æ CallbackQuery
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞:",
            reply_markup=await get_test_subjects_kb("month_control", user_id=callback.from_user.id)
        )
        if state:
            await state.set_state(StudentTestsStates.month_control_subjects)
    elif isinstance(callback, Message):
        # –≠—Ç–æ Message
        await callback.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞:",
            reply_markup=await get_test_subjects_kb("month_control", user_id=callback.from_user.id)
        )

async def handle_month_control_subject_selected(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞"""
    await handle_month_control_subjects(callback, state, user_role)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def handle_course_entry_confirmation(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    await handle_course_entry_subjects(callback, state, user_role)

async def handle_month_entry_confirmation(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    await handle_month_entry_subjects(callback, state, user_role)

async def handle_month_control_confirmation(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    await handle_month_control_subjects(callback, state, user_role)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π "–≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞" (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
async def handle_month_entry_month_selected(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞"""
    from common.utils import check_if_id_in_callback_data
    from .keyboards import get_month_test_kb
    from aiogram.types import CallbackQuery, Message

    if isinstance(callback, CallbackQuery) and state:
        # –ü–æ–ª—É—á–∞–µ–º subject_id –∏–∑ callback_data –∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        subject_id = await check_if_id_in_callback_data(
            callback_starts_with="month_entry_sub_",
            callback=callback,
            state=state,
            id_type="subject_id"
        )

        if subject_id:
            await callback.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:",
                reply_markup=await get_month_test_kb("month_entry", str(subject_id), user_id=callback.from_user.id)
            )
            await state.set_state(StudentTestsStates.month_entry_subject_selected)
            return

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–º–µ—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞
    await handle_month_entry_subjects(callback, state, user_role)

async def handle_month_control_month_selected(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞"""
    print(f"üî• handle_month_control_month_selected –í–´–ó–í–ê–ù!")
    print(f"üî• callback.data: {callback.data if hasattr(callback, 'data') else '–ù–ï–¢ DATA'}")
    print(f"üî• callback type: {type(callback)}")

    from .keyboards import get_month_test_kb
    from aiogram.types import CallbackQuery, Message

    if isinstance(callback, CallbackQuery) and state:
        # –ü–æ–ª—É—á–∞–µ–º subject_id –∏–∑ callback_data –∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        subject_id = await check_if_id_in_callback_data(
            callback_starts_with="month_control_sub_",
            callback=callback,
            state=state,
            id_type="subject_id"
        )

        if subject_id:
            await callback.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:",
                reply_markup=await get_month_test_kb("month_control", str(subject_id), user_id=callback.from_user.id)
            )
            await state.set_state(StudentTestsStates.month_control_subject_selected)
            return

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–º–µ—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞
    await handle_month_control_subjects(callback, state, user_role)
