"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞ (–≤—Ö–æ–¥–Ω—ã–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ)
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from .states import StudentTestsStates
from .keyboards import get_back_to_test_kb
from database.repositories.user_repository import UserRepository
from database.repositories.student_repository import StudentRepository
from database.repositories.subject_repository import SubjectRepository
from database.repositories.month_test_repository import MonthTestRepository
from database.repositories.month_entry_test_result_repository import MonthEntryTestResultRepository
from database.repositories.month_control_test_result_repository import MonthControlTestResultRepository
from database.repositories.microtopic_repository import MicrotopicRepository
from database.repositories.question_repository import QuestionRepository
from common.quiz_registrator import send_next_question, cleanup_test_messages
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = Router()


async def generate_month_test_questions(month_test_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–∫—Ä–æ—Ç–µ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞
        month_test = await MonthTestRepository.get_by_id(month_test_id)
        if not month_test:
            logger.error(f"–¢–µ—Å—Ç –º–µ—Å—è—Ü–∞ —Å ID {month_test_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –º–∏–∫—Ä–æ—Ç–µ–º —Å —Ç–µ—Å—Ç–æ–º –º–µ—Å—è—Ü–∞
        month_test_microtopics = month_test.microtopics
        if not month_test_microtopics:
            logger.error(f"–£ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ {month_test_id} –Ω–µ—Ç –º–∏–∫—Ä–æ—Ç–µ–º")
            return []

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –º–∏–∫—Ä–æ—Ç–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º
        microtopic_numbers = [mtm.microtopic_number for mtm in month_test_microtopics]
        microtopics = await MicrotopicRepository.get_by_subject(month_test.subject_id)
        test_microtopics = [mt for mt in microtopics if mt.number in microtopic_numbers]

        if not test_microtopics:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–∏–∫—Ä–æ—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ {month_test_id}")
            return []

        all_questions = []

        # –î–ª—è –∫–∞–∂–¥–æ–π –º–∏–∫—Ä–æ—Ç–µ–º—ã –±–µ—Ä–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        for microtopic in test_microtopics:
            questions = await QuestionRepository.get_random_questions_by_microtopic(
                microtopic_number=microtopic.number,
                subject_id=month_test.subject_id,
                limit=3
            )
            all_questions.extend(questions)

        if not all_questions:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ {month_test_id}")
            return []

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        random.shuffle(all_questions)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è quiz_registrator
        quiz_questions = []
        for question in all_questions:
            quiz_questions.append({
                'id': question.id,
                'text': question.text,
                'photo_path': question.photo_path,
                'time_limit': question.time_limit,
                'microtopic_number': question.microtopic_number,
                'answer_options': [
                    {
                        'id': opt.id,
                        'text': opt.text,
                        'is_correct': opt.is_correct,
                        'order_number': opt.order_number
                    }
                    for opt in question.answer_options
                ]
            })

        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(quiz_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ {month_test_id}")
        return quiz_questions

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞: {e}")
        return []


async def show_month_entry_test_confirmation(callback: CallbackQuery, state: FSMContext, test_questions, student_id: int, month_test):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞"""
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        avg_time = sum(q.get('time_limit', 60) for q in test_questions) // len(test_questions) if test_questions else 60

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ç–µ–º–∞—Ö
        microtopic_numbers = [mtm.microtopic_number for mtm in month_test.microtopics]
        microtopics = await MicrotopicRepository.get_by_subject(month_test.subject_id)
        test_microtopics = [mt for mt in microtopics if mt.number in microtopic_numbers]

        microtopic_names = ", ".join([mt.name for mt in test_microtopics[:3]])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        if len(test_microtopics) > 3:
            microtopic_names += f" –∏ –µ—â–µ {len(test_microtopics) - 3}"

        text = (
            f"üìÖ –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {month_test.subject.name}\n"
            f"üìù –¢–µ—Å—Ç: {month_test.name}\n"
            f"üìã –í–æ–ø—Ä–æ—Å–æ–≤: {len(test_questions)}\n"
            f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {avg_time} —Å–µ–∫—É–Ω–¥\n"
            f"üéØ –ú–∏–∫—Ä–æ—Ç–µ–º—ã: {microtopic_names}\n\n"
            f"‚ÑπÔ∏è –≠—Ç–æ –≤—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–∞–º –º–µ—Å—è—Ü–∞.\n"
            f"–ü–æ –∫–∞–∂–¥–æ–π –º–∏–∫—Ä–æ—Ç–µ–º–µ –±—É–¥–µ—Ç 3 –≤–æ–ø—Ä–æ—Å–∞.\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"
        )

        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        confirmation_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_month_entry_test")],
            *get_back_to_test_kb().inline_keyboard
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ)
        await state.update_data(
            test_type="month_entry",
            month_test_id=month_test.id,
            student_id=student_id,
            questions=test_questions,  # test_questions —É–∂–µ —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ generate_month_test_questions
            confirmation_message_id=callback.message.message_id
        )

        await callback.message.edit_text(text, reply_markup=confirmation_kb)
        await state.set_state(StudentTestsStates.month_entry_confirmation)

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ {month_test.name}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_test_kb()
        )


async def show_month_control_test_confirmation(callback: CallbackQuery, state: FSMContext, test_questions, student_id: int, month_test):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞"""
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        avg_time = sum(q.get('time_limit', 60) for q in test_questions) // len(test_questions) if test_questions else 60

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ç–µ–º–∞—Ö
        microtopic_numbers = [mtm.microtopic_number for mtm in month_test.microtopics]
        microtopics = await MicrotopicRepository.get_by_subject(month_test.subject_id)
        test_microtopics = [mt for mt in microtopics if mt.number in microtopic_numbers]

        microtopic_names = ", ".join([mt.name for mt in test_microtopics[:3]])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        if len(test_microtopics) > 3:
            microtopic_names += f" –∏ –µ—â–µ {len(test_microtopics) - 3}"

        text = (
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞\n\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {month_test.subject.name}\n"
            f"üìù –¢–µ—Å—Ç: {month_test.name}\n"
            f"üìã –í–æ–ø—Ä–æ—Å–æ–≤: {len(test_questions)}\n"
            f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {avg_time} —Å–µ–∫—É–Ω–¥\n"
            f"üéØ –ú–∏–∫—Ä–æ—Ç–µ–º—ã: {microtopic_names}\n\n"
            f"‚ÑπÔ∏è –≠—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ–º–∞–º –º–µ—Å—è—Ü–∞.\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω —Å –≤—Ö–æ–¥–Ω—ã–º —Ç–µ—Å—Ç–æ–º.\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"
        )

        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        confirmation_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_month_control_test")],
            *get_back_to_test_kb().inline_keyboard
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ)
        await state.update_data(
            test_type="month_control",
            month_test_id=month_test.id,
            student_id=student_id,
            questions=test_questions,  # test_questions —É–∂–µ —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ generate_month_test_questions
            confirmation_message_id=callback.message.message_id
        )

        await callback.message.edit_text(text, reply_markup=confirmation_kb)
        await state.set_state(StudentTestsStates.month_control_confirmation)

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ {month_test.name}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_test_kb()
        )


async def finish_month_entry_test(chat_id: int, state: FSMContext, bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î"""
    try:
        data = await state.get_data()
        question_results = data.get("question_results", [])
        month_test_id = data.get("month_test_id")
        student_id = data.get("student_id")

        if not month_test_id or not student_id:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–µ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–µ")
            await bot.send_message(
                chat_id,
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_back_to_test_kb()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ –ë–î
        test_result = await MonthEntryTestResultRepository.create_test_result(
            student_id=student_id,
            month_test_id=month_test_id,
            question_results=question_results
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º
        microtopic_stats = await MonthEntryTestResultRepository.get_microtopic_statistics(test_result.id)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º
        month_test = await MonthTestRepository.get_by_id(month_test_id)
        microtopics = await MicrotopicRepository.get_by_subject(month_test.subject_id)
        microtopic_names = {mt.number: mt.name for mt in microtopics}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_text = f"üìä –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        result_text += f"üìó {month_test.subject.name}:\n"
        result_text += f"–¢–µ—Å—Ç: {month_test.name}\n"
        result_text += f"–í–µ—Ä–Ω—ã—Ö: {test_result.correct_answers} / {test_result.total_questions}\n"
        result_text += f"–ü—Ä–æ—Ü–µ–Ω—Ç: {test_result.score_percentage}%\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º
        if microtopic_stats:
            result_text += "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º:\n"
            for microtopic_num, stats in microtopic_stats.items():
                microtopic_name = microtopic_names.get(microtopic_num, f"–ú–∏–∫—Ä–æ—Ç–µ–º–∞ {microtopic_num}")
                percentage = stats['percentage']
                status = "‚úÖ" if percentage >= 80 else "‚ùå" if percentage <= 40 else "‚ö†Ô∏è"
                result_text += f"‚Ä¢ {microtopic_name} ‚Äî {percentage}% {status}\n"

        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        await cleanup_test_messages(chat_id, data, bot)

        await bot.send_message(
            chat_id,
            result_text,
            reply_markup=get_back_to_test_kb()
        )
        await state.set_state(StudentTestsStates.test_result)

        logger.info(f"–¢–µ—Å—Ç –º–µ—Å—è—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: —Å—Ç—É–¥–µ–Ω—Ç {student_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç {test_result.score_percentage}%")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞: {e}")
        await bot.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞",
            reply_markup=get_back_to_test_kb()
        )


async def finish_month_control_test(chat_id: int, state: FSMContext, bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î"""
    try:
        data = await state.get_data()
        question_results = data.get("question_results", [])
        month_test_id = data.get("month_test_id")
        student_id = data.get("student_id")

        if not month_test_id or not student_id:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–µ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–µ")
            await bot.send_message(
                chat_id,
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_back_to_test_kb()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ –ë–î
        test_result = await MonthControlTestResultRepository.create_test_result(
            student_id=student_id,
            month_test_id=month_test_id,
            question_results=question_results
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await show_month_control_test_statistics_final(chat_id, state, test_result, bot)

        logger.info(f"–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {test_result.student_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞: {e}")
        await bot.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞",
            reply_markup=get_back_to_test_kb()
        )


async def show_month_control_test_statistics_final(chat_id: int, state: FSMContext, test_result, bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º
        microtopic_stats = await MonthControlTestResultRepository.get_microtopic_statistics(test_result.id)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–µ–º
        microtopics = await MicrotopicRepository.get_by_subject(test_result.month_test.subject_id)
        microtopic_names = {mt.number: mt.name for mt in microtopics}

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        entry_test = None
        comparison_text = ""
        if test_result.month_test.parent_test_id:
            entry_test = await MonthTestRepository.get_by_id(test_result.month_test.parent_test_id)
            if entry_test:
                entry_result = await MonthEntryTestResultRepository.get_by_student_and_month_test(
                    test_result.student_id, entry_test.id
                )
                if entry_result:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤—Ö–æ–¥–Ω—ã–º —Ç–µ—Å—Ç–æ–º
                    comparison_text = f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤—Ö–æ–¥–Ω—ã–º —Ç–µ—Å—Ç–æ–º:\n"
                    comparison_text += f"–í–µ—Ä–Ω—ã—Ö: {entry_result.correct_answers}/{entry_result.total_questions} ‚Üí {test_result.correct_answers}/{test_result.total_questions}\n"

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–æ—Å—Ç
                    if entry_result.score_percentage > 0:
                        growth = ((test_result.score_percentage - entry_result.score_percentage) / entry_result.score_percentage) * 100
                        if growth > 0:
                            comparison_text += f"üìà –û–±—â–∏–π —Ä–æ—Å—Ç: +{growth:.1f}%\n"
                        elif growth < 0:
                            comparison_text += f"üìâ –û–±—â–µ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: {growth:.1f}%\n"
                        else:
                            comparison_text += f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–ª—Å—è –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ\n"
                    else:
                        if test_result.score_percentage > 0:
                            comparison_text += f"üìà –†–æ—Å—Ç: +{test_result.score_percentage:.1f} –ø.–ø.\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"üéâ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        result_text += f"üìó {test_result.month_test.subject.name}\n"
        result_text += f"–¢–µ—Å—Ç: {test_result.month_test.name}\n"
        result_text += f"–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {test_result.correct_answers} / {test_result.total_questions}\n"
        result_text += f"–ü—Ä–æ—Ü–µ–Ω—Ç: {test_result.score_percentage}%\n"
        result_text += comparison_text

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º
        if microtopic_stats:
            result_text += "\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º:\n"
            for microtopic_num, stats in microtopic_stats.items():
                microtopic_name = microtopic_names.get(microtopic_num, f"–ú–∏–∫—Ä–æ—Ç–µ–º–∞ {microtopic_num}")
                percentage = stats['percentage']
                status = "‚úÖ" if percentage >= 80 else "‚ùå" if percentage <= 40 else "‚ö†Ô∏è"
                result_text += f"‚Ä¢ {microtopic_name} ‚Äî {percentage}% {status}\n"

        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        await cleanup_test_messages(chat_id, data, bot)

        await bot.send_message(
            chat_id,
            result_text,
            reply_markup=get_back_to_test_kb()
        )
        await state.set_state(StudentTestsStates.test_result)

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {test_result.student_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞: {e}")
        await bot.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_back_to_test_kb()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç" –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –º–µ—Å—è—Ü–∞
@router.callback_query(StudentTestsStates.month_entry_confirmation, F.data == "start_month_entry_test")
async def start_month_entry_test_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        questions = data.get("questions")
        month_test_id = data.get("month_test_id")
        student_id = data.get("student_id")

        if not all([questions, month_test_id, student_id]):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è quiz_registrator
        await state.update_data(
            month_test_id=month_test_id,
            student_id=student_id,
            questions=questions,
            q_index=0,
            score=0,
            question_results=[]
        )

        # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞
        await state.set_state(StudentTestsStates.test_in_progress)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ quiz_registrator
        await send_next_question(
            chat_id=callback.message.chat.id,
            state=state,
            bot=callback.bot,
            finish_callback=finish_month_entry_test
        )

        logger.info(f"–ó–∞–ø—É—â–µ–Ω –≤—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_test_kb()
        )


@router.callback_query(StudentTestsStates.month_control_confirmation, F.data == "start_month_control_test")
async def start_month_control_test_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        questions = data.get("questions")
        month_test_id = data.get("month_test_id")
        student_id = data.get("student_id")

        if not all([questions, month_test_id, student_id]):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è quiz_registrator
        await state.update_data(
            month_test_id=month_test_id,
            student_id=student_id,
            questions=questions,
            q_index=0,
            score=0,
            question_results=[]
        )

        # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞
        await state.set_state(StudentTestsStates.test_in_progress)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ quiz_registrator
        await send_next_question(
            chat_id=callback.message.chat.id,
            state=state,
            bot=callback.bot,
            finish_callback=finish_month_control_test
        )

        logger.info(f"–ó–∞–ø—É—â–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_test_kb()
        )


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ transitions.py
async def handle_month_entry_confirmation(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    from .base_handlers import show_month_entry_subjects
    await show_month_entry_subjects(callback, state)


async def handle_month_control_confirmation(callback, state=None, user_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    from .base_handlers import show_month_control_subjects
    await show_month_control_subjects(callback, state)
