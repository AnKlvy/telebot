"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∫—É—Ä—Å–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from .states import StudentTestsStates
from .keyboards import get_back_to_test_kb
from database.repositories.user_repository import UserRepository
from database.repositories.student_repository import StudentRepository
from database.repositories.subject_repository import SubjectRepository
from database.repositories.question_repository import QuestionRepository
from database.repositories.course_entry_test_result_repository import CourseEntryTestResultRepository
from common.quiz_registrator import send_next_question, cleanup_test_messages

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = Router()


async def handle_course_entry_test_real(callback: CallbackQuery, state: FSMContext, subject_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
    telegram_id = callback.from_user.id
    logger.info(f"–í–´–ó–û–í: handle_course_entry_test_real, telegram_id={telegram_id}, subject_id={subject_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        user = await UserRepository.get_by_telegram_id(telegram_id)
        if not user:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                reply_markup=get_back_to_test_kb()
            )
            return

        student = await StudentRepository.get_by_user_id(user.id)
        if not student:
            await callback.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                reply_markup=get_back_to_test_kb()
            )
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º subject_id –≤ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_mapping = {
            "kz": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
            "mathlit": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
            "math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "geo": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
            "bio": "–ë–∏–æ–ª–æ–≥–∏—è",
            "chem": "–•–∏–º–∏—è",
            "inf": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            "world": "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
            "python": "Python",
            "js": "JavaScript",
            "java": "Java",
            "physics": "–§–∏–∑–∏–∫–∞"
        }

        subject_name = subject_mapping.get(subject_id, subject_id)
        subject = await SubjectRepository.get_by_name(subject_name)
        if not subject:
            await callback.message.edit_text(
                f"‚ùå –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_test_kb()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
        has_taken = await CourseEntryTestResultRepository.has_student_taken_test(student.id, subject.id)

        if has_taken:
            # –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info(f"–¢–ï–°–¢ –£–ñ–ï –ü–†–û–ô–î–ï–ù: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î")
            test_result = await CourseEntryTestResultRepository.get_by_student_and_subject(student.id, subject.id)

            if test_result:
                await show_course_entry_test_results(callback, state, test_result)
            else:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞",
                    reply_markup=get_back_to_test_kb()
                )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        questions = await QuestionRepository.get_random_questions_for_course_entry_test(
            telegram_id, subject.id, max_questions=30
        )

        if not questions:
            await callback.message.edit_text(
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å—ã —Å —ç—Ç–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º –∏–ª–∏ –≤ –∫—É—Ä—Å–∞—Ö –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.",
                reply_markup=get_back_to_test_kb()
            )
            return

        logger.info(f"–ù–ê–ô–î–ï–ù–û –í–û–ü–†–û–°–û–í: {len(questions)} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}")

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ quiz_registrator
        await start_course_entry_test_with_quiz(callback, state, questions, student.id, subject.id, subject_name)

    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –≤ handle_course_entry_test_real: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_test_kb()
        )


async def start_course_entry_test_with_quiz(callback: CallbackQuery, state: FSMContext, questions, student_id: int, subject_id: int, subject_name: str):
    """–ó–∞–ø—É—Å–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ quiz_registrator"""
    logger.info(f"–ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è quiz_registrator
    quiz_questions = []
    for question in questions:
        quiz_questions.append({
            'id': question.id,
            'text': question.text,
            'photo_path': question.photo_path,
            'time_limit': question.time_limit,
            'microtopic_number': question.microtopic_number,
            'answer_options': [
                {
                    'id': opt.id,
                    'text': opt.text,
                    'is_correct': opt.is_correct,
                    'order_number': opt.order_number
                }
                for opt in question.answer_options
            ]
        })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        test_type="course_entry",
        student_id=student_id,
        subject_id=subject_id,
        subject_name=subject_name,
        questions=quiz_questions,
        q_index=0,
        score=0,
        question_results=[]
    )

    # –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    async def finish_course_entry_test(chat_id, state_inner, bot):
        await finish_course_entry_test_handler(chat_id, state_inner, bot)

    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞
    await state.set_state(StudentTestsStates.test_in_progress)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(
        chat_id=callback.message.chat.id,
        state=state,
        bot=callback.bot,
        finish_callback=finish_course_entry_test
    )


async def finish_course_entry_test_handler(chat_id: int, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞"""
    data = await state.get_data()
    student_id = data.get("student_id")
    subject_id = data.get("subject_id")
    subject_name = data.get("subject_name")
    question_results = data.get("question_results", [])
    score = data.get("score", 0)

    logger.info(f"–ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ê: —Å—Ç—É–¥–µ–Ω—Ç {student_id}, –ø—Ä–µ–¥–º–µ—Ç {subject_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ {len(question_results)}")

    try:
        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        await cleanup_test_messages(chat_id, data, bot)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
        test_result = await CourseEntryTestResultRepository.create_test_result(
            student_id=student_id,
            subject_id=subject_id,
            question_results=question_results
        )

        logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–•–†–ê–ù–ï–ù: ID {test_result.id}, –±–∞–ª–ª–æ–≤ {test_result.correct_answers}/{test_result.total_questions}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_course_entry_test_results_final(chat_id, state, test_result, bot)

    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

        await bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def show_course_entry_test_results(callback: CallbackQuery, state: FSMContext, test_result):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞ (–¥–ª—è —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)"""
    from common.statistics import format_course_entry_test_result
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_text = await format_course_entry_test_result(test_result)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–∫ —É –∫—É—Ä–∞—Ç–æ—Ä–∞
        buttons = [
            [InlineKeyboardButton(
                text="üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º",
                callback_data=f"student_course_entry_detailed_{test_result.id}"
            )],
            [InlineKeyboardButton(
                text="üí™ –°–∏–ª—å–Ω—ã–µ/—Å–ª–∞–±—ã–µ —Ç–µ–º—ã",
                callback_data=f"student_course_entry_summary_{test_result.id}"
            )]
        ]
        buttons.extend(get_back_to_test_kb().inline_keyboard)

        await callback.message.edit_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(StudentTestsStates.test_result)

    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞.",
            reply_markup=get_back_to_test_kb()
        )


async def show_course_entry_test_results_final(chat_id: int, state: FSMContext, test_result, bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    from common.statistics import format_course_entry_test_result
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_text = await format_course_entry_test_result(test_result)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–∫ —É –∫—É—Ä–∞—Ç–æ—Ä–∞
        buttons = [
            [InlineKeyboardButton(
                text="üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º",
                callback_data=f"student_course_entry_detailed_{test_result.id}"
            )],
            [InlineKeyboardButton(
                text="üí™ –°–∏–ª—å–Ω—ã–µ/—Å–ª–∞–±—ã–µ —Ç–µ–º—ã",
                callback_data=f"student_course_entry_summary_{test_result.id}"
            )]
        ]
        buttons.extend(get_back_to_test_kb().inline_keyboard)

        await bot.send_message(
            chat_id,
            result_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(StudentTestsStates.test_result)

    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

        await bot.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞."
        )
