from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from .states import GroupStates
from .keyboards import get_groups_kb, get_students_kb, get_student_profile_kb
from common.keyboards import get_main_menu_back_button

async def show_groups(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator)
    """
    # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏ —É—á–∏—Ç–µ–ª—è
    user_telegram_id = callback.from_user.id if (role == "curator" or role == "teacher") else None

    print(f"üîç HANDLER: show_groups –¥–ª—è {role}, telegram_id={user_telegram_id}")

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=await get_groups_kb(role, user_telegram_id)
    )

async def show_group_students(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator, teacher)
    """
    current_state = await state.get_state()
    data = await state.get_data()


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
    if callback.data.startswith(f"{role}_group_"):
        # –ù–æ–≤—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        group_id_str = callback.data.replace(f"{role}_group_", "")
    elif callback.data == "back" and data.get('selected_group'):
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        group_id_str = str(data.get('selected_group'))
    else:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å group_id")
        print(f"   üìã callback.data –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '{role}_group_' –∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
            reply_markup=get_main_menu_back_button()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ group_id —á–∏—Å–ª–æ–º (—Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –ë–î) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (—Ö–∞—Ä–¥–∫–æ–¥)
    try:
        group_id = int(group_id_str)
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from database import GroupRepository
        group = await GroupRepository.get_by_id(group_id)

        if group:
            group_name = f"{group.name}"
            if group.subject:
                group_name += f" ({group.subject.name})"
        else:
            group_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"

        print(f"   üìñ –ì—Ä—É–ø–ø–∞ –∏–∑ –ë–î: ID={group_id}, –ù–∞–∑–≤–∞–Ω–∏–µ={group_name}")

    except ValueError:
        # –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π ID - –æ—à–∏–±–∫–∞, —Ç–∞–∫ –∫–∞–∫ —Ö–∞—Ä–¥–∫–æ–¥ —É–±—Ä–∞–Ω
        print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π group_id: {group_id_str}. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π ID")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã",
            reply_markup=get_main_menu_back_button()
        )
        return

    await state.update_data(selected_group=group_id, group_name=group_name)
    print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: selected_group={group_id}, group_name={group_name}")

    await callback.message.edit_text(
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=await get_students_kb(role, group_id)
    )
    print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ–∫–∞–∑–∞–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {group_id}")

async def show_student_profile(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator, teacher)
    """
    # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ callback_data
    student_id_str = callback.data.replace(f"{role}_student_", "")
    print(f"üîç –ü–æ–ª—É—á–µ–Ω callback_data: {callback.data}")
    print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π student_id_str: {student_id_str}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ student_id —á–∏—Å–ª–æ–º (—Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –ë–î) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (—Ö–∞—Ä–¥–∫–æ–¥)
    try:
        student_id = int(student_id_str)
        print(f"üîç –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π student_id: {student_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from database import StudentRepository, HomeworkResultRepository

        print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –ë–î —Å ID: {student_id}")
        student_obj = await StudentRepository.get_by_id(student_id)
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_obj is not None}")

        if student_obj:
            print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {student_obj.user.name}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞
            homework_results = await HomeworkResultRepository.get_by_student(student_id)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –î–ó: {len(homework_results)}")

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –î–ó (–Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)
            unique_homework_ids = set(result.homework_id for result in homework_results)
            unique_homeworks_count = len(unique_homework_ids)

            total_homeworks = len(homework_results)  # –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ (–≤–∫–ª—é—á–∞—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ)
            total_points = sum(result.points_earned for result in homework_results)
            print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫={total_homeworks}, –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –î–ó={unique_homeworks_count}, –ë–∞–ª–ª—ã={total_points}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–ª–æ–≤
            if total_points >= 1000:
                level = "üèÜ –ú–∞—Å—Ç–µ—Ä"
            elif total_points >= 500:
                level = "üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"
            elif total_points >= 200:
                level = "üß™ –ü—Ä–∞–∫—Ç–∏–∫"
            else:
                level = "üìö –ù–æ–≤–∏—á–æ–∫"

            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –î–ó
            last_homework_date = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if homework_results:
                last_result = max(homework_results, key=lambda x: x.completed_at)
                last_homework_date = last_result.completed_at.strftime("%d.%m.%Y")

            # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –î–ó –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            try:
                from database import HomeworkRepository

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º —Å—Ç—É–¥–µ–Ω—Ç–∞
                all_available_homeworks = 0
                if student_obj.groups:
                    subject_ids = []
                    for group in student_obj.groups:
                        if group.subject and group.subject.id not in subject_ids:
                            subject_ids.append(group.subject.id)

                    for subject_id in subject_ids:
                        subject_homeworks = await HomeworkRepository.get_by_subject(subject_id)
                        all_available_homeworks += len(subject_homeworks)

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç: (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ / –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö) * 100
                if all_available_homeworks > 0:
                    completion_percentage = round((unique_homeworks_count / all_available_homeworks) * 100, 1)
                else:
                    completion_percentage = 0

                print(f"üìä –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞: {unique_homeworks_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ / {all_available_homeworks} –¥–æ—Å—Ç—É–ø–Ω–æ = {completion_percentage}%")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                completion_percentage = 0

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–∞
            subjects = []
            if student_obj.groups:
                for group in student_obj.groups:
                    if group.subject and group.subject.name not in subjects:
                        subjects.append(group.subject.name)

            subject_str = ", ".join(subjects) if subjects else "–ù–µ —É–∫–∞–∑–∞–Ω"

            student = {
                "name": student_obj.user.name,
                "telegram": f"@{student_obj.user.telegram_id}",
                "subject": subject_str,
                "points": total_points,
                "level": level,
                "homeworks_completed": total_homeworks,
                "unique_homeworks_completed": unique_homeworks_count,
                "last_homework_date": last_homework_date,
                "completion_percentage": completion_percentage
            }
        else:
            print(f"‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await callback.message.edit_text(
                f"‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                f"ID —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_id}\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—É–¥–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_student_profile_kb(role)
            )
            return

    except (ValueError, Exception) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ ID {student_id_str}: {e}")
        import traceback
        traceback.print_exc()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
            f"ID —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_id_str}\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_student_profile_kb(role)
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_student_id=student_id_str, student=student)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"üë§ {student['name']}\n"
        f"üìû Telegram: {student['telegram']}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {student['subject']}\n"
        f"üéØ –ë–∞–ª–ª—ã: {student['points']}\n"
        f"üìà –£—Ä–æ–≤–µ–Ω—å: {student['level']}\n"
        f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –î–ó: {student['unique_homeworks_completed']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ({student['homeworks_completed']} –≤—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫)\n"
        f"üïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –î–ó: {student['last_homework_date']}\n"
        f"üìä % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó: {student['completion_percentage']}%",
        reply_markup=get_student_profile_kb(role)
    )
