from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from common.keyboards import get_main_menu_back_button

async def get_groups_kb(role: str, user_telegram_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""

    print(f"üîç GROUPS: role={role}, telegram_id={user_telegram_id}")

    # –î–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if role == "curator" and user_telegram_id:
        try:
            from database import UserRepository, CuratorRepository

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user = await UserRepository.get_by_telegram_id(user_telegram_id)
            print(f"üîç GROUPS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name if user else '–ù–ï –ù–ê–ô–î–ï–ù'}")

            if user:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ user_id
                curator = await CuratorRepository.get_by_user_id(user.id)
                print(f"üîç GROUPS: –ö—É—Ä–∞—Ç–æ—Ä: {'ID=' + str(curator.id) if curator else '–ù–ï –ù–ê–ô–î–ï–ù'}")

                if curator:
                    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫—É—Ä–∞—Ç–æ—Ä–∞
                    groups = await CuratorRepository.get_curator_groups(curator.id)
                    print(f"üîç GROUPS: –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}")

                    if not groups:
                        # –ï—Å–ª–∏ —É –∫—É—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø
                        print("‚ùå GROUPS: –£ –∫—É—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø")
                        return InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="no_groups")],
                            *get_main_menu_back_button()
                        ])

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –∫—É—Ä–∞—Ç–æ—Ä–∞
                    print(f"‚úÖ GROUPS: –°–æ–∑–¥–∞–µ–º {len(groups)} –∫–Ω–æ–ø–æ–∫")
                    buttons = []
                    for group in groups:
                        group_name = f"{group.name}"
                        if group.subject:
                            group_name += f" ({group.subject.name})"

                        buttons.append([
                            InlineKeyboardButton(
                                text=f"üë• {group_name}",
                                callback_data=f"{role}_group_{group.id}"
                            )
                        ])

                    buttons.extend(get_main_menu_back_button())
                    return InlineKeyboardMarkup(inline_keyboard=buttons)
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º
                    print(f"‚ùå GROUPS: {user.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º")
                    return InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º", callback_data="not_curator")],
                        *get_main_menu_back_button()
                    ])
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                print(f"‚ùå GROUPS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", callback_data="user_not_found")],
                    *get_main_menu_back_button()
                ])

        except Exception as e:
            print(f"‚ùå GROUPS: –û—à–∏–±–∫–∞ - {e}")
            import traceback
            traceback.print_exc()
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø", callback_data="error_groups")],
                *get_main_menu_back_button()
            ])
    else:
        print(f"üîç GROUPS: –•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã (role={role})")

    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω telegram_id - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìó –•–∏–º–∏—è ‚Äî –ü—Ä–µ–º–∏—É–º", callback_data=f"{role}_group_chem_premium")],
        [InlineKeyboardButton(text="üìò –ë–∏–æ–ª–æ–≥–∏—è ‚Äî –ò–Ω—Ç–µ–Ω—Å–∏–≤", callback_data=f"{role}_group_bio_intensive")],
        [InlineKeyboardButton(text="üìï –ò—Å—Ç–æ—Ä–∏—è ‚Äî –ë–∞–∑–æ–≤—ã–π", callback_data=f"{role}_group_history_basic")],
        *get_main_menu_back_button()
    ])

async def get_students_kb(role: str, group_id) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø–µ"""

    # –ï—Å–ª–∏ group_id - —ç—Ç–æ —á–∏—Å–ª–æ (—Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã), –ø–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
    if isinstance(group_id, int):
        try:
            from database import StudentRepository

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            students = await StudentRepository.get_by_group(group_id)

            if not students:
                # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                return InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="no_students")],
                    *get_main_menu_back_button()
                ])

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            buttons = []
            for student in students:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üë§ {student.user.name}",
                        callback_data=f"{role}_student_{student.id}"
                    )
                ])

            buttons.extend(get_main_menu_back_button())
            return InlineKeyboardMarkup(inline_keyboard=buttons)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="error_students")],
                *get_main_menu_back_button()
            ])

    # –î–ª—è —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    buttons = [
        [InlineKeyboardButton(text="üë§ –ê—Ä—É–∂–∞–Ω –ê—Ö–º–µ—Ç–æ–≤–∞", callback_data=f"{role}_student_1")],
        [InlineKeyboardButton(text="üë§ –ú–∞–¥–∏—è—Ä –°–∞–ø–∞—Ä–æ–≤", callback_data=f"{role}_student_2")],
        [InlineKeyboardButton(text="üë§ –î–∏–∞–Ω–∞ –ï—Ä–∂–∞–Ω–æ–≤–∞", callback_data=f"{role}_student_3")],
        *get_main_menu_back_button()
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_student_profile_kb(role: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        *get_main_menu_back_button()
    ])