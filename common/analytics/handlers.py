from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from .keyboards import (
    get_analytics_menu_kb, get_groups_for_analytics_kb,
    get_students_for_analytics_kb, get_groups_by_curator_kb,
    get_back_to_student_analytics_kb, get_subjects_for_analytics_kb,
    get_back_to_analytics_kb, get_subject_microtopics_kb,
    get_back_to_subject_analytics_kb, get_general_microtopics_kb,
    get_back_to_general_analytics_kb
)
from common.utils import check_if_id_in_callback_data
from common.statistics import (
    get_student_microtopics_detailed,
    get_student_strong_weak_summary,
    show_student_analytics,
    get_subject_stats,
    format_subject_stats,
    get_subject_microtopics_detailed,
    get_subject_microtopics_summary,
    get_general_stats,
    format_general_stats,
    get_general_microtopics_detailed,
    get_general_microtopics_summary
)


async def show_analytics_menu(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    
    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator)
    """
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=get_analytics_menu_kb(role)
    )
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è

async def select_group_for_student_analytics(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫—É

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator)
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    curator_id = data.get('selected_curator')

    if curator_id and role == "manager":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫—É—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≥—Ä—É–ø–ø—ã
        keyboard = await get_groups_by_curator_kb(curator_id)
    else:
        # –ü–µ—Ä–µ–¥–∞–µ–º Telegram ID –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        user_telegram_id = callback.from_user.id if role == "curator" else None
        keyboard = await get_groups_for_analytics_kb(role, user_telegram_id)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=keyboard
    )
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è

async def select_student_for_analytics(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator)
    """
    group_id = await check_if_id_in_callback_data("analytics_group_", callback, state, "group")

    
    students_kb = await get_students_for_analytics_kb(group_id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=students_kb
    )
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è


async def select_group_for_group_analytics(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator)
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    curator_id = data.get('selected_curator')

    if curator_id and role == "manager":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫—É—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≥—Ä—É–ø–ø—ã
        keyboard = await get_groups_by_curator_kb(curator_id)
    else:
        # –ü–µ—Ä–µ–¥–∞–µ–º Telegram ID –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        user_telegram_id = callback.from_user.id if role == "curator" else None
        keyboard = await get_groups_for_analytics_kb(role, user_telegram_id)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=keyboard
    )
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è


async def show_microtopics_detailed(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º student_id –∏ subject_id –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: microtopics_detailed_STUDENT_ID_SUBJECT_ID
    parts = callback.data.split("_")
    if len(parts) >= 4:
        student_id = int(parts[2])
        subject_id = int(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result_text = await get_student_microtopics_detailed(student_id, subject_id)

        await callback.message.edit_text(
            result_text,
            reply_markup=get_back_to_student_analytics_kb(student_id, subject_id)
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_back_to_student_analytics_kb(0, 0)
        )


async def show_microtopics_summary(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–∏–ª—å–Ω—ã–º –∏ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º student_id –∏ subject_id –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: microtopics_summary_STUDENT_ID_SUBJECT_ID
    parts = callback.data.split("_")
    if len(parts) >= 4:
        student_id = int(parts[2])
        subject_id = int(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å–∏–ª—å–Ω—ã–º –∏ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º
        result_text = await get_student_strong_weak_summary(student_id, subject_id)

        await callback.message.edit_text(
            result_text,
            reply_markup=get_back_to_student_analytics_kb(student_id, subject_id)
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_back_to_student_analytics_kb(0, 0)
        )


async def back_to_student_analytics(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º student_id –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: back_to_student_STUDENT_ID
    parts = callback.data.split("_")
    if len(parts) >= 4:
        student_id = parts[3]

        # –ò–º–∏—Ç–∏—Ä—É–µ–º callback –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        callback.data = f"analytics_student_{student_id}"
        await show_student_analytics(callback, state, role)
    else:
        from .keyboards import get_back_to_analytics_kb
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_back_to_analytics_kb()
        )


async def select_subject_for_analytics(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator, manager)
    """
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=await get_subjects_for_analytics_kb(role)
    )


async def show_subject_analytics(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator, manager)
    """
    subject_id = await check_if_id_in_callback_data("analytics_subject_", callback, state, "subject")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    subject_data = await get_subject_stats(subject_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    result_text = f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_data['name']}\n\n"
    result_text += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {len(subject_data['groups'])}\n"

    if subject_data['groups']:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó
        avg_homework = sum(group['homework_completion'] for group in subject_data['groups']) / len(subject_data['groups'])
        result_text += f"üìä –°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó: {avg_homework:.1f}%\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        result_text += "üìã –ì—Ä—É–ø–ø—ã:\n"
        for group in subject_data['groups']:
            result_text += f"‚Ä¢ {group['name']} - {group['homework_completion']}%\n"
    else:
        result_text += "‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

    result_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:"

    await callback.message.edit_text(
        result_text,
        reply_markup=get_subject_microtopics_kb(int(subject_id))
    )


async def show_subject_microtopics_detailed(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º –ø—Ä–µ–¥–º–µ—Ç–∞

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º subject_id –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: subject_microtopics_detailed_SUBJECT_ID
    parts = callback.data.split("_")
    if len(parts) >= 4:
        subject_id = int(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result_text = await get_subject_microtopics_detailed(subject_id)

        await callback.message.edit_text(
            result_text,
            reply_markup=get_back_to_subject_analytics_kb(subject_id)
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_back_to_analytics_kb()
        )


async def show_subject_microtopics_summary(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–∏–ª—å–Ω—ã–º –∏ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º –ø—Ä–µ–¥–º–µ—Ç–∞

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º subject_id –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: subject_microtopics_summary_SUBJECT_ID
    parts = callback.data.split("_")
    if len(parts) >= 4:
        subject_id = int(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å–∏–ª—å–Ω—ã–º –∏ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º
        result_text = await get_subject_microtopics_summary(subject_id)

        await callback.message.edit_text(
            result_text,
            reply_markup=get_back_to_subject_analytics_kb(subject_id)
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_back_to_analytics_kb()
        )


