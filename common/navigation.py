import logging
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import Dict

async def log(name, role, state):
    logging.info(f"–í–´–ó–û–í: {name} | –†–û–õ–¨: {role} | –°–û–°–¢–û–Ø–ù–ò–ï: {await state.get_state()}")

class NavigationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π"""
    
    def __init__(self):
        self.transitions_map = {}  # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        self.handlers_map = {}     # –°–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    
    def register_role(self, role: str, transitions: Dict, handlers: Dict):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–æ–ª–∏"""
        self.transitions_map[role] = transitions
        self.handlers_map[role] = handlers
    
    async def handle_back(self, callback: CallbackQuery, state: FSMContext, user_role: str):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
        current_state = await state.get_state()
        data = await state.get_data()
        print(f"   üíæ FSM data: {data}")

        role_to_use = await get_role_to_use(state, user_role)
        print(f"   üéØ role_to_use: {role_to_use}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–∏ (–∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)
        transitions = self.transitions_map.get(role_to_use, {})
        handlers = self.handlers_map.get(role_to_use, {})
        
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –Ω–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        if not current_state or current_state not in transitions:
            print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
            handler = handlers.get(None)
            if handler:
                print(f"DEBUG: –ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è None: {handler}")
                await callback.message.delete()
                await handler(callback.message)
                await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        previous_state = transitions.get(current_state)
        print(f"DEBUG: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {previous_state}")
        
        if previous_state is None:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏
            print(f"DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏: {role_to_use}")
            handler = handlers.get(None)
            if handler:
                await callback.message.delete()
                await handler(callback.message)
                await state.clear()
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            print(f"DEBUG: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {previous_state}")
            await state.set_state(previous_state)
            handler = handlers.get(previous_state)
            if handler:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
                import inspect
                sig = inspect.signature(handler)
                param_count = len(sig.parameters)

                # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                if param_count == 2:  # callback, state
                    await handler(callback, state)
                elif param_count == 3:  # callback, state, role
                    await handler(callback, state, role_to_use)
                else:
                    print(f"DEBUG: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {param_count}")
            else:
                # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {previous_state} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                main_handler = handlers.get(None)
                if main_handler:
                    await callback.message.delete()
                    await main_handler(callback.message)
                    await state.clear()
    
    async def handle_main_menu(self, callback: CallbackQuery, state: FSMContext, user_role: str):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await log("handle_main_menu", user_role, state)
        print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'. –†–æ–ª—å: {user_role}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        print(f"DEBUG: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

        role_to_use = await get_role_to_use(state, user_role)

        print(f"DEBUG: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å: {role_to_use}")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–∏
        handlers = self.handlers_map.get(role_to_use, {})

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏
        main_handler = handlers.get(None)
        if main_handler:
            print(f"DEBUG: –ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {main_handler}")
            if callback.message:
                await callback.message.delete()
            await main_handler(callback.message if hasattr(callback, 'message') else callback)
            await state.clear()
        else:
            print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–æ–ª–∏: {role_to_use}")
            print(f"DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {list(handlers.keys())}")

async def get_role_to_use(state: FSMContext, user_role: str) -> str:
    current_state = await state.get_state()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    detected_role = None

    print(f"DEBUG get_role_to_use: current_state = '{current_state}', user_role = '{user_role}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
    role_prefixes = {
        "student": ["StudentMain", "HomeworkStates", "ProgressStates", "ShopStates",
                    "TrialEntStates", "StudentTestsStates", "CuratorStates", "AccountStates", "QuizStates"],
        "curator": ["CuratorMain", "CuratorGroupStates", "CuratorAnalyticsStates",
                    "CuratorHomeworkStates", "MessageStates", "CuratorTestsStatisticsStates"],
        "teacher": ["TeacherMain", "TeacherGroupStates", "TeacherAnalyticsStates",
                    "TeacherTestsStatisticsStates"],
        "manager": ["ManagerMain", "ManagerAnalyticsStates", "AddHomeworkStates",
                    "ManagerGroupStates", "ManagerTopicStates", "ManagerLessonStates",
                    "BonusTaskStates", "ManagerMonthTestsStates", "BonusTestStates"],
        "admin": ["AdminMain", "AdminSubjectsStates", "AdminCoursesStates", "AdminGroupsStates",
                  "AdminStudentsStates", "AdminCuratorsStates", "AdminTeachersStates", "AdminManagersStates"]
    }
    if current_state:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ —Ä–æ–ª–∏
        for role, prefixes in role_prefixes.items():
            for prefix in prefixes:
                if current_state.startswith(prefix):
                    print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ '{current_state}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—É '{prefix}' –¥–ª—è —Ä–æ–ª–∏ '{role}'")
                    detected_role = role
                    break
            if detected_role:
                break

        if not detected_role:
            print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ '{current_state}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –ø—Ä–µ—Ñ–∏–∫—Å—É")
            print(f"DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã: {role_prefixes}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ä–æ–ª—å
    role_to_use = detected_role or user_role
    print(f"DEBUG get_role_to_use: detected_role = '{detected_role}', final role_to_use = '{role_to_use}'")
    return role_to_use

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
navigation_manager = NavigationManager()