from typing import Dict, List, Tuple, Optional

from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from common.analytics.keyboards import get_back_to_analytics_kb


def get_student_topics_stats(student_id: str) -> Dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    
    Args:
        student_id: ID —É—á–µ–Ω–∏–∫–∞
        
    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ —Ç–µ–º–∞–º
    """
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    student_data = {
        "student1": {
            "name": "–ú–∞–¥–∏—è—Ä –°–∞–ø–∞—Ä–æ–≤",
            "topics": {
                "–ê–ª–∫–∞–Ω—ã": 80,
                "–ò–∑–æ–º–µ—Ä–∏—è": 45,
                "–ö–∏—Å–ª–æ—Ç—ã": 70
            }
        },
        "student2": {
            "name": "–ê—Ä—É–∂–∞–Ω –ê—Ö–º–µ—Ç–æ–≤–∞",
            "topics": {
                "–ê–ª–∫–∞–Ω—ã": 90,
                "–ò–∑–æ–º–µ—Ä–∏—è": 33,
                "–ö–∏—Å–ª–æ—Ç—ã": 60
            }
        },
        "student3": {
            "name": "–î–∏–∞–Ω–∞ –ù—É—Ä–ª–∞–Ω–æ–≤–∞",
            "topics": {
                "–ê–ª–∫–∞–Ω—ã": 85,
                "–ò–∑–æ–º–µ—Ä–∏—è": 40,
                "–ö–∏—Å–ª–æ—Ç—ã": 75
            }
        },
        "student4": {
            "name": "–ê—Ä–º–∞–Ω –°–µ—Ä–∏–∫–æ–≤",
            "topics": {
                "–ê–ª–∫–∞–Ω—ã": 75,
                "–ò–∑–æ–º–µ—Ä–∏—è": 30,
                "–ö–∏—Å–ª–æ—Ç—ã": 50
            }
        }
    }
    
    return student_data.get(student_id, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫", "topics": {}})

def get_group_stats(group_id: str) -> Dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–µ
    
    Args:
        group_id: ID –≥—Ä—É–ø–ø—ã
        
    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–ø–ø–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    """
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    group_data = {
        "group1": {
            "name": "–ò–Ω—Ç–µ–Ω—Å–∏–≤. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
            "subject": "–•–∏–º–∏—è",
            "homework_completion": 75,
            "topics": {
                "–ê–ª–∫–∞–Ω—ã": 82,
                "–ò–∑–æ–º–µ—Ä–∏—è": 37,
                "–ö–∏—Å–ª–æ—Ç—ã": 66
            },
            "rating": [
                {"name": "–ê—Ä—É–∂–∞–Ω", "points": 870},
                {"name": "–î–∏–∞–Ω–∞", "points": 800},
                {"name": "–ú–∞–¥–∏—è—Ä", "points": 780}
            ]
        },
        "group2": {
            "name": "–ò–Ω—Ç–µ–Ω—Å–∏–≤. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "subject": "–•–∏–º–∏—è",
            "homework_completion": 80,
            "topics": {
                "–ê–ª–∫–∞–Ω—ã": 78,
                "–ò–∑–æ–º–µ—Ä–∏—è": 42,
                "–ö–∏—Å–ª–æ—Ç—ã": 70
            },
            "rating": [
                {"name": "–ê—Ä–º–∞–Ω", "points": 850},
                {"name": "–ê–ª–∏—è", "points": 820},
                {"name": "–î–∏–∞—Å", "points": 790}
            ]
        }
    }
    
    return group_data.get(group_id, {
        "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
        "subject": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç",
        "homework_completion": 0,
        "topics": {},
        "rating": []
    })

def format_student_topics_stats(student_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º —É—á–µ–Ω–∏–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥
    
    Args:
        student_data: –î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Ç–µ–º—ã
    strong_topics = [topic for topic, percentage in student_data["topics"].items() 
                    if percentage >= 80]
    weak_topics = [topic for topic, percentage in student_data["topics"].items() 
                  if percentage <= 40]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = f"üìå {student_data['name']}\n"
    result_text += "üìà % –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º:\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
    for topic, percentage in student_data["topics"].items():
        status = "‚úÖ" if percentage >= 80 else "‚ùå" if percentage <= 40 else "‚ö†Ô∏è"
        result_text += f"‚Ä¢ {topic} ‚Äî {percentage}% {status}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Ç–µ–º–∞—Ö –≤ –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if strong_topics:
        result_text += "\nüü¢ –°–∏–ª—å–Ω—ã–µ —Ç–µ–º—ã (‚â•80%):\n"
        for topic in strong_topics:
            result_text += f"‚Ä¢ {topic}\n"
    
    if weak_topics:
        result_text += "\nüî¥ –°–ª–∞–±—ã–µ —Ç–µ–º—ã (‚â§40%):\n"
        for topic in weak_topics:
            result_text += f"‚Ä¢ {topic}\n"
    
    return result_text

def format_group_stats(group_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥
    
    Args:
        group_data: –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = f"üìó {group_data['subject']}\n"
    result_text += f"üìä –°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó: {group_data['homework_completion']}%\n"
    result_text += "üìà –°—Ä–µ–¥–Ω–∏–π % –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ –º–∏–∫—Ä–æ—Ç–µ–º–∞–º:\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
    for topic, percentage in group_data["topics"].items():
        result_text += f"‚Ä¢ {topic} ‚Äî {percentage}%\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º
    if group_data["rating"]:
        result_text += "\nüìã –†–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º:\n"
        for i, student in enumerate(group_data["rating"], 1):
            result_text += f"{i}. {student['name']} ‚Äî {student['points']} –±–∞–ª–ª–æ–≤\n"
    
    return result_text

def get_test_results(test_id: str, student_id: str) -> Dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    
    Args:
        test_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ—Å—Ç–∞
        student_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞
        
    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞
    """
    print(f"DEBUG: –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {test_id} –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_id}")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    test_results = {
        "course_entry_chem": {
            "total_questions": 30,
            "correct_answers": 15,
            "topics_progress": {
                "–ê–ª–∫–∞–Ω—ã": 90,
                "–ò–∑–æ–º–µ—Ä–∏—è": 33,
                "–ö–∏—Å–ª–æ—Ç—ã": 60,
                "–¶–∏–∫–ª–æ–∞–ª–∫–∞–Ω—ã": None  # None –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–µ–º–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞
            }
        },
        "course_entry_kz": {
            "total_questions": 30,
            "correct_answers": 20,
            "topics_progress": {
                "–î—Ä–µ–≤–Ω—è—è –∏—Å—Ç–æ—Ä–∏—è": 80,
                "–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ": 60,
                "–ù–æ–≤–æ–µ –≤—Ä–µ–º—è": 40,
                "–ù–æ–≤–µ–π—à–∞—è –∏—Å—Ç–æ—Ä–∏—è": None  # None –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–µ–º–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞
            }
        },
        "month_entry_chem_1": {
            "total_questions": 30,
            "correct_answers": 15,
            "topics_progress": {
                "–ê–ª–∫–∞–Ω—ã": 60,
                "–ò–∑–æ–º–µ—Ä–∏—è": 33,
                "–ö–∏—Å–ª–æ—Ç—ã": 60
            }
        },
        "month_control_chem_1": {
            "total_questions": 30,
            "correct_answers": 20,
            "topics_progress": {
                "–ê–ª–∫–∞–Ω—ã": 90,
                "–ò–∑–æ–º–µ—Ä–∏—è": 45,
                "–ö–∏—Å–ª–æ—Ç—ã": 100
            }
        }
    }
    
    result = test_results.get(test_id, {
        "total_questions": 0,
        "correct_answers": 0,
        "topics_progress": {}
    })
    
    print(f"DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result}")
    return result

def format_test_result(test_results: Dict, subject_name: str, test_type: str, month: str = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥
    
    Args:
        test_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
        subject_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞ (course_entry, month_entry, month_control)
        month: –ú–µ—Å—è—Ü (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if test_type == "course_entry":
        result_text = f"üìä –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –∫—É—Ä—Å–∞ –ø—Ä–æ–π–¥–µ–Ω\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\nüìó {subject_name}:\n"
    elif test_type == "month_entry":
        result_text = f"üìä –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞ {month} –∫—É—Ä—Å–∞ –ø—Ä–æ–π–¥–µ–Ω\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\nüìó {subject_name}:\n"
    elif test_type == "month_control":
        result_text = f"üìä –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Å—è—Ü–∞ {month} –∫—É—Ä—Å–∞ –ø—Ä–æ–π–¥–µ–Ω\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\nüìó {subject_name}:\n"
    else:
        result_text = f"üìä –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\nüìó {subject_name}:\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    result_text += f"–í–µ—Ä–Ω—ã—Ö: {test_results['correct_answers']} / {test_results['total_questions']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
    for topic, percentage in test_results["topics_progress"].items():
        if percentage is None:
            result_text += f"‚Ä¢ {topic} ‚Äî ‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ\n"
        else:
            status = "‚úÖ" if percentage >= 80 else "‚ùå" if percentage <= 40 else "‚ö†Ô∏è"
            result_text += f"‚Ä¢ {topic} ‚Äî {percentage}% {status}\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Ç–µ–º—ã
    strong_topics = [topic for topic, percentage in test_results["topics_progress"].items() 
                    if percentage is not None and percentage >= 80]
    weak_topics = [topic for topic, percentage in test_results["topics_progress"].items() 
                  if percentage is not None and percentage <= 40]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Ç–µ–º–∞—Ö
    if strong_topics:
        result_text += "\nüü¢ –°–∏–ª—å–Ω—ã–µ —Ç–µ–º—ã (‚â•80%):\n"
        for topic in strong_topics:
            result_text += f"‚Ä¢ {topic}\n"
    
    if weak_topics:
        result_text += "\nüî¥ –°–ª–∞–±—ã–µ —Ç–µ–º—ã (‚â§40%):\n"
        for topic in weak_topics:
            result_text += f"‚Ä¢ {topic}\n"
    
    return result_text

def format_test_comparison(entry_results: Dict, control_results: Dict, subject_name: str, month: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤
    
    Args:
        entry_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        control_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        subject_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        month: –ú–µ—Å—è—Ü
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    """
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–∏—Ä–æ—Å—Ç
    entry_topics = entry_results["topics_progress"]
    control_topics = control_results["topics_progress"]
    
    if entry_topics and control_topics:
        entry_avg = sum(entry_topics.values()) / len(entry_topics)
        control_avg = sum(control_topics.values()) / len(control_topics)
        growth = int(control_avg - entry_avg)
    else:
        growth = 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = f"üßæ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Å—è—Ü–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É:\nüìó {subject_name}:\n"
    result_text += f"–í–µ—Ä–Ω—ã—Ö: {entry_results['correct_answers']} / {entry_results['total_questions']} ‚Üí {control_results['correct_answers']} / {control_results['total_questions']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
    for topic in entry_topics:
        if topic in control_topics:
            entry_percentage = entry_topics[topic]
            control_percentage = control_topics[topic]
            result_text += f"‚Ä¢ {topic} ‚Äî {entry_percentage}% ‚Üí {control_percentage}%\n"
    
    result_text += f"\nüìà –û–±—â–∏–π –ø—Ä–∏—Ä–æ—Å—Ç: +{growth}%\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Ç–µ–º—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    strong_topics = [topic for topic, percentage in control_topics.items() 
                    if percentage is not None and percentage >= 80]
    weak_topics = [topic for topic, percentage in control_topics.items() 
                  if percentage is not None and percentage <= 40]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Ç–µ–º–∞—Ö
    if strong_topics:
        result_text += "\nüü¢ –°–∏–ª—å–Ω—ã–µ —Ç–µ–º—ã (‚â•80%):\n"
        for topic in strong_topics:
            result_text += f"‚Ä¢ {topic}\n"
    
    if weak_topics:
        result_text += "\nüî¥ –°–ª–∞–±—ã–µ —Ç–µ–º—ã (‚â§40%):\n"
        for topic in weak_topics:
            result_text += f"‚Ä¢ {topic}\n"
    
    return result_text

def get_subject_stats(subject_id: str) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É

    Args:
        subject_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞

    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
        "subject_id": subject_id,
        "name": "–•–∏–º–∏—è",
        "groups": [
            {
                "group_id": "group1",
                "name": "–ò–Ω—Ç–µ–Ω—Å–∏–≤. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
                "homework_completion": 75,
                "topics": {
                    "–ê–ª–∫–∞–Ω—ã": 82,
                    "–ò–∑–æ–º–µ—Ä–∏—è": 37,
                    "–ö–∏—Å–ª–æ—Ç—ã": 66
                },
                "rating": [
                    {"name": "–ê—Ä—É–∂–∞–Ω", "points": 870},
                    {"name": "–î–∏–∞–Ω–∞", "points": 800},
                    {"name": "–ú–∞–¥–∏—è—Ä", "points": 780}
                ]
            },
            {
                "group_id": "group2",
                "name": "–ò–Ω—Ç–µ–Ω—Å–∏–≤. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "homework_completion": 80,
                "topics": {
                    "–ê–ª–∫–∞–Ω—ã": 78,
                    "–ò–∑–æ–º–µ—Ä–∏—è": 42,
                    "–ö–∏—Å–ª–æ—Ç—ã": 70
                },
                "rating": [
                    {"name": "–ê—Ä–º–∞–Ω", "points": 850},
                    {"name": "–ê–ª–∏—è", "points": 820},
                    {"name": "–î–∏–∞—Å", "points": 790}
                ]
            }
        ]
    }

def get_general_stats() -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
    
    Returns:
        dict: –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
        "total_students": 450,
        "active_students": 380,
        "total_groups": 15,
        "subjects": [
            {"name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "average_score": 78.5, "completion_rate": 82.3},
            {"name": "–§–∏–∑–∏–∫–∞", "average_score": 75.2, "completion_rate": 79.8},
            {"name": "–•–∏–º–∏—è", "average_score": 81.7, "completion_rate": 85.4},
            {"name": "–ë–∏–æ–ª–æ–≥–∏—è", "average_score": 83.1, "completion_rate": 87.2}
        ],
        "monthly_progress": {
            "–Ø–Ω–≤–∞—Ä—å": 75.2,
            "–§–µ–≤—Ä–∞–ª—å": 78.5,
            "–ú–∞—Ä—Ç": 80.1,
            "–ê–ø—Ä–µ–ª—å": 82.3
        }
    }

def format_subject_stats(subject_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥
    
    Args:
        subject_data: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    result_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {subject_data['name']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
    result_text += "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ì—Ä—É–ø–ø—ã:\n"
    for group in subject_data["groups"]:
        result_text += f"‚Ä¢ {group['name']} - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –î–ó: {group['homework_completion']}%\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö –ø–æ —Ç–µ–º–∞–º
    result_text += "\nüìà –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Ç–µ–º–∞–º:\n"
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–º—ã –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    all_topics = {}
    for group in subject_data["groups"]:
        for topic, percentage in group["topics"].items():
            if topic in all_topics:
                all_topics[topic].append(percentage)
            else:
                all_topics[topic] = [percentage]
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º
    for topic, percentages in all_topics.items():
        avg_percentage = sum(percentages) / len(percentages)
        result_text += f"‚Ä¢ {topic} ‚Äî {avg_percentage:.1f}%\n"
    
    return result_text

def format_general_stats(general_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥
    
    Args:
        general_data: –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    result_text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    result_text += f"üë• –í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {general_data['total_students']}\n"
    result_text += f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤: {general_data['active_students']} ({general_data['active_students']/general_data['total_students']*100:.1f}%)\n"
    result_text += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {general_data['total_groups']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    result_text += "üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n"
    for subject in general_data["subjects"]:
        result_text += f"‚Ä¢ {subject['name']} ‚Äî —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {subject['average_score']}, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {subject['completion_rate']}%\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ –º–µ—Å—è—Ü–∞–º
    result_text += "\nüìÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Å—è—Ü–∞–º:\n"
    for month, progress in general_data["monthly_progress"].items():
        result_text += f"‚Ä¢ {month} ‚Äî {progress}%\n"
    
    return result_text


async def show_student_analytics(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—á–µ–Ω–∏–∫—É

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator)
    """
    student_id = await check_if_id_in_callback_data("analytics_student_",callback, state, "student")


    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    student_data = get_student_topics_stats(student_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—Å—Ç
    result_text = format_student_topics_stats(student_data)

    await callback.message.edit_text(
        result_text,
        reply_markup=get_back_to_analytics_kb()
    )
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è


async def show_group_analytics(callback: CallbackQuery, state: FSMContext, role: str):
    """
    –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ

    Args:
        callback: –û–±—ä–µ–∫—Ç CallbackQuery
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (curator)
    """
    group_id = await check_if_id_in_callback_data("analytics_group_",callback, state, "group")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    group_data = get_group_stats(group_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—Å—Ç
    result_text = format_group_stats(group_data)

    await callback.message.edit_text(
        result_text,
        reply_markup=get_back_to_analytics_kb()
    )


async def check_if_id_in_callback_data(callback_starts_with: str, callback: CallbackQuery, state: FSMContext, id_type)-> str:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback.data ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
    if callback.data.startswith(callback_starts_with):
        id = callback.data.replace(callback_starts_with, "")
        print(f"{id_type}_id: ", id)
        await state.update_data(**{id_type:id})
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –∏–ª–∏ –¥—Ä—É–≥–æ–π callback, –±–µ—Ä–µ–º ID –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        id = user_data.get(id_type)
        print(f"Using saved {id_type}_id: ", id)
    return id
